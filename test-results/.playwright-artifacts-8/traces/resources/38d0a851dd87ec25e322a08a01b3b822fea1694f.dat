import.meta.env = {"BASE_URL": "/", "DEV": true, "MODE": "development", "PROD": false, "SSR": false};globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { extractTelephoneCountryCode, synchronized } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { sendOtpSms$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/otp/send-otp-sms.ts";
import { checkOtpSms$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/otp/check-otp-sms.ts";
const MAX_COUNTER_OTP = 3;
const WAIT_FOR = import.meta.env.DEV ? 5 : 60;
export const atomWithPhone = ({
  email$,
  givenName$,
  familyName$,
  telephone$ = atom(),
  verified$ = atom(false)
}) => {
  const token$ = atom();
  token$.debugLabel = "token$";
  const otpTimerForSend$ = atom(0);
  otpTimerForSend$.debugLabel = "otpTimerForSend$";
  const otpCanResend$ = atom(MAX_COUNTER_OTP);
  otpCanResend$.debugLabel = "otpCanResend$";
  const telephoneWithPrefix$ = atom(async (get) => (await extractTelephoneCountryCode(await get(telephone$)))?.full);
  telephoneWithPrefix$.debugLabel = "telephoneWithPrefix$";
  function startCountdown(setWaitTime) {
    const now = Date.now();
    setWaitTime(WAIT_FOR);
    const interval = setInterval(() => {
      const seconds = Math.round(WAIT_FOR - (Date.now() - now) / 1e3);
      setWaitTime(seconds);
      if (seconds <= 0) {
        clearInterval(interval);
      }
    }, 1e3);
  }
  const setAction = synchronized(async (get, set, args) => {
    const {
      countryCode,
      telephone
    } = args;
    const oldTelephone = await get(telephoneWithPrefix$);
    const newTelephone = countryCode + (telephone || "");
    if (oldTelephone === newTelephone) {
      await set(telephone$, newTelephone);
      return {
        verified: await get(verified$)
      };
    }
    await set(telephone$, newTelephone);
    await set(verified$, false);
    return {
      verified: false
    };
  });
  const sendOtpAction = synchronized(async (get, set, args) => {
    const toReturn = {
      verified: false
    };
    const timer = get(otpTimerForSend$);
    if (timer > 0) {
      return toReturn;
    }
    const otpCanResend = get(otpCanResend$);
    if (otpCanResend <= 0) {
      return toReturn;
    }
    const sendOtpSms = await get(sendOtpSms$);
    const result = await sendOtpSms.mutateAsync({
      email: await get(email$),
      phone: await get(telephoneWithPrefix$),
      givenName: await get(givenName$),
      familyName: await get(familyName$)
    });
    set(token$, result.token);
    const newOtpCanResend = otpCanResend - 1;
    set(otpCanResend$, newOtpCanResend);
    if (newOtpCanResend > 0) {
      startCountdown((s) => set(otpTimerForSend$, s));
    }
    return toReturn;
  });
  const checkOtpAction = synchronized(async (get, set, args) => {
    const {
      otp
    } = args;
    const checkOtpSms = await get(checkOtpSms$);
    await checkOtpSms.mutateAsync({
      phone: await get(telephoneWithPrefix$),
      token: get(token$),
      otp
    });
    await set(verified$, true);
    set(token$, void 0);
    return {
      verified: true
    };
  });
  return atom(async (get) => {
    const telephone = await get(telephone$);
    const verified = await get(verified$);
    return {
      ...await extractTelephoneCountryCode(telephone) || {},
      verified,
      otpTimerForSend$,
      otpCanResend$
    };
  }, async (get, set, args) => {
    switch (args.action) {
      case "SET":
        return setAction(get, set, args);
      case "SEND_OTP":
        return sendOtpAction(get, set, args);
      case "CHECK_OTP":
        return checkOtpAction(get, set, args);
    }
  });
};

//# sourceMappingURL=data:application/json;base64,