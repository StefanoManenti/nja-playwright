globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { workingOnPanelStandaloneAtom, workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { ImmediateEffect } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/types.ts";
import { getEffectiveDate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/utils.ts";
import { customerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
export const effectiveDatesCommodityAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\effective-dates\\index.ts/effectiveDatesCommodityAtom", atom(async (get) => {
  if (get(workingOnPanelStandaloneAtom)) {
    const {
      effectiveDatesPanelAdoptionAtom
    } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/panel-adoption.ts");
    return get(effectiveDatesPanelAdoptionAtom);
  }
  const segmentSmall = await get(customerSegmentAtom) === Segment.SMALL;
  const wp = get(workingProductAtom);
  switch (wp?.operativeMode) {
    case OperativeMode.SWITCH_IN: {
      if (segmentSmall) {
        return {
          dateStandardActivation: null
        };
      }
      const {
        effectiveDatesSwitchInAtom
      } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/switch-in.ts");
      return get(effectiveDatesSwitchInAtom);
    }
    case OperativeMode.SWITCH_IN_TRANSFER: {
      const {
        effectiveDatesSwitchInTransferAtom
      } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/switch-in-transfer.ts");
      return get(effectiveDatesSwitchInTransferAtom);
    }
    case OperativeMode.CHANGE_OFFER: {
      const {
        effectiveDatesChangeOfferAtom
      } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/change-offer.ts");
      return get(effectiveDatesChangeOfferAtom);
    }
    case OperativeMode.TRANSFER: {
      const {
        effectiveDatesTransferAtom
      } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/transfer.ts");
      return get(effectiveDatesTransferAtom);
    }
    case OperativeMode.NEW_ACTIVATION:
      return {
        dateStandardActivation: null,
        dateFastActivation: null
      };
    default:
      return {};
  }
}));
effectiveDatesCommodityAtom.debugLabel = "effectiveDatesCommodityAtom";
export const effectiveDate$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\effective-dates\\index.ts/effectiveDate$", atom(async (get) => {
  const dates = await get(effectiveDatesCommodityAtom);
  const immediateEffect = await get(immediateEffectAtom);
  return getEffectiveDate(dates, immediateEffect);
}));
effectiveDate$.debugLabel = "effectiveDate$";
export const _immediateEffect$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\effective-dates\\index.ts/_immediateEffect$", atom(ImmediateEffect.NOT_SELECTED));
_immediateEffect$.debugLabel = "_immediateEffect$";
export const immediateEffectAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\effective-dates\\index.ts/immediateEffectAtom", atom(async (get) => {
  const dates = await get(effectiveDatesCommodityAtom);
  if (dates.dateStandardActivation !== void 0 && dates.dateFastActivation !== void 0) {
    return get(_immediateEffect$);
  }
  if (dates.dateStandardActivation !== void 0) {
    return ImmediateEffect.STANDARD;
  }
  if (dates.dateFastActivation !== void 0) {
    return ImmediateEffect.PRIORITY;
  }
  return ImmediateEffect.NOT_SELECTED;
}, (get, set, args) => {
  return set(_immediateEffect$, args);
}));
immediateEffectAtom.debugLabel = "immediateEffectAtom";

//# sourceMappingURL=data:application/json;base64,