globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atomAction, ServiceUnhandledResponseError, tryAsyncOrF } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { familyNameAtom, givenNameAtom, taxIdAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
import { estimatedYearPowerConsumptionAtom, powerSupplySelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply-selected-power.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { normalizeAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/egonNormalize.ts";
import { suggestStreet } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/suggestStreet.ts";
import { estimatedYearGasConsumptionAtom, gasSupplySelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply-selected-gas.ts";
export async function ocrBollette(files, signal) {
  const form = new FormData();
  files.forEach((file) => {
    form.append("file", file);
  });
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/ocrBollette`, {
    method: "POST",
    headers: {
      Accept: "application/json",
      transactionId: logHash
    },
    body: form,
    signal
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const rawData = await response.json();
  if (rawData.errors?.length) {
    throw new ServiceUnhandledResponseError(rawData.errors[0], logHash);
  }
  const data = {
    ...rawData,
    annualPowerConsumption: rawData.annualPowerConsumption ? parseFloat(rawData.annualPowerConsumption) : void 0,
    annualGasConsumption: rawData.annualGasConsumption ? parseFloat(rawData.annualGasConsumption) : void 0
  };
  if (data.annualPowerConsumption != null && isNaN(data.annualPowerConsumption)) {
    data.annualPowerConsumption = void 0;
  }
  if (data.annualGasConsumption != null && isNaN(data.annualGasConsumption)) {
    data.annualGasConsumption = void 0;
  }
  if (data.address && data.civic && data.cap && data.city && data.province) {
    try {
      const query = `${data.address}, ${data.civic}, ${data.cap} ${data.city} ${data.province}`;
      const suggestions = await suggestStreet(query, signal);
      if (suggestions !== "SERVICE-ERROR" && suggestions[0]) {
        const suggestion = suggestions[0];
        data.normalizedAddress = await normalizeAddress(suggestion, signal);
      }
    } catch (error) {
      console.error("Error normalizing address from OCR:", error);
    }
  }
  return data;
}
export const ocrBollette$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\weborder\\ocr-bollette.ts/ocrBollette$", atomAction(async (get, set, files, signal) => {
  const warn = (error) => console.warn("OCR Bollette:", error);
  const response = await ocrBollette(files, signal);
  console.log("OCR Bollette response:", response);
  if (response.name) {
    await tryAsyncOrF(set(givenNameAtom, response.name), warn);
  }
  if (response.surname) {
    await tryAsyncOrF(set(familyNameAtom, response.surname), warn);
  }
  if (response.fiscalCode) {
    await tryAsyncOrF(set(taxIdAtom, response.fiscalCode), warn);
  }
  if (response.annualPowerConsumption != null) {
    await tryAsyncOrF(set(estimatedYearPowerConsumptionAtom, response.annualPowerConsumption), warn);
  }
  if (response.annualGasConsumption != null) {
    await tryAsyncOrF(set(estimatedYearGasConsumptionAtom, response.annualGasConsumption), warn);
  }
  if (response.normalizedAddress) {
    await tryAsyncOrF(set(supplyAddressSelectedAtom, response.normalizedAddress), warn);
  }
  if (response.podCode) {
    try {
      const powerSupply = await get(powerSupplySelectedAtom);
      await set(powerSupply.pod, response.podCode);
    } catch (e) {
      warn(e);
    }
  }
  if (response.pdrCode) {
    try {
      const gasSupply = await get(gasSupplySelectedAtom);
      await set(gasSupply.pdr, response.pdrCode);
    } catch (e) {
      warn(e);
    }
  }
}));
ocrBollette$.debugLabel = "ocrBollette$";

//# sourceMappingURL=data:application/json;base64,