globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { customerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { operativeModeAtom, troubleshootingConcludedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { API, atomWithRetryableQuery, generateOperationID, getLogHashQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
async function checkMaintenanceMode() {
  const logHash = generateOperationID();
  const url = `${API}/webOrderCommonServices/v1/maintenance-mode/check?${getLogHashQuery(logHash)}`;
  const response = await fetch(url, {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    }
  });
  if (response.status === 200) {
    return await response.json();
  }
  return {};
}
const map = {
  // [OperativeMode.BROADBAND]: 'fibra',
  [OperativeMode.SWITCH_IN]: "switchIn",
  [OperativeMode.SWITCH_IN_TRANSFER]: "switchInVoltura",
  [OperativeMode.TRANSFER]: "voltura",
  [OperativeMode.CHANGE_OFFER]: "cambioProdotto",
  [OperativeMode.NEW_ACTIVATION]: "attivazioni"
};
const checkMaintenanceModeAtom = atomWithRetryableQuery(() => {
  return {
    queryKey: ["checkMaintenanceMode"],
    queryFn: () => checkMaintenanceMode()
  };
});
export const showMaintenanceModeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\weborder\\maintenanceMode.ts/showMaintenanceModeAtom", atom(async (get) => {
  if (!get(troubleshootingConcludedAtom)) {
    return false;
  }
  const operativeMode = get(operativeModeAtom);
  if (operativeMode == null) {
    return false;
  }
  const segment = await get(customerSegmentAtom);
  let key = map[operativeMode];
  if (key == null) {
    return false;
  }
  if (segment === Segment.SMALL) {
    key += "Small";
  }
  const output = await get(checkMaintenanceModeAtom);
  return !!output[key];
}));
showMaintenanceModeAtom.debugLabel = "showMaintenanceModeAtom";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFDckIsU0FBU0MsMkJBQTJCO0FBQ3BDLFNBQVNDLGVBQWU7QUFDeEIsU0FDRUMsbUJBQ0FDLG9DQUNLO0FBQ1AsU0FBU0MscUJBQXFCO0FBQzlCLFNBQ0VDLEtBQ0FDLHdCQUNBQyxxQkFDQUMsdUJBQ0s7QUF1QlAsZUFBZUMsdUJBQXNEO0FBQ25FLFFBQU1DLFVBQVVILG9CQUFvQjtBQUNwQyxRQUFNSSxNQUFNLEdBQUdOLEdBQUcscURBQXFERyxnQkFDckVFLE9BQ0YsQ0FBQztBQUVELFFBQU1FLFdBQVcsTUFBTUMsTUFBTUYsS0FBSztBQUFBLElBQ2hDRyxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1BDLFFBQVE7QUFBQSxNQUNSLGdCQUFnQjtBQUFBLElBQ2xCO0FBQUEsRUFDRixDQUFDO0FBRUQsTUFBSUosU0FBU0ssV0FBVyxLQUFLO0FBQzNCLFdBQVEsTUFBTUwsU0FBU00sS0FBSztBQUFBLEVBQzlCO0FBRUEsU0FBTyxDQUFDO0FBQ1Y7QUFFQSxNQUFNQyxNQUF5RDtBQUFBO0FBQUEsRUFFN0QsQ0FBQ2YsY0FBY2dCLFNBQVMsR0FBRztBQUFBLEVBQzNCLENBQUNoQixjQUFjaUIsa0JBQWtCLEdBQUc7QUFBQSxFQUNwQyxDQUFDakIsY0FBY2tCLFFBQVEsR0FBRztBQUFBLEVBQzFCLENBQUNsQixjQUFjbUIsWUFBWSxHQUFHO0FBQUEsRUFDOUIsQ0FBQ25CLGNBQWNvQixjQUFjLEdBQUc7QUFDbEM7QUFFQSxNQUFNQywyQkFBMkJuQix1QkFBdUIsTUFBTTtBQUM1RCxTQUFPO0FBQUEsSUFDTG9CLFVBQVUsQ0FBQyxzQkFBc0I7QUFBQSxJQUNqQ0MsU0FBU0EsTUFBTWxCLHFCQUFxQjtBQUFBLEVBQ3RDO0FBQ0YsQ0FBQztBQUVELGFBQUFtQiwwQkFBQUMsV0FBQUMsZUFBQUMsSUFBQSx5SUFBdUNoQyxLQUFLLE9BQU9nQyxRQUFRO0FBQ3pELE1BQUksQ0FBQ0EsSUFBSTVCLDRCQUE0QixHQUFHO0FBQ3RDLFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTTZCLGdCQUFnQkQsSUFBSTdCLGlCQUFpQjtBQUMzQyxNQUFJOEIsaUJBQWlCLE1BQU07QUFDekIsV0FBTztBQUFBLEVBQ1Q7QUFFQSxRQUFNQyxVQUFVLE1BQU1GLElBQUkvQixtQkFBbUI7QUFFN0MsTUFBSWtDLE1BQU1mLElBQUlhLGFBQWE7QUFDM0IsTUFBSUUsT0FBTyxNQUFNO0FBQ2YsV0FBTztBQUFBLEVBQ1Q7QUFFQSxNQUFJRCxZQUFZaEMsUUFBUWtDLE9BQU87QUFDN0JELFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTUUsU0FBUyxNQUFNTCxJQUFJTix3QkFBd0I7QUFDakQsU0FBTyxDQUFDLENBQUNXLE9BQU9GLEdBQUc7QUFDckIsQ0FBQyxDQUFDO0FBQUNOLHdCQUFBUyxhQUFBIiwibmFtZXMiOlsiYXRvbSIsImN1c3RvbWVyU2VnbWVudEF0b20iLCJTZWdtZW50Iiwib3BlcmF0aXZlTW9kZUF0b20iLCJ0cm91Ymxlc2hvb3RpbmdDb25jbHVkZWRBdG9tIiwiT3BlcmF0aXZlTW9kZSIsIkFQSSIsImF0b21XaXRoUmV0cnlhYmxlUXVlcnkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiZ2V0TG9nSGFzaFF1ZXJ5IiwiY2hlY2tNYWludGVuYW5jZU1vZGUiLCJsb2dIYXNoIiwidXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJzdGF0dXMiLCJqc29uIiwibWFwIiwiU1dJVENIX0lOIiwiU1dJVENIX0lOX1RSQU5TRkVSIiwiVFJBTlNGRVIiLCJDSEFOR0VfT0ZGRVIiLCJORVdfQUNUSVZBVElPTiIsImNoZWNrTWFpbnRlbmFuY2VNb2RlQXRvbSIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsInNob3dNYWludGVuYW5jZU1vZGVBdG9tIiwiZ2xvYmFsVGhpcyIsImpvdGFpQXRvbUNhY2hlIiwiZ2V0Iiwib3BlcmF0aXZlTW9kZSIsInNlZ21lbnQiLCJrZXkiLCJTTUFMTCIsIm91dHB1dCIsImRlYnVnTGFiZWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsibWFpbnRlbmFuY2VNb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7IGN1c3RvbWVyU2VnbWVudEF0b20gfSBmcm9tICcuLi8uLi9hdG9tcy9jdXN0b21lci1hdG9tcyc7XHJcbmltcG9ydCB7IFNlZ21lbnQgfSBmcm9tICcuLi8uLi9hdG9tcy9lbnVtcyc7XHJcbmltcG9ydCB7XHJcbiAgb3BlcmF0aXZlTW9kZUF0b20sXHJcbiAgdHJvdWJsZXNob290aW5nQ29uY2x1ZGVkQXRvbSxcclxufSBmcm9tICcuLi8uLi90cm91Ymxlc2hvb3RpbmcvYXRvbXMnO1xyXG5pbXBvcnQgeyBPcGVyYXRpdmVNb2RlIH0gZnJvbSAnLi4vLi4vdHJvdWJsZXNob290aW5nL3R5cGVzJztcclxuaW1wb3J0IHtcclxuICBBUEksXHJcbiAgYXRvbVdpdGhSZXRyeWFibGVRdWVyeSxcclxuICBnZW5lcmF0ZU9wZXJhdGlvbklELFxyXG4gIGdldExvZ0hhc2hRdWVyeSxcclxufSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5leHBvcnQgdHlwZSBNYWludGVuYW5jZU1vZGVXbyA9XHJcbiAgfCAnYXR0aXZhemlvbmknXHJcbiAgfCAnc3dpdGNoSW4nXHJcbiAgfCAnc3dpdGNoSW5Wb2x0dXJhJ1xyXG4gIHwgJ3ZvbHR1cmEnXHJcbiAgfCAnY2FtYmlvUHJvZG90dG8nXHJcbiAgfCAnc3dpdGNoSW5TbWFsbCdcclxuICB8ICdzd2l0Y2hJblZvbHR1cmFTbWFsbCdcclxuICB8ICd2b2x0dXJhU21hbGwnXHJcbiAgfCAnY2FtYmlvUHJvZG90dG9TbWFsbCdcclxuICB8ICduZHNFbGV0dHJvZG9tZXN0aWNpJ1xyXG4gIHwgJ25kc0NvbnNlcXVlbnppYWxlSW1waWFudGknXHJcbiAgfCAnbmRzU3RhbmRhbG9uZUltcGlhbnRpJ1xyXG4gIHwgc3RyaW5nO1xyXG5cclxuZXhwb3J0IHR5cGUgUGFnaW5hQ29ydGVzaWFPdXRwdXQgPSBQYXJ0aWFsPFJlY29yZDxNYWludGVuYW5jZU1vZGVXbywgYm9vbGVhbj4+O1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgdG8gY2hlY2sgaWYgbWFpbnRlbmFuY2UgbW9kZSBpcyBhY3RpdmUgZm9yIGRpZmZlcmVudCB3ZWIgb3JkZXIgdHlwZXNcclxuICogQHJldHVybnMgUmVjb3JkIG9mIG1haW50ZW5hbmNlIG1vZGUgc3RhdHVzIGZvciBlYWNoIHdlYiBvcmRlciB0eXBlXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjaGVja01haW50ZW5hbmNlTW9kZSgpOiBQcm9taXNlPFBhZ2luYUNvcnRlc2lhT3V0cHV0PiB7XHJcbiAgY29uc3QgbG9nSGFzaCA9IGdlbmVyYXRlT3BlcmF0aW9uSUQoKTtcclxuICBjb25zdCB1cmwgPSBgJHtBUEl9L3dlYk9yZGVyQ29tbW9uU2VydmljZXMvdjEvbWFpbnRlbmFuY2UtbW9kZS9jaGVjaz8ke2dldExvZ0hhc2hRdWVyeShcclxuICAgIGxvZ0hhc2hcclxuICApfWA7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIHJldHVybiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBQYWdpbmFDb3J0ZXNpYU91dHB1dDtcclxuICB9XHJcblxyXG4gIHJldHVybiB7fTtcclxufVxyXG5cclxuY29uc3QgbWFwOiBQYXJ0aWFsPFJlY29yZDxPcGVyYXRpdmVNb2RlLCBNYWludGVuYW5jZU1vZGVXbz4+ID0ge1xyXG4gIC8vIFtPcGVyYXRpdmVNb2RlLkJST0FEQkFORF06ICdmaWJyYScsXHJcbiAgW09wZXJhdGl2ZU1vZGUuU1dJVENIX0lOXTogJ3N3aXRjaEluJyxcclxuICBbT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU5fVFJBTlNGRVJdOiAnc3dpdGNoSW5Wb2x0dXJhJyxcclxuICBbT3BlcmF0aXZlTW9kZS5UUkFOU0ZFUl06ICd2b2x0dXJhJyxcclxuICBbT3BlcmF0aXZlTW9kZS5DSEFOR0VfT0ZGRVJdOiAnY2FtYmlvUHJvZG90dG8nLFxyXG4gIFtPcGVyYXRpdmVNb2RlLk5FV19BQ1RJVkFUSU9OXTogJ2F0dGl2YXppb25pJyxcclxufTtcclxuXHJcbmNvbnN0IGNoZWNrTWFpbnRlbmFuY2VNb2RlQXRvbSA9IGF0b21XaXRoUmV0cnlhYmxlUXVlcnkoKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBxdWVyeUtleTogWydjaGVja01haW50ZW5hbmNlTW9kZSddLFxyXG4gICAgcXVlcnlGbjogKCkgPT4gY2hlY2tNYWludGVuYW5jZU1vZGUoKSxcclxuICB9O1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93TWFpbnRlbmFuY2VNb2RlQXRvbSA9IGF0b20oYXN5bmMgKGdldCkgPT4ge1xyXG4gIGlmICghZ2V0KHRyb3VibGVzaG9vdGluZ0NvbmNsdWRlZEF0b20pKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBvcGVyYXRpdmVNb2RlID0gZ2V0KG9wZXJhdGl2ZU1vZGVBdG9tKTtcclxuICBpZiAob3BlcmF0aXZlTW9kZSA9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBzZWdtZW50ID0gYXdhaXQgZ2V0KGN1c3RvbWVyU2VnbWVudEF0b20pO1xyXG5cclxuICBsZXQga2V5ID0gbWFwW29wZXJhdGl2ZU1vZGVdO1xyXG4gIGlmIChrZXkgPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNlZ21lbnQgPT09IFNlZ21lbnQuU01BTEwpIHtcclxuICAgIGtleSArPSAnU21hbGwnO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2V0KGNoZWNrTWFpbnRlbmFuY2VNb2RlQXRvbSk7XHJcbiAgcmV0dXJuICEhb3V0cHV0W2tleV07XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3dlYm9yZGVyL21haW50ZW5hbmNlTW9kZS50cyJ9