globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  accountCodeSelectedAtom,
  panelsSelectedAtom,
  workingOnPanelAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class Panels extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(20);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/panel-adoption/PanelsStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "panels";
  }
  isInFlux(get) {
    return get(workingOnPanelAtom);
  }
  isAvailable(get) {
    const accountCodeSelected = get(accountCodeSelectedAtom);
    return !!accountCodeSelected;
  }
  toDo(get) {
    const panelsSelected = get(panelsSelectedAtom);
    return panelsSelected.length < 1;
  }
  depends() {
    return [StepDependencies.ACCOUNT];
  }
  provides() {
    return [StepDependencies.PANELS];
  }
}
export const panels = new Panels();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLGVBQWVKLEtBQUs7QUFBQSxFQUExQjtBQUFBO0FBQ0VLLG9CQUFXLElBQUlKLGFBQWEsRUFBRTtBQUU5QkssZ0JBQU9BLE1BQU0sT0FBTyxjQUFjO0FBQ2xDQyw0QkFBbUJMO0FBQUFBO0FBQUFBLEVBRW5CTSxXQUFXO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVVQyxTQUFTQyxLQUFhO0FBQzlCLFdBQU9BLElBQUlYLGtCQUFrQjtBQUFBLEVBQy9CO0FBQUEsRUFFVVksWUFBWUQsS0FBYTtBQUNqQyxVQUFNRSxzQkFBc0JGLElBQUliLHVCQUF1QjtBQUN2RCxXQUFPLENBQUMsQ0FBQ2U7QUFBQUEsRUFDWDtBQUFBLEVBRVVDLEtBQUtILEtBQWE7QUFDMUIsVUFBTUksaUJBQWlCSixJQUFJWixrQkFBa0I7QUFDN0MsV0FBT2dCLGVBQWVDLFNBQVM7QUFBQSxFQUNqQztBQUFBLEVBRUFDLFVBQVU7QUFDUixXQUFPLENBQUNiLGlCQUFpQmMsT0FBTztBQUFBLEVBQ2xDO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU8sQ0FBQ2YsaUJBQWlCZ0IsTUFBTTtBQUFBLEVBQ2pDO0FBQ0Y7QUFFTyxhQUFNQyxTQUFTLElBQUloQixPQUFPIiwibmFtZXMiOlsiYWNjb3VudENvZGVTZWxlY3RlZEF0b20iLCJwYW5lbHNTZWxlY3RlZEF0b20iLCJ3b3JraW5nT25QYW5lbEF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcEVycm9yQm91bmRhcnkiLCJTdGVwRGVwZW5kZW5jaWVzIiwiUGFuZWxzIiwicHJpb3JpdHkiLCJsYXp5IiwiV3JhcHBlckNvbXBvbmVudCIsInRvU3RyaW5nIiwiaXNJbkZsdXgiLCJnZXQiLCJpc0F2YWlsYWJsZSIsImFjY291bnRDb2RlU2VsZWN0ZWQiLCJ0b0RvIiwicGFuZWxzU2VsZWN0ZWQiLCJsZW5ndGgiLCJkZXBlbmRzIiwiQUNDT1VOVCIsInByb3ZpZGVzIiwiUEFORUxTIiwicGFuZWxzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInBhbmVscy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBhY2NvdW50Q29kZVNlbGVjdGVkQXRvbSxcclxuICBwYW5lbHNTZWxlY3RlZEF0b20sXHJcbiAgd29ya2luZ09uUGFuZWxBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHsgU3RlcERlcGVuZGVuY2llcyB9IGZyb20gJy4uL1N0ZXBEZXBlbmRlbmNpZXMnO1xyXG5cclxuY2xhc3MgUGFuZWxzIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDIwKTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9QYW5lbHNTdGVwJyk7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAncGFuZWxzJztcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpc0luRmx1eChnZXQ6IEdldHRlcikge1xyXG4gICAgcmV0dXJuIGdldCh3b3JraW5nT25QYW5lbEF0b20pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGlzQXZhaWxhYmxlKGdldDogR2V0dGVyKSB7XHJcbiAgICBjb25zdCBhY2NvdW50Q29kZVNlbGVjdGVkID0gZ2V0KGFjY291bnRDb2RlU2VsZWN0ZWRBdG9tKTtcclxuICAgIHJldHVybiAhIWFjY291bnRDb2RlU2VsZWN0ZWQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgdG9EbyhnZXQ6IEdldHRlcikge1xyXG4gICAgY29uc3QgcGFuZWxzU2VsZWN0ZWQgPSBnZXQocGFuZWxzU2VsZWN0ZWRBdG9tKTtcclxuICAgIHJldHVybiBwYW5lbHNTZWxlY3RlZC5sZW5ndGggPCAxO1xyXG4gIH1cclxuXHJcbiAgZGVwZW5kcygpIHtcclxuICAgIHJldHVybiBbU3RlcERlcGVuZGVuY2llcy5BQ0NPVU5UXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtTdGVwRGVwZW5kZW5jaWVzLlBBTkVMU107XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcGFuZWxzID0gbmV3IFBhbmVscygpO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL3N0ZXBzL3NyYy9saWIvcGFuZWwtYWRvcHRpb24vcGFuZWxzLnRzeCJ9