globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { fetchFornitureCambioProdotto } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/cambio-prodotto/forniture.ts";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/types.ts";
import { atomWithCheckD365 } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkD365.ts";
import { atomWithAddressAsString } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithAddressAsString.ts";
import { ChangeOfferAccount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/ChangeOfferAccount.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { writableAtomFromService } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/writableAtomFromService.ts";
import { atomWithPhone } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/phone-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
export class ChangeOfferCustomer {
  constructor(user) {
    this.user = user;
    this.type = atom("D365");
    const segment = user.partitaIVA ? Segment.SMALL : Segment.RESID;
    this.segment = atom(segment);
    this.customerCode = atom(user.userId);
    const d365$ = atomWithCheckD365({
      saltaCreditCheck: true,
      segmento: segment,
      nome: user.nome,
      cognome: user.cognomeRagSoc,
      email: user.emailRecapito,
      codiceFiscale: user.codiceFiscale,
      partitaIva: user.partitaIVA
    });
    function atomWithProfile(key) {
      return writableAtomFromService(d365$, (data) => data[key] ?? void 0);
    }
    function atomWithUser(k) {
      return atom(user[k]);
    }
    const residentialAddress$ = writableAtomFromService(d365$, (data) => EgonAddress.fromCheckD365Format(data.indirizzo) ?? void 0);
    const telephone$ = atomWithUser("cellulare");
    const email$ = atomWithUser("emailRecapito");
    const familyName$ = atomWithUser("cognomeRagSoc");
    const givenName$ = atomWithUser("nome");
    const vatNumber$ = atomWithProfile("partitaIva");
    const taxId$ = atomWithUser("codiceFiscale");
    const legalForm$ = atomWithProfile("formaGiuridica");
    this.profile = {
      businessName$: familyName$,
      email$,
      emailCrypt$: atom(),
      familyName$,
      hasActiveCommodities$: writableAtomFromService(d365$, (data) => data.hasAtLeast1ActiveCommodities),
      legalForm$,
      legalRepresentative$: writableAtomFromService(d365$, (response) => {
        if (response.nomeRapprLeg && response.cognomeRapprLeg && response.codFiscRapprLeg) {
          return {
            type: "individual",
            givenName: response.nomeRapprLeg || "",
            familyName: response.cognomeRapprLeg || "",
            taxId: response.codFiscRapprLeg || ""
          };
        }
      }),
      privacy$: writableAtomFromService(d365$, (response) => ({
        promoPlenitude: isConcessa(response.privacy?.privacyPromozionaleEni),
        marketResearch: isConcessa(response.privacy?.privacyAnalisiRicercaMercato),
        promoThirdParties: isConcessa(response.privacy?.privacyPromozionaleAltreImprese)
      })),
      address$: residentialAddress$,
      addressAsString$: atomWithAddressAsString(residentialAddress$),
      taxId$,
      telephone$,
      telephoneWithCountryCode$: atomWithPhone({
        email$,
        familyName$,
        givenName$,
        telephone$
      }),
      vatNumber$,
      vulnerable$: writableAtomFromService(d365$, (data) => !!data.vulnerabile),
      givenName$
    };
    this.accounts = atomWithErrorReset(async (get) => {
      const wp = get(workingProductAtom);
      const commodity = wp?.commodity?.toString();
      const forniture = await fetchFornitureCambioProdotto({
        commodity: commodity || "DUAL",
        codiceFiscale: this.user.codiceFiscale,
        partitaIva: this.user.partitaIVA
      });
      const map = /* @__PURE__ */ new Map();
      for (const fornitura of forniture) {
        if (fornitura.commodity) {
          map.set(fornitura.codiceConto, new ChangeOfferAccount(fornitura, this));
        }
      }
      return map;
    });
  }
}
function isConcessa(x) {
  return x === "CONCESSA";
}

//# sourceMappingURL=data:application/json;base64,