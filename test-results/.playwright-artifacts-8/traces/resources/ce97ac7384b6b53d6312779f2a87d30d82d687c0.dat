globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { useQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@tanstack_react-query.js?v=0189a8d1";
import { useAtomValue } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import __vite__cjsImport2_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useMemo = __vite__cjsImport2_react["useMemo"];
import { useDebounce } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/use-debounce.js?v=0189a8d1";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { customerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
async function getConsumoGasPrevisto(query, signal) {
  const response = await fetch(`${API}/webOrderCommonServices/consumoGasPrevistoNWO`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    signal,
    body: JSON.stringify({
      ...query,
      operationId: generateOperationID()
    })
  });
  if (response.status !== 200) {
    throw new Error();
  }
  return await response.json();
}
export function useGasEstimatedConsumption(city, supplyEqualToResidentialAddress, tipoUtilizzoGas) {
  const [argsDebounced] = useDebounce(useMemo(() => ({
    city,
    supplyEqualToResidentialAddress,
    tipoUtilizzoGas
  }), [city, supplyEqualToResidentialAddress, tipoUtilizzoGas]), 300);
  return useGasEstimatedConsumptionQuery(argsDebounced);
}
function useGasEstimatedConsumptionQuery({
  city,
  supplyEqualToResidentialAddress,
  tipoUtilizzoGas
}) {
  const contract = useAtomValue(currentContractInfoAtom, {
    delay: 0
  });
  const piva = useAtomValue(customerSegmentAtom, {
    delay: 0
  }) === Segment.SMALL;
  return useQuery({
    queryKey: [city, supplyEqualToResidentialAddress, tipoUtilizzoGas.join(";")],
    queryFn: async (context) => {
      const plicoCode = await contract.plicoCode;
      return getConsumoGasPrevisto({
        codiceProposta: plicoCode,
        comune: city || "",
        piva,
        fornitura_uguale_residenza: supplyEqualToResidentialAddress,
        tipoUtilizzoGas
      }, context.signal);
    },
    enabled: !!city && !!tipoUtilizzoGas?.length
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGdCQUFnQjtBQUN6QixTQUFTQyxvQkFBb0I7QUFDN0IsU0FBU0MsZUFBZTtBQUN4QixTQUFTQyxtQkFBbUI7QUFDNUIsU0FBU0MsK0JBQStCO0FBQ3hDLFNBQVNDLEtBQUtDLDJCQUEyQjtBQUN6QyxTQUFTQywyQkFBMkI7QUFDcEMsU0FBU0MsZUFBZTtBQUl4QixlQUFlQyxzQkFDYkMsT0FPQUMsUUFDQTtBQUNBLFFBQU1DLFdBQVcsTUFBTUMsTUFDckIsR0FBR1IsR0FBRyxpREFDTjtBQUFBLElBQ0VTLFFBQVE7QUFBQSxJQUNSQyxTQUFTO0FBQUEsTUFDUCxnQkFBZ0I7QUFBQSxNQUNoQkMsUUFBUTtBQUFBLElBQ1Y7QUFBQSxJQUNBTDtBQUFBQSxJQUNBTSxNQUFNQyxLQUFLQyxVQUFVO0FBQUEsTUFDbkIsR0FBR1Q7QUFBQUEsTUFDSFUsYUFBYWQsb0JBQW9CO0FBQUEsSUFDbkMsQ0FBQztBQUFBLEVBQ0gsQ0FDRjtBQUVBLE1BQUlNLFNBQVNTLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUlDLE1BQU07QUFBQSxFQUNsQjtBQUVBLFNBQVEsTUFBTVYsU0FBU1csS0FBSztBQUM5QjtBQUVPLGdCQUFTQywyQkFDZEMsTUFDQUMsaUNBQ0FDLGlCQUNBO0FBQ0EsUUFBTSxDQUFDQyxhQUFhLElBQUl6QixZQUN0QkQsUUFDRSxPQUFPO0FBQUEsSUFDTHVCO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0FDO0FBQUFBLEVBQ0YsSUFDQSxDQUFDRixNQUFNQyxpQ0FBaUNDLGVBQWUsQ0FDekQsR0FDQSxHQUNGO0FBRUEsU0FBT0UsZ0NBQWdDRCxhQUFhO0FBQ3REO0FBRUEsU0FBU0MsZ0NBQWdDO0FBQUEsRUFDdkNKO0FBQUFBLEVBQ0FDO0FBQUFBLEVBQ0FDO0FBS0YsR0FBRztBQUNELFFBQU1HLFdBQVc3QixhQUFhRyx5QkFBeUI7QUFBQSxJQUFFMkIsT0FBTztBQUFBLEVBQUUsQ0FBQztBQUNuRSxRQUFNQyxPQUNKL0IsYUFBYU0scUJBQXFCO0FBQUEsSUFBRXdCLE9BQU87QUFBQSxFQUFFLENBQUMsTUFBTXZCLFFBQVF5QjtBQUU5RCxTQUFPakMsU0FBUztBQUFBLElBQ2RrQyxVQUFVLENBQ1JULE1BQ0FDLGlDQUNBQyxnQkFBZ0JRLEtBQUssR0FBRyxDQUFDO0FBQUEsSUFFM0JDLFNBQVMsT0FBT0MsWUFBWTtBQUMxQixZQUFNQyxZQUFZLE1BQU1SLFNBQVNRO0FBQ2pDLGFBQU83QixzQkFDTDtBQUFBLFFBQ0U4QixnQkFBZ0JEO0FBQUFBLFFBQ2hCRSxRQUFRZixRQUFRO0FBQUEsUUFDaEJPO0FBQUFBLFFBQ0FTLDRCQUE0QmY7QUFBQUEsUUFDNUJDO0FBQUFBLE1BQ0YsR0FDQVUsUUFBUTFCLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsSUFDQStCLFNBQVMsQ0FBQyxDQUFDakIsUUFBUSxDQUFDLENBQUNFLGlCQUFpQmdCO0FBQUFBLEVBQ3hDLENBQUM7QUFDSCIsIm5hbWVzIjpbInVzZVF1ZXJ5IiwidXNlQXRvbVZhbHVlIiwidXNlTWVtbyIsInVzZURlYm91bmNlIiwiY3VycmVudENvbnRyYWN0SW5mb0F0b20iLCJBUEkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiY3VzdG9tZXJTZWdtZW50QXRvbSIsIlNlZ21lbnQiLCJnZXRDb25zdW1vR2FzUHJldmlzdG8iLCJxdWVyeSIsInNpZ25hbCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvcGVyYXRpb25JZCIsInN0YXR1cyIsIkVycm9yIiwianNvbiIsInVzZUdhc0VzdGltYXRlZENvbnN1bXB0aW9uIiwiY2l0eSIsInN1cHBseUVxdWFsVG9SZXNpZGVudGlhbEFkZHJlc3MiLCJ0aXBvVXRpbGl6em9HYXMiLCJhcmdzRGVib3VuY2VkIiwidXNlR2FzRXN0aW1hdGVkQ29uc3VtcHRpb25RdWVyeSIsImNvbnRyYWN0IiwiZGVsYXkiLCJwaXZhIiwiU01BTEwiLCJxdWVyeUtleSIsImpvaW4iLCJxdWVyeUZuIiwiY29udGV4dCIsInBsaWNvQ29kZSIsImNvZGljZVByb3Bvc3RhIiwiY29tdW5lIiwiZm9ybml0dXJhX3VndWFsZV9yZXNpZGVuemEiLCJlbmFibGVkIiwibGVuZ3RoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImdldENvbnN1bW9HYXNQcmV2aXN0by50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XHJcbmltcG9ydCB7IHVzZUF0b21WYWx1ZSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRGVib3VuY2UgfSBmcm9tICd1c2UtZGVib3VuY2UnO1xyXG5pbXBvcnQgeyBjdXJyZW50Q29udHJhY3RJbmZvQXRvbSB9IGZyb20gJy4uLy4uL2F0b21zL2N1cnJlbnQtY29udHJhY3QtaW5mby1hdG9tcyc7XHJcbmltcG9ydCB7IEFQSSwgZ2VuZXJhdGVPcGVyYXRpb25JRCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgY3VzdG9tZXJTZWdtZW50QXRvbSB9IGZyb20gJy4uLy4uL2F0b21zL2N1c3RvbWVyLWF0b21zJztcclxuaW1wb3J0IHsgU2VnbWVudCB9IGZyb20gJy4uLy4uL2F0b21zL2VudW1zJztcclxuXHJcbmV4cG9ydCB0eXBlIFRpcG9VdGlsaXp6b0dhcyA9ICdDT1RUVVJBIENJQkknIHwgJ0FDUVVBIENBTERBJyB8ICdSSVNDQUxEQU1FTlRPJztcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldENvbnN1bW9HYXNQcmV2aXN0byhcclxuICBxdWVyeToge1xyXG4gICAgdGlwb1V0aWxpenpvR2FzOiBUaXBvVXRpbGl6em9HYXNbXTtcclxuICAgIGZvcm5pdHVyYV91Z3VhbGVfcmVzaWRlbnphOiBib29sZWFuO1xyXG4gICAgY29kaWNlUHJvcG9zdGE6IHN0cmluZztcclxuICAgIGNvbXVuZTogc3RyaW5nO1xyXG4gICAgcGl2YTogYm9vbGVhbjtcclxuICB9LFxyXG4gIHNpZ25hbDogQWJvcnRTaWduYWxcclxuKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke0FQSX0vd2ViT3JkZXJDb21tb25TZXJ2aWNlcy9jb25zdW1vR2FzUHJldmlzdG9OV09gLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIHNpZ25hbDogc2lnbmFsLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgLi4ucXVlcnksXHJcbiAgICAgICAgb3BlcmF0aW9uSWQ6IGdlbmVyYXRlT3BlcmF0aW9uSUQoKSxcclxuICAgICAgfSksXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VHYXNFc3RpbWF0ZWRDb25zdW1wdGlvbihcclxuICBjaXR5OiBzdHJpbmcgfCB1bmRlZmluZWQsXHJcbiAgc3VwcGx5RXF1YWxUb1Jlc2lkZW50aWFsQWRkcmVzczogYm9vbGVhbixcclxuICB0aXBvVXRpbGl6em9HYXM6IFRpcG9VdGlsaXp6b0dhc1tdXHJcbikge1xyXG4gIGNvbnN0IFthcmdzRGVib3VuY2VkXSA9IHVzZURlYm91bmNlKFxyXG4gICAgdXNlTWVtbyhcclxuICAgICAgKCkgPT4gKHtcclxuICAgICAgICBjaXR5LFxyXG4gICAgICAgIHN1cHBseUVxdWFsVG9SZXNpZGVudGlhbEFkZHJlc3MsXHJcbiAgICAgICAgdGlwb1V0aWxpenpvR2FzLFxyXG4gICAgICB9KSxcclxuICAgICAgW2NpdHksIHN1cHBseUVxdWFsVG9SZXNpZGVudGlhbEFkZHJlc3MsIHRpcG9VdGlsaXp6b0dhc11cclxuICAgICksXHJcbiAgICAzMDBcclxuICApO1xyXG5cclxuICByZXR1cm4gdXNlR2FzRXN0aW1hdGVkQ29uc3VtcHRpb25RdWVyeShhcmdzRGVib3VuY2VkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXNlR2FzRXN0aW1hdGVkQ29uc3VtcHRpb25RdWVyeSh7XHJcbiAgY2l0eSxcclxuICBzdXBwbHlFcXVhbFRvUmVzaWRlbnRpYWxBZGRyZXNzLFxyXG4gIHRpcG9VdGlsaXp6b0dhcyxcclxufToge1xyXG4gIGNpdHk6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBzdXBwbHlFcXVhbFRvUmVzaWRlbnRpYWxBZGRyZXNzOiBib29sZWFuO1xyXG4gIHRpcG9VdGlsaXp6b0dhczogVGlwb1V0aWxpenpvR2FzW107XHJcbn0pIHtcclxuICBjb25zdCBjb250cmFjdCA9IHVzZUF0b21WYWx1ZShjdXJyZW50Q29udHJhY3RJbmZvQXRvbSwgeyBkZWxheTogMCB9KTtcclxuICBjb25zdCBwaXZhID1cclxuICAgIHVzZUF0b21WYWx1ZShjdXN0b21lclNlZ21lbnRBdG9tLCB7IGRlbGF5OiAwIH0pID09PSBTZWdtZW50LlNNQUxMO1xyXG5cclxuICByZXR1cm4gdXNlUXVlcnkoe1xyXG4gICAgcXVlcnlLZXk6IFtcclxuICAgICAgY2l0eSxcclxuICAgICAgc3VwcGx5RXF1YWxUb1Jlc2lkZW50aWFsQWRkcmVzcyxcclxuICAgICAgdGlwb1V0aWxpenpvR2FzLmpvaW4oJzsnKSxcclxuICAgIF0sXHJcbiAgICBxdWVyeUZuOiBhc3luYyAoY29udGV4dCkgPT4ge1xyXG4gICAgICBjb25zdCBwbGljb0NvZGUgPSBhd2FpdCBjb250cmFjdC5wbGljb0NvZGU7XHJcbiAgICAgIHJldHVybiBnZXRDb25zdW1vR2FzUHJldmlzdG8oXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY29kaWNlUHJvcG9zdGE6IHBsaWNvQ29kZSxcclxuICAgICAgICAgIGNvbXVuZTogY2l0eSB8fCAnJyxcclxuICAgICAgICAgIHBpdmE6IHBpdmEsXHJcbiAgICAgICAgICBmb3JuaXR1cmFfdWd1YWxlX3Jlc2lkZW56YTogc3VwcGx5RXF1YWxUb1Jlc2lkZW50aWFsQWRkcmVzcyxcclxuICAgICAgICAgIHRpcG9VdGlsaXp6b0dhczogdGlwb1V0aWxpenpvR2FzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGV4dC5zaWduYWxcclxuICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBlbmFibGVkOiAhIWNpdHkgJiYgISF0aXBvVXRpbGl6em9HYXM/Lmxlbmd0aCxcclxuICB9KTtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3dlYm9yZGVyL2dldENvbnN1bW9HYXNQcmV2aXN0by50cyJ9