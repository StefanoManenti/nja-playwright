import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/step-fieldset.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/step-fieldset.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import clsx from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/clsx.js?v=0189a8d1";
import __vite__cjsImport4_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const cloneElement = __vite__cjsImport4_react["cloneElement"]

;
import classes from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/layout.module.less";
export function StepFieldset({
  children,
  direction,
  className,
  items = 2,
  ...props
}) {
  const styleProps = {
    style: {
      "--items-per-row": items
    }
  };
  return /* @__PURE__ */ jsxDEV(
    "fieldset",
    {
      ...props,
      className: clsx(
        classes.stepFieldset,
        direction === "row" && classes.directionRow,
        className
      ),
      ...styleProps,
      children
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/step-fieldset.tsx",
      lineNumber: 30,
      columnNumber: 5
    },
    this
  );
}
_c = StepFieldset;
export function StepFieldsetItem({
  columns = 1,
  children,
  component
}) {
  const className = clsx(columns === 2 && classes.columns2);
  if (component == null) {
    return cloneElement(children, {
      ...children.props,
      className: clsx(children.props.className, className)
    });
  }
  const Component = component;
  return /* @__PURE__ */ jsxDEV(Component, { className, children }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/step-fieldset.tsx",
    lineNumber: 69,
    columnNumber: 10
  }, this);
}
_c2 = StepFieldsetItem;
var _c, _c2;
$RefreshReg$(_c, "StepFieldset");
$RefreshReg$(_c2, "StepFieldsetItem");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/step-fieldset.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IkFBNkJJOzs7OztnQkE3QkosT0FBVyxjQUFZO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3ZCO0FBQUEsRUFDRUE7QUFBQUEsT0FJSztBQUNQLE9BQU9DLGFBQWE7QUFRYixnQkFBU0MsYUFBYTtBQUFBLEVBQzNCQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQyxRQUFRO0FBQUEsRUFDUixHQUFHQztBQUNjLEdBQUc7QUFDcEIsUUFBTUMsYUFBYTtBQUFBLElBQ2pCQyxPQUFPO0FBQUEsTUFDTCxtQkFBbUJIO0FBQUFBLElBQ3JCO0FBQUEsRUFDRjtBQUVBLFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLEdBQUlDO0FBQUFBLE1BQ0osV0FBV0c7QUFBQUEsUUFDVFQsUUFBUVU7QUFBQUEsUUFDUlAsY0FBYyxTQUFTSCxRQUFRVztBQUFBQSxRQUMvQlA7QUFBQUEsTUFDRjtBQUFBLE1BQ0EsR0FBSUc7QUFBQUEsTUFFSEw7QUFBQUE7QUFBQUEsSUFUSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQTtBQUVKO0FBQUNVLEtBMUJlWDtBQTRCVCxnQkFBU1ksaUJBQWlCO0FBQUEsRUFDL0JDLFVBQVU7QUFBQSxFQUNWWjtBQUFBQSxFQUNBYTtBQVdFLEdBQUc7QUFDTCxRQUFNWCxZQUFZSyxLQUFLSyxZQUFZLEtBQUtkLFFBQVFnQixRQUFRO0FBRXhELE1BQUlELGFBQWEsTUFBTTtBQUNyQixXQUFPaEIsYUFBYUcsVUFBVTtBQUFBLE1BQzVCLEdBQUdBLFNBQVNJO0FBQUFBLE1BQ1pGLFdBQVdLLEtBQUtQLFNBQVNJLE1BQU1GLFdBQVdBLFNBQVM7QUFBQSxJQUNyRCxDQUFDO0FBQUEsRUFDSDtBQUVBLFFBQU1hLFlBQVlGO0FBQ2xCLFNBQU8sdUJBQUMsYUFBVSxXQUF1QmIsWUFBbEM7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUEyQztBQUNwRDtBQUFDZ0IsTUExQmVMO0FBQWdCLElBQUFELElBQUFNO0FBQUFDLGFBQUFQLElBQUE7QUFBQU8sYUFBQUQsS0FBQSIsIm5hbWVzIjpbImNsb25lRWxlbWVudCIsImNsYXNzZXMiLCJTdGVwRmllbGRzZXQiLCJjaGlsZHJlbiIsImRpcmVjdGlvbiIsImNsYXNzTmFtZSIsIml0ZW1zIiwicHJvcHMiLCJzdHlsZVByb3BzIiwic3R5bGUiLCJjbHN4Iiwic3RlcEZpZWxkc2V0IiwiZGlyZWN0aW9uUm93IiwiX2MiLCJTdGVwRmllbGRzZXRJdGVtIiwiY29sdW1ucyIsImNvbXBvbmVudCIsImNvbHVtbnMyIiwiQ29tcG9uZW50IiwiX2MyIiwiJFJlZnJlc2hSZWckIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInN0ZXAtZmllbGRzZXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xyXG5pbXBvcnQgUmVhY3QsIHtcclxuICBjbG9uZUVsZW1lbnQsXHJcbiAgQ29tcG9uZW50UHJvcHMsXHJcbiAgdHlwZSBDU1NQcm9wZXJ0aWVzLFxyXG4gIHR5cGUgRWxlbWVudFR5cGUsXHJcbn0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL2xheW91dC9sYXlvdXQubW9kdWxlLmxlc3MnO1xyXG5cclxudHlwZSBTdGVwRmllbGRzZXRQcm9wcyA9IHtcclxuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcclxuICBkaXJlY3Rpb24/OiAnY29sdW1uJyB8ICdyb3cnO1xyXG4gIGl0ZW1zPzogbnVtYmVyO1xyXG59ICYgQ29tcG9uZW50UHJvcHM8J2ZpZWxkc2V0Jz47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU3RlcEZpZWxkc2V0KHtcclxuICBjaGlsZHJlbixcclxuICBkaXJlY3Rpb24sXHJcbiAgY2xhc3NOYW1lLFxyXG4gIGl0ZW1zID0gMixcclxuICAuLi5wcm9wc1xyXG59OiBTdGVwRmllbGRzZXRQcm9wcykge1xyXG4gIGNvbnN0IHN0eWxlUHJvcHMgPSB7XHJcbiAgICBzdHlsZToge1xyXG4gICAgICAnLS1pdGVtcy1wZXItcm93JzogaXRlbXMsXHJcbiAgICB9IGFzIENTU1Byb3BlcnRpZXMsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxmaWVsZHNldFxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcclxuICAgICAgICBjbGFzc2VzLnN0ZXBGaWVsZHNldCxcclxuICAgICAgICBkaXJlY3Rpb24gPT09ICdyb3cnICYmIGNsYXNzZXMuZGlyZWN0aW9uUm93LFxyXG4gICAgICAgIGNsYXNzTmFtZVxyXG4gICAgICApfVxyXG4gICAgICB7Li4uc3R5bGVQcm9wc31cclxuICAgID5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9maWVsZHNldD5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU3RlcEZpZWxkc2V0SXRlbSh7XHJcbiAgY29sdW1ucyA9IDEsXHJcbiAgY2hpbGRyZW4sXHJcbiAgY29tcG9uZW50LFxyXG59OlxyXG4gIHwge1xyXG4gICAgICBjb2x1bW5zPzogbnVtYmVyO1xyXG4gICAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcclxuICAgICAgY29tcG9uZW50OiBFeGNsdWRlPEVsZW1lbnRUeXBlLCBmYWxzZT47XHJcbiAgICB9XHJcbiAgfCB7XHJcbiAgICAgIGNvbHVtbnM/OiBudW1iZXI7XHJcbiAgICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XHJcbiAgICAgIGNvbXBvbmVudD86IG5ldmVyO1xyXG4gICAgfSkge1xyXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGNsc3goY29sdW1ucyA9PT0gMiAmJiBjbGFzc2VzLmNvbHVtbnMyKTtcclxuXHJcbiAgaWYgKGNvbXBvbmVudCA9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XHJcbiAgICAgIC4uLmNoaWxkcmVuLnByb3BzLFxyXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBDb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgcmV0dXJuIDxDb21wb25lbnQgY2xhc3NOYW1lPXtjbGFzc05hbWV9PntjaGlsZHJlbn08L0NvbXBvbmVudD47XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy91aS1tb2xlY3VsZXMvc3JjL2xpYi9zdGVwLWZpZWxkc2V0LnRzeCJ9