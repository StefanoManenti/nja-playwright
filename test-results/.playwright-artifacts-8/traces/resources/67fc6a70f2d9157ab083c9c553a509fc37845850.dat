globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceBadInputError, ServiceLimits, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { AgeOutOfRangeError, CreditCheckError, Ddl009_010Error, TaxIdNotCoherentError, TaxIdNotValidError, TaxIdOutOfRetriesError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { API, atomWithRetryableQuery, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
const checkD365Limits = new ServiceLimits(
  4,
  // 5 chiamate massimo
  (reason) => new TaxIdOutOfRetriesError(reason)
);
async function checkD365(payload) {
  if (areCheckBypassed()) {
    return {
      master: "Prospect"
    };
  }
  checkD365Limits.check();
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/checkD365`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      segmento: payload.segmento,
      partitaIva: payload.partitaIva,
      nome: payload.nome,
      cognome: payload.cognome,
      codiceFiscale: payload.codiceFiscale,
      email: payload.email,
      saltaCreditCheck: payload.saltaCreditCheck,
      logHash,
      idLead: payload.idLead,
      plicoCode: payload.plicoCode,
      salesProcess: payload.salesProcess,
      salesProcessForLog: payload.salesProcessForLog
    })
  });
  if (response.status !== 200) {
    throw checkD365Limits.err(new ServiceUnhandledResponseError(response.statusText, logHash));
  }
  const data = await response.json();
  const errorCode = data.errorManagement?.errorCode;
  if (errorCode === "DDL_009" || errorCode === "DDL_010") {
    throw checkD365Limits.err(new Ddl009_010Error(errorCode, logHash, response));
  }
  if (data.esito === "KO_CREDIT_CHECK" || !payload.saltaCreditCheck && data.response.esitoCreditCheck == null) {
    throw checkD365Limits.err(new CreditCheckError("KO_CREDIT_CHECK", logHash, response));
  }
  if (data.esito !== "OK") {
    const code = errorCode;
    switch (code) {
      case "CODICE_FISCALE_NON_DI_MAGGIORENNE":
        throw checkD365Limits.err(new AgeOutOfRangeError(code, logHash, response));
      case "CF_NON_COERENTE":
        throw checkD365Limits.err(new TaxIdNotCoherentError(code, logHash, response));
      case "CF_NON_VALIDO":
        throw checkD365Limits.err(new TaxIdNotValidError(code, logHash, response));
      case "INPUT_VUOTI":
        throw checkD365Limits.err(new ServiceBadInputError(code, logHash, response));
      default:
        throw checkD365Limits.err(new ServiceUnhandledResponseError(code, logHash, response));
    }
  }
  if (!["Prospect", "D365"].includes(data.master)) {
    throw checkD365Limits.err(new ServiceUnhandledResponseError(data.master, logHash, response));
  }
  checkD365Limits.reset();
  return data;
}
export const atomWithCheckD365 = (params) => {
  return atomWithRetryableQuery(async (get) => {
    const contract = get(currentContractInfoAtom);
    const idLead = contract.idLead;
    const plicoCode = await contract.plicoCode;
    const salesProcess = await contract.salesProcess;
    const salesProcessForLog = await contract.salesProcessForLog;
    return {
      queryKey: ["checkD365", params.segmento, params.partitaIva, params.codiceFiscale, params.nome, params.cognome, params.email, params.saltaCreditCheck],
      queryFn: () => checkD365({
        ...params,
        idLead,
        plicoCode,
        salesProcess,
        salesProcessForLog
      })
    };
  });
};

//# sourceMappingURL=data:application/json;base64,