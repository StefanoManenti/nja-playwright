globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { ENABLE_NEW_PRODUCTS } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
import { MOCKS_OFFERS } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/products-collection/offerte.ts";
export async function fetchProduct(offer) {
  const mock = MOCKS_OFFERS[offer.code];
  if (mock) {
    if (mock.suboffer) {
      const aemResid2 = await fetchFromAem(mock.suboffer, Segment.RESID);
      if (!aemResid2) {
        throw Error("OFFERTA NON TROVATA");
      }
      return {
        ...aemResid2,
        ...mock
      };
    }
    return mock;
  }
  const [product, aemResid, aemSmall] = await Promise.all([ENABLE_NEW_PRODUCTS && fetchProductV2(offer), !ENABLE_NEW_PRODUCTS && fetchFromAem(offer, Segment.RESID), !ENABLE_NEW_PRODUCTS && fetchFromAem(offer, Segment.SMALL)]);
  if (!product && !aemResid && !aemSmall) {
    throw Error("OFFERTA NON TROVATA");
  }
  return {
    ...aemResid || {},
    ...aemSmall || {},
    ...product || {}
  };
}
async function fetchProductV2(offer) {
  const logHash = generateOperationID();
  const response = await fetch(`${API}/productsServices/v1/code/${offer.code}/channel/${offer.channel}/touchpoint/${offer.touchpoint}`, {
    method: "GET",
    headers: {
      Accept: "application/json",
      logHash
    }
  });
  if (response.status !== 200) {
    return null;
  }
  const json = await response.json();
  if (json.statusCodeValue !== 200) {
    return null;
  }
  return json.body;
}
async function fetchFromAem(offer, settore) {
  const {
    code,
    channel,
    touchpoint
  } = offer;
  if (!code || !channel || !touchpoint) {
    console.warn("Unexpected call of offerInfoAtom. Offer is not set.");
    return null;
  }
  const query = `code=${code}`;
  const url = `/graphql/execute.json/enigaseluce/${settore === Segment.SMALL ? "OffertaCommodityBusinessList" : "OffertaCommodityResidenzialeList"};${query}?t=${Date.now()}`;
  const response = await fetch(url, {
    method: "GET",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    }
  });
  if (response.status !== 200) {
    return null;
  }
  const data = await response.json();
  const items = data.data[settore === "SMALL" ? "eniGasELuceDettaglioOffertaCommodityBusinessList" : "eniGasELuceDettaglioOffertaCommodityResidenzialeList"].items;
  if (!items.length) {
    return null;
  }
  const itemsFiltered = items.filter((item) => item.codiceCanale === channel && item.codiceTpCanale === touchpoint);
  if (!itemsFiltered.length) {
    return null;
  }
  const adobeItem = itemsFiltered[0];
  if (!adobeItem) {
    return null;
  }
  return {
    ...getProductFromAdobe(adobeItem, settore),
    contentFragment: adobeItem,
    corrispettiviCommodity: offertaSetFromAdobe(adobeItem, settore)
  };
}
function offertaSetFromAdobe(offer, settore) {
  const luce = offer.contentFragmentLuce;
  const gas = offer.contentFragmentGas;
  return {
    codice: offer.codiceOfferta,
    settore,
    luce: !!luce,
    gas: !!gas,
    verde: {
      luceInclusa: luce.opzione_green_obbligatoria,
      luce: luce.opzione_green,
      gasIncluso: gas.opzione_green_obbligatoria,
      gas: gas.opzione_green
    },
    prezzi: {
      // Credo che si siano sbagliati ma se nessuno si lamenta allora il campo è giusto...
      gas: gas.commercializzazioneGasSmc,
      luce: {
        monoraria: luce.corrispettivoLuceMonorarioPrezzo || luce.corrispettivoVariabileLuceMonorario || // Su SMALL è diverso!
        luce.corrispettivoLuceMonorario,
        bioraria: {
          f1: luce.corrispettivoLuceBiorarioF1 || luce.corrispettivoVariabileLuceF1,
          f23: luce.corrispettivoLuceBiorarioF23 || luce.corrispettivoVariabileLuceF23
        },
        trioraria: {
          f1: luce.corrispettivoLuceMultiorarioF1,
          f2: luce.corrispettivoLuceMultiorarioF2,
          f3: luce.corrispettivoLuceMultiorarioF3
        }
      }
    },
    costiDiCommercializzazione: {
      gas: {
        qty: gas.commercializzazioneGasMese,
        unit: "€/mese"
      },
      luce: {
        qty: luce.commercializzazioneLuceMese,
        unit: "€/mese"
      }
    },
    promo: extractPromo(offer.contentFragmentPromo),
    sconti: {
      ...offer.prezziBarratiModalitOperativeAttive ? {
        prezziBarrati: {
          operativeModes: offer.prezziBarratiModalitOperativeAttive,
          badge: offer.prezziBarratiBadge
        }
      } : {}
    }
  };
}
function extractPromo(f) {
  if (!f) {
    return [];
  }
  const now = Date.now();
  const inizioPromo = new Date(f.dataInizioPromozione).getTime();
  const finePromo = new Date(f.dataFinePromozione).getTime();
  const checkDate = inizioPromo < now && finePromo > now;
  if (!checkDate) {
    console.debug("La promo non è visualizzata perché è passata o scaduta");
    return [];
  }
  const promo = {
    title: f.titoloWeborder,
    text: f.descrizioneWeborder,
    imageUrl: f.immagineWeborder?._path,
    scontoPercentualePromoSummer: f.scontoPercentualePromoSummer,
    operativeModes: f.scontoModalitaOperative,
    commodities: f.tipologiaPromozione.map((s) => {
      switch (s) {
        case "luce":
          return "POWER";
        case "gas":
          return "GAS";
        case "dual":
          return "DUAL";
        default:
          return s;
      }
    })
  };
  return [promo];
}
function getProductFromAdobe(offer, settore) {
  const luce = offer.contentFragmentLuce;
  const gas = offer.contentFragmentGas;
  return {
    type: settore === Segment.SMALL ? "BUSINESS" : "RESIDENTIAL",
    code: offer.codiceOfferta,
    channel: offer.codiceCanale,
    touchpoint: offer.codiceTpCanale,
    name: offer.nomeOfferta?.plaintext,
    coupon: offer.coupon?.split(/\s*\|\s*/),
    bills: offer.web_bolletta_obbligatoria ? ["DIGITAL"] : ["PAPER", "DIGITAL"],
    payments: offer.domiciliazione_obbligatoria ? ["DIRECT"] : ["POSTAL", "DIRECT"],
    // contentFragmentPromo: offer.contentFragmentPromo,
    // costs: {
    //   changeOffer: offer.costocambioprodotto,
    // },
    power: luce ? {
      productId: luce.codice_cpq,
      document: luce.documentoContrattuale,
      operativeModes: offer.modalitaOperativeAttive,
      green: luce.opzione_green
      // greenMandatory: luce.opzione_green_obbligatoria,
      // opzioni: luce.opzione_bioraria
      //   ? ['monoraria', 'bioraria']
      //   : ['monoraria'],
    } : void 0,
    gas: gas ? {
      productId: gas.codice_cpq,
      document: gas.documentoContrattuale,
      operativeModes: offer.modalitaOperativeAttive,
      green: gas.opzione_green
      // greenMandatory: gas.opzione_green_obbligatoria,
    } : void 0
  };
}

//# sourceMappingURL=data:application/json;base64,