globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, generateOperationID, getLogHashQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
export async function checkTransfer(params) {
  const logHash = generateOperationID();
  const url = `${API}/webOrderCommonServices/voltura/punto-fornitura/v1/check?${getLogHashQuery(logHash)}`;
  if (areCheckBypassed()) {
    return {};
  }
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(params)
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  switch (data.esitoGlobale) {
    case null:
      throw new ServiceUnhandledResponseError(data.esitoGlobale, logHash, data);
    case "OK":
      break;
    default:
      throw new ServiceUnhandledResponseError(data.esitoGlobale, logHash, data);
  }
  return data;
}

//# sourceMappingURL=data:application/json;base64,