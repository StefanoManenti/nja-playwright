globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { PATH_ATTIVAZIONI, PATH_CAMBIO_PRODOTTO, PATH_SWITCH_RESID, PATH_SWITCH_VOLTURA, PATH_VOLTURA } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { getQuerystringFromAnswersGas, getQuerystringFromAnswersPower } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/activation-questions.tsx";
import { gasAtom, offerIdAtom, operativeModeAtom, powerAtom, powerRateAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { billType$, paymentType$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/paymentType$.ts";
import { BillMapper, CommodityMapper, PaymentMapper, PowerRateMapper } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/qs-mappers.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { tsActivationGas$, tsActivationPower$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { getPassTroughQs } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
const baseUrlMap = {
  [OperativeMode.SWITCH_IN]: PATH_SWITCH_RESID,
  [OperativeMode.SWITCH_IN_TRANSFER]: PATH_SWITCH_VOLTURA,
  [OperativeMode.NEW_ACTIVATION]: PATH_ATTIVAZIONI,
  [OperativeMode.CHANGE_OFFER]: PATH_CAMBIO_PRODOTTO,
  [OperativeMode.TRANSFER]: PATH_VOLTURA
  // []: 'attiva-offerta-small',
  // []: 'nds',
};
export const weborderUrlAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/weborderUrlAtom", atom(async (get) => {
  const operativeMode = get(operativeModeAtom);
  if (!operativeMode) {
    throw Error("OperativeMode is NOT_SELECTED");
  }
  const baseUrl = baseUrlMap[operativeMode];
  const urlSearchParams = searchParamsMap[operativeMode];
  if (!baseUrl || !urlSearchParams) {
    return ``;
  }
  const qs = await get(urlSearchParams);
  return `${baseUrl}/index.html?${qs}`;
}));
weborderUrlAtom.debugLabel = "weborderUrlAtom";
const switchInParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/switchInParamsAtom", atom(async (get) => {
  return new URLSearchParams({
    codiceProdotto: get(getCodiceProdottoDualAtom),
    codiceOfferta: get(codiceOffertaAtom),
    commodity: get(commodityAtom),
    codiceCanale: get(codiceCanaleAtom),
    codiceConvenzione: get(codiceCanaleAtom),
    codiceTpCanale: get(codiceTpCanaleAtom),
    opzione: get(opzioneAtom),
    "bill-type": await get(billTypeAtom),
    "direct-debit": await get(directDebitAtom),
    ...getPassTroughQs()
  });
}));
switchInParamsAtom.debugLabel = "switchInParamsAtom";
const switchInTransferParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/switchInTransferParamsAtom", atom(async (get) => {
  return new URLSearchParams({
    codiceProdotto: get(codiceOffertaAtom),
    codiceOfferta: get(codiceOffertaAtom),
    commodity: get(commodityAtom),
    codiceCanale: get(codiceCanaleAtom),
    codiceConvenzione: get(codiceCanaleAtom),
    codiceTpCanale: get(codiceTpCanaleAtom),
    opzione: get(opzioneAtom),
    "bill-type": await get(billTypeAtom),
    "direct-debit": await get(directDebitAtom),
    ...getPassTroughQs()
  });
}));
switchInTransferParamsAtom.debugLabel = "switchInTransferParamsAtom";
const newActivationParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/newActivationParamsAtom", atom(async (get) => {
  const power = get(powerAtom);
  const activationPower = get(tsActivationPower$);
  const activationGas = get(tsActivationGas$);
  const urlSearchParams = power ? getQuerystringFromAnswersPower(activationPower) : getQuerystringFromAnswersGas(activationGas);
  urlSearchParams.set("codiceProdotto", get(codiceOffertaAtom));
  urlSearchParams.set("codiceOfferta", get(codiceOffertaAtom));
  urlSearchParams.set("commodity", get(commodityAtom));
  urlSearchParams.set("codiceCanale", get(codiceCanaleAtom) + "A");
  urlSearchParams.set("codiceConvenzione", get(codiceCanaleAtom) + "A");
  urlSearchParams.set("codiceTpCanale", "AT" + get(codiceTpCanaleAtom));
  urlSearchParams.set("opzione", get(opzioneAtom));
  urlSearchParams.set("bill-type", await get(billTypeAtom));
  urlSearchParams.set("direct-debit", await get(directDebitAtom));
  for (const [k, v] of Object.entries(getPassTroughQs())) {
    urlSearchParams.set(k, v);
  }
  return urlSearchParams;
}));
newActivationParamsAtom.debugLabel = "newActivationParamsAtom";
const changeOfferParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/changeOfferParamsAtom", atom(async (get) => {
  return new URLSearchParams({
    codiceProdotto: get(codiceOffertaAtom),
    codiceOfferta: get(codiceOffertaAtom),
    commodity: get(commodityAtom),
    codiceCanale: get(codiceCanaleAtom),
    codiceConvenzione: get(codiceCanaleAtom),
    codiceTpCanale: get(codiceTpCanaleAtom),
    opzione: get(opzioneAtom),
    ...getPassTroughQs()
  });
}));
changeOfferParamsAtom.debugLabel = "changeOfferParamsAtom";
const getTransferParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/getTransferParamsAtom", atom(async (get) => {
  return new URLSearchParams({
    codiceProdotto: get(codiceOffertaAtom),
    codiceOfferta: get(codiceOffertaAtom),
    commodity: get(commodityAtom),
    codiceCanale: get(codiceCanaleAtom) + "V",
    codiceConvenzione: get(codiceCanaleAtom) + "V",
    codiceTpCanale: "VL" + get(codiceTpCanaleAtom),
    opzione: get(opzioneAtom),
    "bill-type": await get(billTypeAtom),
    "direct-debit": await get(directDebitAtom),
    settore: "resid",
    ...getPassTroughQs()
  });
}));
getTransferParamsAtom.debugLabel = "getTransferParamsAtom";
const searchParamsMap = {
  [OperativeMode.SWITCH_IN]: switchInParamsAtom,
  [OperativeMode.SWITCH_IN_TRANSFER]: switchInTransferParamsAtom,
  [OperativeMode.NEW_ACTIVATION]: newActivationParamsAtom,
  [OperativeMode.CHANGE_OFFER]: changeOfferParamsAtom,
  [OperativeMode.TRANSFER]: getTransferParamsAtom
};
const getCodiceProdottoDualAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/getCodiceProdottoDualAtom", atom((get) => {
  const offer = get(offerIdAtom);
  return offer.code;
}));
getCodiceProdottoDualAtom.debugLabel = "getCodiceProdottoDualAtom";
const codiceOffertaAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/codiceOffertaAtom", atom((get) => {
  const {
    code
  } = get(offerIdAtom);
  const power = get(powerAtom);
  const gas = get(gasAtom);
  if (!power) {
    return code.replace(/_L[A-Z]+-/, "_");
  }
  if (!gas) {
    return code.replace(/-G[A-Z]+/, "");
  }
  return code;
}));
codiceOffertaAtom.debugLabel = "codiceOffertaAtom";
const codiceCanaleAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/codiceCanaleAtom", atom((get) => {
  const offer = get(offerIdAtom);
  return offer.channel;
}));
codiceCanaleAtom.debugLabel = "codiceCanaleAtom";
const codiceTpCanaleAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/codiceTpCanaleAtom", atom((get) => {
  const offer = get(offerIdAtom);
  return offer.touchpoint;
}));
codiceTpCanaleAtom.debugLabel = "codiceTpCanaleAtom";
const commodityAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/commodityAtom", atom((get) => {
  const power = !!get(powerAtom);
  const gas = !!get(gasAtom);
  return new CommodityMapper({
    power,
    gas
  }).qs;
}));
commodityAtom.debugLabel = "commodityAtom";
const opzioneAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/opzioneAtom", atom((get) => {
  const powerRate = get(powerRateAtom);
  return new PowerRateMapper(powerRate).qs;
}));
opzioneAtom.debugLabel = "opzioneAtom";
const billTypeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/billTypeAtom", atom(async (get) => {
  const bill = await get(billType$);
  return new BillMapper(bill).qs;
}));
billTypeAtom.debugLabel = "billTypeAtom";
const directDebitAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/directDebitAtom", atom(async (get) => {
  const payment = await get(paymentType$);
  return new PaymentMapper(payment).qs;
}));
directDebitAtom.debugLabel = "directDebitAtom";
export const troubleshootingAttivazioniAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\web-order.ts/troubleshootingAttivazioniAtom", atom(async (get) => {
  const power = get(powerAtom);
  const gas = get(gasAtom);
  const offer = get(offerIdAtom);
  if (power && gas) throw Error("DUAL");
  if (!power && !gas) throw Error("NO GAS OR POWER");
  const path = getUrlAttivazioniPortale(offer.code, power, gas);
  const urlSearchParams = new URLSearchParams({
    codiceProdotto: get(getCodiceProdottoDualAtom),
    codiceOfferta: get(codiceOffertaAtom),
    commodity: get(commodityAtom),
    codiceCanale: get(codiceCanaleAtom),
    codiceConvenzione: get(codiceCanaleAtom),
    codiceTpCanale: get(codiceTpCanaleAtom),
    opzione: get(opzioneAtom),
    "bill-type": await get(billTypeAtom),
    "direct-debit": await get(directDebitAtom),
    coupon: "undefined",
    // dip: 'true'
    ...getPassTroughQs()
  });
  return path + "?" + urlSearchParams.toString();
}));
troubleshootingAttivazioniAtom.debugLabel = "troubleshootingAttivazioniAtom";
const offerAttivazioni = {
  "BASE_LXNOIV-GXNOIV": "per-noi",
  "BASE_LFIXATIV-GFIXATIV": "fixa-time",
  "BASE_LINSV-GINSV": "energia-sempre-piu",
  "BASE_LTCASAV-GTCASAV": "trend-casa"
};
function getUrlAttivazioniPortale(offerCode, power, gas) {
  let s = "/offerta/casa/nuova-fornitura/";
  const element = offerAttivazioni[offerCode];
  if (element == null) {
    throw Error("OFFER UNKNOWN");
  }
  s += element;
  if (power) s += "-luce";
  if (gas) s += "-gas";
  return s;
}

//# sourceMappingURL=data:application/json;base64,