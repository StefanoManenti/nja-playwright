globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atomAction, CustomError, NotImplementedError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { buildPanelBestSizeAtom, buildPanelCompatibilityAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/panel-adoption/index.ts";
import { buildConsumptionDataServiceAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/consumption-data.ts";
import { atomWithCheckAsset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkAsset.ts";
import { atomWithPanelsLocationAlreadyActive } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/panelsDetails.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { atomWithCheckPod, StatoPod } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkPod.ts";
import { CannotActivateError, SupplyAlreadyActiveError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { atomWithCheckPdr, StatoPdr } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkPdr.ts";
import { TipoTroubleshooting } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/types.ts";
import { overriddenTipoTroubleshootingGas$, overriddenTipoTroubleshootingPower$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/tipo-troubleshooting.ts";
import { writableAtomFromService, writableAtomFromServiceStub } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/writableAtomFromService.ts";
export class NewPowerSupply {
  constructor(account) {
    this.account = account;
    this.contractCode = atom("");
    this.assetId = atom("");
    this.assetCode = atom("");
    this.pdfCode = atom("");
    this.pod = atom("");
    this.checkAsset = atomWithCheckAsset(this);
    this.consumption = {
      estimatedYear: atom()
    };
    this.checkPodAtom = atom(async (get) => {
      const pod = get(this.pod);
      if (!pod) {
        return;
      }
      return get(atomWithCheckPod(pod));
    });
    this.checkPodForSwitchIn = atomAction(async (get) => {
      const checkPod = await get(this.checkPodAtom);
      if (!checkPod) {
        return;
      }
      const {
        status,
        logHash
      } = checkPod;
      switch (status) {
        case StatoPod.Attivo:
        case StatoPod.Inesistente:
        case StatoPod.Altro_Fornitore:
          break;
        case StatoPod.Disalimentato:
        case StatoPod.Libero:
        case StatoPod.NonAttivabile:
          throw new CannotActivateError("POD", logHash);
        case StatoPod.Errore:
          break;
      }
      const result = {
        result: "OK",
        status
      };
      return result;
    });
    this.checkPodForNewActivation = atomAction(async (get, set) => {
      const checkPod = await get(this.checkPodAtom);
      if (!checkPod) {
        return;
      }
      const {
        status,
        logHash
      } = checkPod;
      let pdfNonIdentificato = false;
      let overrideTipoTroubleshooting;
      switch (status) {
        case StatoPod.Disalimentato:
          overrideTipoTroubleshooting = TipoTroubleshooting.PowerS01;
          break;
        case StatoPod.Libero:
          overrideTipoTroubleshooting = TipoTroubleshooting.PowerA01;
          break;
        case StatoPod.NonAttivabile:
          throw new CannotActivateError("POD", logHash);
        case StatoPod.Attivo:
          throw new SupplyAlreadyActiveError("POD", logHash);
        case StatoPod.Altro_Fornitore:
          throw new SupplyAlreadyActiveError("POD", logHash);
        case StatoPod.Inesistente:
        case StatoPod.Errore:
          pdfNonIdentificato = true;
          break;
      }
      set(overriddenTipoTroubleshootingPower$, overrideTipoTroubleshooting);
      const result = {
        result: "OK",
        status,
        showModal: pdfNonIdentificato ? "pdfNonIdentificato" : void 0
      };
      return result;
    });
    // @ts-expect-error Type CheckPodResult | undefined is not assignable to type CheckPodResult
    this.checkPodStub = atomAction(async () => {
      const result = {
        result: "OK"
      };
      return result;
    });
    this.kwFromServiceAtom = atom(async (get) => {
      const checkPod = await get(this.checkPodAtom);
      return checkPod?.kw;
    });
    this.kwAtom = writableAtomFromService(this.kwFromServiceAtom, (x) => x);
    this.voltageAtom = writableAtomFromServiceStub();
  }
  checkPodForOperativeModeAtoms(operativeMode) {
    switch (operativeMode) {
      case OperativeMode.SWITCH_IN:
      case OperativeMode.SWITCH_IN_TRANSFER:
        return this.checkPodForSwitchIn;
      case OperativeMode.NEW_ACTIVATION:
        return this.checkPodForNewActivation;
      case OperativeMode.TRANSFER:
        throw new NotImplementedError();
      default:
        return this.checkPodStub;
    }
  }
}
export class NewGasSupply {
  constructor(account) {
    this.account = account;
    this.contractCode = atom("");
    this.assetId = atom("");
    this.assetCode = atom("");
    this.pdfCode = atom("");
    this.pdr = atom("");
    this.checkAsset = atomWithCheckAsset(this);
    this.consumption = {
      estimatedYear: atom(),
      type: atom()
    };
    this.checkPdrAtom = atom(async (get) => {
      const pdr = get(this.pdr);
      if (!pdr) {
        return;
      }
      return get(atomWithCheckPdr(pdr));
    });
    this.checkPdrForSwitchIn = atomAction(async (get) => {
      const checkPdr = await get(this.checkPdrAtom);
      if (!checkPdr) {
        return;
      }
      const {
        status,
        logHash
      } = checkPdr;
      switch (status) {
        case StatoPdr.Attivo:
        case StatoPdr.Inesistente:
        case StatoPdr.Altro_Fornitore:
          break;
        case StatoPdr.Disalimentato:
        case StatoPdr.Libero:
        case StatoPdr.DisalimentatoA40:
        case StatoPdr.LiberoA40:
        case StatoPdr.NonAttivabile:
          throw new CannotActivateError("PDR", logHash);
        case StatoPdr.Errore:
          break;
      }
      const result = {
        result: "OK",
        status
      };
      return result;
    });
    this.checkPdrForNewActivation = atomAction(async (get, set) => {
      const checkPdr = await get(this.checkPdrAtom);
      if (!checkPdr) {
        return;
      }
      const {
        status,
        logHash
      } = checkPdr;
      let pdfNonIdentificato = false;
      let overrideTipoTroubleshooting;
      switch (status) {
        case StatoPdr.DisalimentatoA40:
        case StatoPdr.LiberoA40:
          overrideTipoTroubleshooting = TipoTroubleshooting.GasA40_c;
          break;
        case StatoPdr.Disalimentato:
        case StatoPdr.Libero:
        case StatoPdr.OkTecnico:
          break;
        case StatoPdr.NonAttivabile:
          throw new CannotActivateError("PDR", logHash);
        case StatoPdr.Attivo:
          throw new SupplyAlreadyActiveError("PDR", logHash);
        case StatoPdr.Altro_Fornitore:
          throw new SupplyAlreadyActiveError("PDR", logHash);
        case StatoPdr.Inesistente:
        case StatoPdr.Errore:
          pdfNonIdentificato = true;
          break;
      }
      set(overriddenTipoTroubleshootingGas$, overrideTipoTroubleshooting);
      const result = {
        result: "OK",
        status,
        showModal: pdfNonIdentificato ? "pdfNonIdentificato" : void 0
      };
      return result;
    });
    // @ts-expect-error Type CheckPdrResult | undefined is not assignable to type CheckPdrResult
    this.checkPdrStub = atomAction(async () => {
      const result = {
        result: "OK"
      };
      return result;
    });
  }
  checkPdrForOperativeModeAtoms(operativeMode) {
    switch (operativeMode) {
      case OperativeMode.SWITCH_IN:
      case OperativeMode.SWITCH_IN_TRANSFER:
        return this.checkPdrForSwitchIn;
      case OperativeMode.NEW_ACTIVATION:
        return this.checkPdrForNewActivation;
      case OperativeMode.TRANSFER:
        throw new NotImplementedError();
      default:
        return this.checkPdrStub;
    }
  }
}
export class PrivateAreaPowerSupply {
  constructor(f, accountCode, customer, account) {
    this.accountCode = accountCode;
    this.account = account;
    this.existing = true;
    this.checkAsset = atomWithCheckAsset(this);
    this.buildConsumptionData = () => {
      const atom1 = buildConsumptionDataServiceAtom(this.accountCode);
      return atom(async (get) => {
        const supplies = await get(atom1);
        const pdfCode = get(this.pdfCode);
        const supply = supplies.find((supply2) => supply2.pdf === pdfCode && supply2.type === "LUCE");
        if (!supply) return;
        return supply.consumptions;
      });
    };
    this.productName = f.prodotto;
    this.assetSiebel = f.fornitura;
    this.contractCode = atom(f.numeroContratto || "");
    this.assetId = atom(f.assetId || "");
    this.assetCode = atom(f.assetCode || "");
    this.pdfCode = atom(f.codicePdf);
    this.pod = atom(f.podPdr);
    this.panelBestSize = buildPanelBestSizeAtom(this, customer.customerCode);
    this.panelCompatible = buildPanelCompatibilityAtom(this);
    this.activePanelsLocations$ = atomWithPanelsLocationAlreadyActive(this, accountCode);
    this.consumptionData = this.buildConsumptionData();
    this.consumption = {
      currentYear: atom(async (get) => {
        const consumptionData = await get(this.consumptionData);
        if (!consumptionData) return;
        return [...consumptionData].sort((a, b) => {
          const i = parseInt(a.year) * 100 + a.numericalMonth;
          const j = parseInt(b.year) * 100 + b.numericalMonth;
          return j - i;
        }).filter((c) => !c || !c.isNull || !c.isPartial).slice(0, 12).map((c) => c.consumptionsF1 + c.consumptionsF2F3).reduce((acc, curr) => acc + curr, 0);
      }),
      estimatedYear: atom()
    };
  }
}
export class PrivateAreaGasSupply {
  constructor(f, customer, account) {
    this.customer = customer;
    this.account = account;
    this.existing = true;
    this.contractCode = atom("");
    this.assetId = atom("");
    this.assetCode = atom("");
    this.pdfCode = atom("");
    this.pdr = atom("");
    this.checkAsset = atomWithCheckAsset(this);
    this.assetSiebel = f.fornitura;
    this.productName = f.prodotto;
    this.contractCode = atom(f.numeroContratto || "");
    this.assetCode = atom(f.assetCode || "");
    this.pdfCode = atom(f.codicePdf);
    this.pdr = atom(f.podPdr);
  }
}
export class ExistingSupplyError extends CustomError {
  constructor() {
    super("Cannot edit an existing supply");
  }
}
export function isExistingPowerSupply(p) {
  return !!p.existing;
}
export function isExistingGasSupply(p) {
  return !!p.existing;
}

//# sourceMappingURL=data:application/json;base64,