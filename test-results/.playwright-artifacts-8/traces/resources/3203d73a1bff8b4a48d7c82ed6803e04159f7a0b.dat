globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { costiAttivazione } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/costiAttivazione.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { TransferType, transferTypeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/transfer.ts";
import { tipoTroubleshootingCalcolato$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/tipo-troubleshooting.ts";
import { getActivationSdr, VOLTURA_CAMBIO_FORNITORE, VOLTURA_GAS, VOLTURA_GAS_INCORPORAZIONE_SOCIETARIA, VOLTURA_GAS_MORTIS_CAUSA, VOLTURA_POWER, VOLTURA_POWER_INCORPORAZIONE_SOCIETARIA, VOLTURA_POWER_MORTIS_CAUSA } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/costs/sdr.ts";
export const activationCosts$ = atomWithErrorReset(async (get) => {
  const contract = get(currentContractInfoAtom);
  const idLead = contract.idLead;
  const plicoCode = await contract.plicoCode;
  const wp = get(workingProductAtom);
  const commodityObj = wp.commodity;
  const commodity = commodityObj.toString();
  const codiceIstat = (await get(supplyAddressSelectedAtom))?.istatCode;
  const toReturn = {};
  async function getSdr(commodity2) {
    switch (wp.operativeMode) {
      case OperativeMode.NEW_ACTIVATION: {
        const tipoTroubleshooting = await get(tipoTroubleshootingCalcolato$);
        return getActivationSdr(tipoTroubleshooting);
      }
      case OperativeMode.SWITCH_IN_TRANSFER: {
        if (commodity2 === "POWER") return VOLTURA_CAMBIO_FORNITORE;
        return;
      }
      case OperativeMode.TRANSFER: {
        const tipologyTransfer = get(transferTypeAtom);
        if (commodity2 === "GAS") {
          if (tipologyTransfer === TransferType.ORDINARIA) return VOLTURA_GAS;
          if (tipologyTransfer === TransferType.MORTIS_CAUSA) return VOLTURA_GAS_MORTIS_CAUSA;
          if (tipologyTransfer === TransferType.INCORPORAZIONE_SOCIETARIA) return VOLTURA_GAS_INCORPORAZIONE_SOCIETARIA;
          return VOLTURA_GAS;
        }
        if (commodity2 === "POWER") {
          if (tipologyTransfer === TransferType.ORDINARIA) return VOLTURA_POWER;
          if (tipologyTransfer === TransferType.MORTIS_CAUSA) return VOLTURA_POWER_MORTIS_CAUSA;
          if (tipologyTransfer === TransferType.INCORPORAZIONE_SOCIETARIA) return VOLTURA_POWER_INCORPORAZIONE_SOCIETARIA;
          return VOLTURA_POWER;
        }
      }
    }
  }
  if (commodityObj.gas) {
    const sdr = await getSdr("GAS");
    if (sdr) {
      toReturn.gas = await costiAttivazione({
        idLead,
        plicoCode,
        commodity,
        codiceSdr: sdr.codiceSdr,
        descrizioneSdr: sdr.descrizioneSdr,
        codiceIstat
      });
    }
  }
  if (commodityObj.power) {
    const sdr = await getSdr("POWER");
    if (sdr) {
      toReturn.power = await costiAttivazione({
        idLead,
        plicoCode,
        commodity,
        codiceSdr: sdr.codiceSdr,
        descrizioneSdr: sdr.descrizioneSdr,
        codiceIstat
      });
    }
  }
  return toReturn;
});

//# sourceMappingURL=data:application/json;base64,