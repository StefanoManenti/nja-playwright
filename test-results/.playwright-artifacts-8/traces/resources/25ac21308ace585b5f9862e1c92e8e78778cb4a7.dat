globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { getPrivateAreaCommonQuerystring } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
import { CustomerWithNoAccounts, CustomerWithNoAccountsForChangeOffer } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
export async function fetchFornitureCambioProdotto(params) {
  const logHash = generateOperationID();
  const qs = getPrivateAreaCommonQuerystring(logHash);
  const body = JSON.stringify({
    commodity: params.commodity,
    partitaIva: params.partitaIva,
    codiceFiscale: params.codiceFiscale
  });
  const response = await fetch(`${API}/webOrderCommonServices/cambio-prodotto/forniture/v1/list?${qs}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  if (data.esito === "NESSUNA_FORNITURA_PER_CAMBIO_PRODOTTO") {
    throw new CustomerWithNoAccountsForChangeOffer(data.esito, logHash, data);
  }
  if (data.esito === "CLIENTE_SENZA_FORNITURE") {
    throw new CustomerWithNoAccounts(data.esito, logHash, data);
  }
  if (data.esito !== "OK") {
    throw new ServiceUnhandledResponseError(data.esito, logHash, data);
  }
  return data.forniture;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFDQUFxQztBQUM5QyxTQUFTQyxLQUFLQywyQkFBMkI7QUFDekMsU0FBU0MsdUNBQXVDO0FBQ2hELFNBQ0VDLHdCQUNBQyw0Q0FDSztBQWdGUCxzQkFBc0JDLDZCQUE2QkMsUUFLaEQ7QUFDRCxRQUFNQyxVQUFVTixvQkFBb0I7QUFDcEMsUUFBTU8sS0FBS04sZ0NBQWdDSyxPQUFPO0FBQ2xELFFBQU1FLE9BQU9DLEtBQUtDLFVBQVU7QUFBQSxJQUMxQkMsV0FBV04sT0FBT007QUFBQUEsSUFDbEJDLFlBQVlQLE9BQU9PO0FBQUFBLElBQ25CQyxlQUFlUixPQUFPUTtBQUFBQSxFQUN4QixDQUFDO0FBRUQsUUFBTUMsV0FBVyxNQUFNQyxNQUNyQixHQUFHaEIsR0FBRyw2REFBNkRRLEVBQUUsSUFDckU7QUFBQSxJQUNFUyxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQVY7QUFBQUEsRUFDRixDQUNGO0FBRUEsTUFBSU0sU0FBU0ssV0FBVyxLQUFLO0FBQzNCLFVBQU0sSUFBSXJCLDhCQUNSZ0IsU0FBU00sWUFDVGQsU0FDQVEsUUFDRjtBQUFBLEVBQ0Y7QUFFQSxRQUFNTyxPQUFRLE1BQU1QLFNBQVNRLEtBQUs7QUFXbEMsTUFBSUQsS0FBS0UsVUFBVSx5Q0FBeUM7QUFDMUQsVUFBTSxJQUFJcEIscUNBQXFDa0IsS0FBS0UsT0FBT2pCLFNBQVNlLElBQUk7QUFBQSxFQUMxRTtBQUNBLE1BQUlBLEtBQUtFLFVBQVUsMkJBQTJCO0FBQzVDLFVBQU0sSUFBSXJCLHVCQUF1Qm1CLEtBQUtFLE9BQU9qQixTQUFTZSxJQUFJO0FBQUEsRUFDNUQ7QUFDQSxNQUFJQSxLQUFLRSxVQUFVLE1BQU07QUFDdkIsVUFBTSxJQUFJekIsOEJBQThCdUIsS0FBS0UsT0FBT2pCLFNBQVNlLElBQUk7QUFBQSxFQUNuRTtBQUVBLFNBQU9BLEtBQUtHO0FBQ2QiLCJuYW1lcyI6WyJTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvciIsIkFQSSIsImdlbmVyYXRlT3BlcmF0aW9uSUQiLCJnZXRQcml2YXRlQXJlYUNvbW1vblF1ZXJ5c3RyaW5nIiwiQ3VzdG9tZXJXaXRoTm9BY2NvdW50cyIsIkN1c3RvbWVyV2l0aE5vQWNjb3VudHNGb3JDaGFuZ2VPZmZlciIsImZldGNoRm9ybml0dXJlQ2FtYmlvUHJvZG90dG8iLCJwYXJhbXMiLCJsb2dIYXNoIiwicXMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbW1vZGl0eSIsInBhcnRpdGFJdmEiLCJjb2RpY2VGaXNjYWxlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJlc2l0byIsImZvcm5pdHVyZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJmb3JuaXR1cmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBBUEksIGdlbmVyYXRlT3BlcmF0aW9uSUQgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IGdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcgfSBmcm9tICcuLi9wcml2YXRlLWFyZWEvdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIEN1c3RvbWVyV2l0aE5vQWNjb3VudHMsXHJcbiAgQ3VzdG9tZXJXaXRoTm9BY2NvdW50c0ZvckNoYW5nZU9mZmVyLFxyXG59IGZyb20gJy4uLy4uL2Vycm9ycyc7XHJcblxyXG5leHBvcnQgdHlwZSBGb3JuaXR1cmEgPSB7XHJcbiAgLyoqIEBleGFtcGxlIFwiODAwODAxMjY3MDAxMTExXCIgKi9cclxuICBjb2RpY2VDb250cmF0dG86IHN0cmluZztcclxuICAvKiogQGV4YW1wbGUgXCI4MDA4MDEyNjcwMDFcIiAqL1xyXG4gIGNvZGljZUNvbnRvOiBzdHJpbmc7XHJcbiAgLyoqIEBleGFtcGxlIFwiVmlsbGEgYWwgbWFyZVwiICovXHJcbiAgYWxpYXM6IHN0cmluZztcclxuICAvKiogQGV4YW1wbGUgXCIxLTEtRzkyNDgwQ1wiICovXHJcbiAgY29kaWNlQXNzZXRTaWViZWxHYXM6IHN0cmluZztcclxuICAvKiogQGV4YW1wbGUgXCIxLTEtRzhYMkFORVwiICovXHJcbiAgY29kaWNlQXNzZXRTaWViZWxQb3dlcjogc3RyaW5nO1xyXG4gIC8qKiBAZXhhbXBsZSBcIkZBU1RFTkVSR1kgTFVDRSAtIExGQVNUMTgyXzFcIiAqL1xyXG4gIGNvZGljZVNpZWJlbFByb2RvdHRvUG93ZXI6IHN0cmluZztcclxuICAvKiogQGV4YW1wbGUgXCJGQVNURU5FUkdZIEdBUyAtIEdGQVNUMTgyXzFcIiAqL1xyXG4gIGNvZGljZVNpZWJlbFByb2RvdHRvR2FzOiBzdHJpbmc7XHJcbiAgdGlwaVV0aWxpenpvOiAoJ0FDUVVBIENBTERBJyB8ICdDT1RUVVJBJyB8ICdSSVNDQUxEQU1FTlRPJylbXTtcclxuICBjb21tb2RpdHk6ICdEVUFMJyB8ICdQT1dFUicgfCAnR0FTJztcclxuICAvKiogQGV4YW1wbGUgXCJJVDAxMkUwMDIzODA2MVwiICovXHJcbiAgcG9kOiBzdHJpbmc7XHJcbiAgLyoqIEBleGFtcGxlIFwiMDUyNjAyMDA2NTY0NjRcIiAqL1xyXG4gIHBkcjogc3RyaW5nO1xyXG4gIGF0dGl2bzogdHJ1ZTtcclxuICBpbmRpcml6em9Gb3JuaXR1cmE6IHtcclxuICAgIC8qKiBAZXhhbXBsZSBcIlZJQVwiICovXHJcbiAgICB0b3Bvbm9tYXN0aWNhOiBzdHJpbmc7XHJcbiAgICBjb2RpY2VFZ29uOiBudWxsO1xyXG4gICAgLyoqIEBleGFtcGxlIFwiQUxCSU5PXCIgKi9cclxuICAgIHZpYTogc3RyaW5nO1xyXG4gICAgLyoqIEBleGFtcGxlIFwiNlwiICovXHJcbiAgICBjaXZpY286IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIk1JTEFOT1wiICovXHJcbiAgICBjb211bmU6IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIk1JXCIgKi9cclxuICAgIHByb3Y6IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIjIwMTQ3XCIgKi9cclxuICAgIGNhcDogc3RyaW5nO1xyXG4gICAgbm9tZUNvbXBsZXRvOiBzdHJpbmcgfCBudWxsO1xyXG4gICAgY2VydGlmaWNhdG86IGJvb2xlYW47XHJcbiAgICAvKiogQGV4YW1wbGUgXCIwMTUxNDYgKi9cclxuICAgIGNvZGljZUlzdGF0Q29tdW5lOiBzdHJpbmc7XHJcbiAgfTtcclxuICBjb25zdW1vQW5udW9HYXM6IG51bWJlcjtcclxuICBjb25zdW1vQW5udW9Qb3dlcjogbnVtYmVyO1xyXG4gIC8qKiBAZXhhbXBsZSBcIjNcIiAqL1xyXG4gIHBvdGVuemFJbXBlZ25hdGE6IHN0cmluZztcclxuICBvcHppb25lQmlvcmFyaWE6IGJvb2xlYW47XHJcbiAgb3B6aW9uZVZlcmRlOiBib29sZWFuO1xyXG4gIGRvbWljaWxpYXppb25lOiBib29sZWFuO1xyXG4gIGJvbGxldHRhRGlnaXRhbGU6IGJvb2xlYW47XHJcbiAgLyoqIEBleGFtcGxlIFwiSVQzMFUwNTAzNDEwMTAwMDAwMDAwMDQzMjA1XCIgKi9cclxuICBpYmFuOiBzdHJpbmc7XHJcbiAgaW50ZXN0YXRhcmlvVWd1YWxlQ2xpZW50ZTogYm9vbGVhbjtcclxuICBub21lSW50ZXN0YXRhcmlvOiBzdHJpbmc7XHJcbiAgY29nbm9tZUludGVzdGF0YXJpbzogc3RyaW5nO1xyXG4gIC8qKiBAZXhhbXBsZSBcIjk0MDUyNzMwMDM2XCIgKi9cclxuICBjb2RpY2VGaXNjYWxlSW50ZXN0YXRhcmlvOiBzdHJpbmc7XHJcbiAgaW5kaXJpenpvRXNhemlvbmU6IHtcclxuICAgIC8qKiBAZXhhbXBsZSBcIlZJQVwiICovXHJcbiAgICB0b3Bvbm9tYXN0aWNhOiBzdHJpbmc7XHJcbiAgICBjb2RpY2VFZ29uOiBudWxsO1xyXG4gICAgLyoqIEBleGFtcGxlIFwiR0lVU0VQUEUgR1VFUlpPTklcIiAqL1xyXG4gICAgdmlhOiBzdHJpbmc7XHJcbiAgICAvKiogQGV4YW1wbGUgXCIzN1wiICovXHJcbiAgICBjaXZpY286IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIk1JTEFOT1wiICovXHJcbiAgICBjb211bmU6IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIk1JXCIgKi9cclxuICAgIHByb3Y6IHN0cmluZztcclxuICAgIC8qKiBAZXhhbXBsZSBcIjIwMTU4XCIgKi9cclxuICAgIGNhcDogc3RyaW5nO1xyXG4gICAgbm9tZUNvbXBsZXRvOiBudWxsO1xyXG4gICAgY2VydGlmaWNhdG86IGJvb2xlYW47XHJcbiAgICBjb2RpY2VJc3RhdENvbXVuZTogc3RyaW5nO1xyXG4gIH07XHJcbiAgLyoqIEBleGFtcGxlIFwiRkFTVEVORVJHWSBHQVMgLSBHRkFTVDE4Ml8xIC0gRkFTVEVORVJHWSBMVUNFIC0gTEZBU1QxODJfMSAqL1xyXG4gIGRlc2NyaXppb25lUHJvZG90dG86IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEZvcm5pdHVyZUNhbWJpb1Byb2RvdHRvKHBhcmFtczoge1xyXG4gIGNvZGljZUZpc2NhbGU/OiBzdHJpbmc7XHJcbiAgcGFydGl0YUl2YT86IHN0cmluZztcclxuICAvKiogw6ggbGEgY29tbW9kaXR5IGRlbCBwcm9kb3R0byBwYXNzYXRvIG5lbCBsaW5rIGRpIHBhcnRlbnphLiAqL1xyXG4gIGNvbW1vZGl0eTogJ0RVQUwnIHwgJ1BPV0VSJyB8ICdHQVMnO1xyXG59KSB7XHJcbiAgY29uc3QgbG9nSGFzaCA9IGdlbmVyYXRlT3BlcmF0aW9uSUQoKTtcclxuICBjb25zdCBxcyA9IGdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcobG9nSGFzaCk7XHJcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIGNvbW1vZGl0eTogcGFyYW1zLmNvbW1vZGl0eSxcclxuICAgIHBhcnRpdGFJdmE6IHBhcmFtcy5wYXJ0aXRhSXZhLFxyXG4gICAgY29kaWNlRmlzY2FsZTogcGFyYW1zLmNvZGljZUZpc2NhbGUsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICBgJHtBUEl9L3dlYk9yZGVyQ29tbW9uU2VydmljZXMvY2FtYmlvLXByb2RvdHRvL2Zvcm5pdHVyZS92MS9saXN0PyR7cXN9YCxcclxuICAgIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBib2R5LFxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgdGhyb3cgbmV3IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yKFxyXG4gICAgICByZXNwb25zZS5zdGF0dXNUZXh0LFxyXG4gICAgICBsb2dIYXNoLFxyXG4gICAgICByZXNwb25zZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyB7XHJcbiAgICBlc2l0bzpcclxuICAgICAgfCAnT0snXHJcbiAgICAgIHwgJ05FU1NVTkFfRk9STklUVVJBX1BFUl9DQU1CSU9fUFJPRE9UVE8nXHJcbiAgICAgIHwgJ0lOUFVUX1ZVT1RJJ1xyXG4gICAgICB8ICdDTElFTlRFX0lORVNJU1RFTlRFJ1xyXG4gICAgICB8ICdDTElFTlRFX1NFTlpBX0ZPUk5JVFVSRSdcclxuICAgICAgfCAnRVJST1JFX0lNUFJFVklTVE8nO1xyXG5cclxuICAgIGZvcm5pdHVyZTogQXJyYXk8Rm9ybml0dXJhPjtcclxuICB9O1xyXG4gIGlmIChkYXRhLmVzaXRvID09PSAnTkVTU1VOQV9GT1JOSVRVUkFfUEVSX0NBTUJJT19QUk9ET1RUTycpIHtcclxuICAgIHRocm93IG5ldyBDdXN0b21lcldpdGhOb0FjY291bnRzRm9yQ2hhbmdlT2ZmZXIoZGF0YS5lc2l0bywgbG9nSGFzaCwgZGF0YSk7XHJcbiAgfVxyXG4gIGlmIChkYXRhLmVzaXRvID09PSAnQ0xJRU5URV9TRU5aQV9GT1JOSVRVUkUnKSB7XHJcbiAgICB0aHJvdyBuZXcgQ3VzdG9tZXJXaXRoTm9BY2NvdW50cyhkYXRhLmVzaXRvLCBsb2dIYXNoLCBkYXRhKTtcclxuICB9XHJcbiAgaWYgKGRhdGEuZXNpdG8gIT09ICdPSycpIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihkYXRhLmVzaXRvLCBsb2dIYXNoLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhLmZvcm5pdHVyZTtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL2NhbWJpby1wcm9kb3R0by9mb3JuaXR1cmUudHMifQ==