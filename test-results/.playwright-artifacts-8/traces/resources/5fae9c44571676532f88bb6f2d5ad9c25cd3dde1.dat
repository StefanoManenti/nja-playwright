globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { EmailNotValidError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { OK, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { API, atomWithRetryableQuery, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
async function verificaIndirizzoEmail(payload) {
  if (areCheckBypassed()) {
    return OK;
  }
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/verificaIndirizzoEmail`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      email: payload.email,
      logHash,
      idLead: payload.idLead,
      plicoCode: payload.plicoCode,
      codiceProposta: payload.plicoCode,
      salesProcess: payload.salesProcess
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  if (!data) {
    throw new EmailNotValidError(`${data}`, logHash, response);
  }
  return OK;
}
export const atomWithCheckEmail = ({
  email
}) => {
  return atomWithRetryableQuery(async (get) => {
    const contract = get(currentContractInfoAtom);
    const idLead = contract.idLead;
    const plicoCode = await contract.plicoCode;
    const salesProcess = await contract.salesProcess;
    return {
      queryKey: ["verificaIndirizzoEmail", email],
      queryFn: () => verificaIndirizzoEmail({
        idLead,
        plicoCode,
        salesProcess,
        email
      })
    };
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLDBCQUEwQjtBQUNuQyxTQUFTQyxJQUFJQyxxQ0FBcUM7QUFDbEQsU0FBU0MsK0JBQStCO0FBQ3hDLFNBQVNDLEtBQUtDLHdCQUF3QkMsMkJBQTJCO0FBQ2pFLFNBQVNDLHdCQUF3QjtBQUVqQyxlQUFlQyx1QkFBdUJDLFNBS2pCO0FBQ25CLE1BQUlGLGlCQUFpQixHQUFHO0FBQ3RCLFdBQU9OO0FBQUFBLEVBQ1Q7QUFFQSxRQUFNUyxVQUFVSixvQkFBb0I7QUFFcEMsUUFBTUssV0FBVyxNQUFNQyxNQUNyQixHQUFHUixHQUFHLGtEQUNOO0FBQUEsSUFDRVMsUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQLGdCQUFnQjtBQUFBLE1BQ2hCQyxRQUFRO0FBQUEsSUFDVjtBQUFBLElBQ0FDLE1BQU1DLEtBQUtDLFVBQVU7QUFBQSxNQUNuQkMsT0FBT1YsUUFBUVU7QUFBQUEsTUFDZlQ7QUFBQUEsTUFDQVUsUUFBUVgsUUFBUVc7QUFBQUEsTUFDaEJDLFdBQVdaLFFBQVFZO0FBQUFBLE1BQ25CQyxnQkFBZ0JiLFFBQVFZO0FBQUFBLE1BQ3hCRSxjQUFjZCxRQUFRYztBQUFBQSxJQUN4QixDQUFDO0FBQUEsRUFDSCxDQUNGO0FBRUEsTUFBSVosU0FBU2EsV0FBVyxLQUFLO0FBQzNCLFVBQU0sSUFBSXRCLDhCQUE4QlMsU0FBU2MsWUFBWWYsT0FBTztBQUFBLEVBQ3RFO0FBRUEsUUFBTWdCLE9BQVEsTUFBTWYsU0FBU2dCLEtBQUs7QUFDbEMsTUFBSSxDQUFDRCxNQUFNO0FBQ1QsVUFBTSxJQUFJMUIsbUJBQW1CLEdBQUcwQixJQUFJLElBQUloQixTQUFTQyxRQUFRO0FBQUEsRUFDM0Q7QUFFQSxTQUFPVjtBQUNUO0FBRU8sYUFBTTJCLHFCQUFxQkEsQ0FBQztBQUFBLEVBQUVUO0FBQXlCLE1BQU07QUFDbEUsU0FBT2QsdUJBQXVCLE9BQU93QixRQUFRO0FBQzNDLFVBQU1DLFdBQVdELElBQUkxQix1QkFBdUI7QUFDNUMsVUFBTWlCLFNBQVNVLFNBQVNWO0FBQ3hCLFVBQU1DLFlBQVksTUFBTVMsU0FBU1Q7QUFDakMsVUFBTUUsZUFBZSxNQUFNTyxTQUFTUDtBQUVwQyxXQUFPO0FBQUEsTUFDTFEsVUFBVSxDQUFDLDBCQUEwQlosS0FBSztBQUFBLE1BQzFDYSxTQUFTQSxNQUNQeEIsdUJBQXVCO0FBQUEsUUFDckJZO0FBQUFBLFFBQ0FDO0FBQUFBLFFBQ0FFO0FBQUFBLFFBQ0FKO0FBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNGLENBQUM7QUFDSCIsIm5hbWVzIjpbIkVtYWlsTm90VmFsaWRFcnJvciIsIk9LIiwiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJjdXJyZW50Q29udHJhY3RJbmZvQXRvbSIsIkFQSSIsImF0b21XaXRoUmV0cnlhYmxlUXVlcnkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiYXJlQ2hlY2tCeXBhc3NlZCIsInZlcmlmaWNhSW5kaXJpenpvRW1haWwiLCJwYXlsb2FkIiwibG9nSGFzaCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbWFpbCIsImlkTGVhZCIsInBsaWNvQ29kZSIsImNvZGljZVByb3Bvc3RhIiwic2FsZXNQcm9jZXNzIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiYXRvbVdpdGhDaGVja0VtYWlsIiwiZ2V0IiwiY29udHJhY3QiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsidmVyaWZpY2FJbmRpcml6em9FbWFpbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbWFpbE5vdFZhbGlkRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xyXG5pbXBvcnQgeyBPSywgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBjdXJyZW50Q29udHJhY3RJbmZvQXRvbSB9IGZyb20gJy4uLy4uL2F0b21zL2N1cnJlbnQtY29udHJhY3QtaW5mby1hdG9tcyc7XHJcbmltcG9ydCB7IEFQSSwgYXRvbVdpdGhSZXRyeWFibGVRdWVyeSwgZ2VuZXJhdGVPcGVyYXRpb25JRCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgYXJlQ2hlY2tCeXBhc3NlZCB9IGZyb20gJy4uLy4uL3V0aWxzL2ZsYWdzJztcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHZlcmlmaWNhSW5kaXJpenpvRW1haWwocGF5bG9hZDoge1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgaWRMZWFkPzogc3RyaW5nO1xyXG4gIHBsaWNvQ29kZT86IHN0cmluZztcclxuICBzYWxlc1Byb2Nlc3M/OiBzdHJpbmc7XHJcbn0pOiBQcm9taXNlPHVua25vd24+IHtcclxuICBpZiAoYXJlQ2hlY2tCeXBhc3NlZCgpKSB7XHJcbiAgICByZXR1cm4gT0s7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG5cclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYCR7QVBJfS93ZWJPcmRlckNvbW1vblNlcnZpY2VzL3ZlcmlmaWNhSW5kaXJpenpvRW1haWxgLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBlbWFpbDogcGF5bG9hZC5lbWFpbCxcclxuICAgICAgICBsb2dIYXNoOiBsb2dIYXNoLFxyXG4gICAgICAgIGlkTGVhZDogcGF5bG9hZC5pZExlYWQsXHJcbiAgICAgICAgcGxpY29Db2RlOiBwYXlsb2FkLnBsaWNvQ29kZSxcclxuICAgICAgICBjb2RpY2VQcm9wb3N0YTogcGF5bG9hZC5wbGljb0NvZGUsXHJcbiAgICAgICAgc2FsZXNQcm9jZXNzOiBwYXlsb2FkLnNhbGVzUHJvY2VzcyxcclxuICAgICAgfSksXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICB0aHJvdyBuZXcgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgbG9nSGFzaCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBkYXRhID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgYm9vbGVhbjtcclxuICBpZiAoIWRhdGEpIHtcclxuICAgIHRocm93IG5ldyBFbWFpbE5vdFZhbGlkRXJyb3IoYCR7ZGF0YX1gLCBsb2dIYXNoLCByZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gT0s7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhdG9tV2l0aENoZWNrRW1haWwgPSAoeyBlbWFpbCB9OiB7IGVtYWlsOiBzdHJpbmcgfSkgPT4ge1xyXG4gIHJldHVybiBhdG9tV2l0aFJldHJ5YWJsZVF1ZXJ5KGFzeW5jIChnZXQpID0+IHtcclxuICAgIGNvbnN0IGNvbnRyYWN0ID0gZ2V0KGN1cnJlbnRDb250cmFjdEluZm9BdG9tKTtcclxuICAgIGNvbnN0IGlkTGVhZCA9IGNvbnRyYWN0LmlkTGVhZDtcclxuICAgIGNvbnN0IHBsaWNvQ29kZSA9IGF3YWl0IGNvbnRyYWN0LnBsaWNvQ29kZTtcclxuICAgIGNvbnN0IHNhbGVzUHJvY2VzcyA9IGF3YWl0IGNvbnRyYWN0LnNhbGVzUHJvY2VzcztcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBxdWVyeUtleTogWyd2ZXJpZmljYUluZGlyaXp6b0VtYWlsJywgZW1haWxdLFxyXG4gICAgICBxdWVyeUZuOiAoKSA9PlxyXG4gICAgICAgIHZlcmlmaWNhSW5kaXJpenpvRW1haWwoe1xyXG4gICAgICAgICAgaWRMZWFkLFxyXG4gICAgICAgICAgcGxpY29Db2RlLFxyXG4gICAgICAgICAgc2FsZXNQcm9jZXNzLFxyXG4gICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgIH0pLFxyXG4gICAgfTtcclxuICB9KTtcclxufTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2FwaS93ZWJvcmRlci92ZXJpZmljYUluZGlyaXp6b0VtYWlsLnRzIn0=