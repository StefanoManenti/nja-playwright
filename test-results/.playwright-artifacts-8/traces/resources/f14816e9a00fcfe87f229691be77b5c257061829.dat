globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithSuspenseQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai-tanstack-query.js?v=0189a8d1";
import { unwrap } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { API } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { workingOnPanelAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
export const refetchInfoUtenteAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/refetchInfoUtenteAtom", atom(0));
refetchInfoUtenteAtom.debugLabel = "refetchInfoUtenteAtom";
export const infoUtenteAtom = atomWithSuspenseQuery((get) => ({
  queryKey: ["user", get(refetchInfoUtenteAtom)],
  queryFn: async ({
    queryKey: [, id]
  }) => {
    const response = await fetch(`${API}/webOrderCommonServices/infoUtente`, {
      method: "GET",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      }
    });
    if (response.status === 204) return "NON_LOGGATO";
    if (response.status === 200) {
      try {
        return await response.json();
      } catch (error) {
        return "SERVICE-ERROR";
      }
    }
    return "UNKNOWN";
  }
}));
export const forceLoginAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/forceLoginAtom", atom(false));
forceLoginAtom.debugLabel = "forceLoginAtom";
export const isLoggedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/isLoggedAtom", atom(async (get) => {
  if (get(forceLoginAtom)) {
    console.log("forceLoginAtom");
    return false;
  }
  const infoUtente = await get(infoUtenteAtom);
  return infoUtente.data !== "NON_LOGGATO";
}));
isLoggedAtom.debugLabel = "isLoggedAtom";
export const isLoggedAtomUnwrapped = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/isLoggedAtomUnwrapped", unwrap(isLoggedAtom));
isLoggedAtomUnwrapped.debugLabel = "isLoggedAtomUnwrapped";
export const customerCodeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/customerCodeAtom", atom(async (get) => {
  const {
    data
  } = await get(infoUtenteAtom);
  if (typeof data === "object") {
    return data.userId;
  }
}));
customerCodeAtom.debugLabel = "customerCodeAtom";
const atomFromLoggedUser = (key) => atom(async (get) => {
  const {
    data
  } = await get(infoUtenteAtom);
  if (typeof data === "object") {
    return data[key];
  }
});
export const loggedUserGivenNameAtom = atomFromLoggedUser("nome");
export const loggedUserFamilyNameAtom = atomFromLoggedUser("cognomeRagSoc");
export const loggedUserEmailAtom = atomFromLoggedUser("emailRecapito");
export const loggedUserLoyaltyAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/loggedUserLoyaltyAtom", atom(async (get) => {
  const {
    data
  } = await get(infoUtenteAtom);
  if (typeof data === "object") {
    return data.loyaltyStatusRegistration === "100000000";
  }
}));
loggedUserLoyaltyAtom.debugLabel = "loggedUserLoyaltyAtom";
export const mustBeLogged$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/mustBeLogged$", atom((get) => {
  return get(workingOnPanelAtom) || get(operativeModeAtom) === OperativeMode.CHANGE_OFFER;
}));
mustBeLogged$.debugLabel = "mustBeLogged$";
export const useLoggedCustomer$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\customer\\get-info-utente.ts/useLoggedCustomer$", atom(true));
useLoggedCustomer$.debugLabel = "useLoggedCustomer$";

//# sourceMappingURL=data:application/json;base64,