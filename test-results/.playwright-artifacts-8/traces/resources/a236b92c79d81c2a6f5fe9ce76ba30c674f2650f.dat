import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const Fragment = __vite__cjsImport3_react["Fragment"];
export function MarkdownParser({
  content,
  component: Component = Fragment,
  renderBold = (key, s) => /* @__PURE__ */ jsxDEV("b", { children: s }, key, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx",
    lineNumber: 17,
    columnNumber: 28
  }, this),
  renderLink = (key, s, href) => /* @__PURE__ */ jsxDEV("a", { href, children: s }, key, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx",
    lineNumber: 19,
    columnNumber: 3
  }, this)
}) {
  const parseMarkdown = (text) => {
    const boldRegex = /\*\*(.*?)\*\*/g;
    const linkRegex = /\[(.*?)\]\((.*?)\)/g;
    const elements = [];
    let remainingText = text;
    while (remainingText) {
      boldRegex.lastIndex = 0;
      linkRegex.lastIndex = 0;
      const boldMatch = boldRegex.exec(remainingText);
      const linkMatch = linkRegex.exec(remainingText);
      const firstMatch = boldMatch && (!linkMatch || boldMatch.index < linkMatch.index) ? boldMatch : linkMatch;
      if (firstMatch) {
        const matchIndex = firstMatch.index;
        const matchLength = firstMatch[0].length;
        if (matchIndex > 0) {
          elements.push(remainingText.slice(0, matchIndex));
        }
        if (firstMatch === boldMatch) {
          elements.push(renderBold(elements.length, firstMatch[1]));
        } else if (firstMatch === linkMatch) {
          elements.push(
            renderLink(elements.length, firstMatch[1], firstMatch[2])
          );
        }
        remainingText = remainingText.slice(matchIndex + matchLength);
      } else {
        elements.push(remainingText);
        break;
      }
    }
    return elements;
  };
  return /* @__PURE__ */ jsxDEV(Component, { children: parseMarkdown(content) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx",
    lineNumber: 77,
    columnNumber: 10
  }, this);
}
_c = MarkdownParser;
var _c;
$RefreshReg$(_c, "MarkdownParser");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/MarkdownParser.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IkFBZ0IyQjs7Ozs7Z0JBaEIzQixPQUFPQSxDQUFLLGFBQUlDO0FBQVcsTUFBRUMsUUFBVUMsMENBQTZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWE3RCxnQkFBU0MsZUFBZTtBQUFBLEVBQzdCQztBQUFBQSxFQUNBQyxXQUFXQyxZQUFZTDtBQUFBQSxFQUN2Qk0sYUFBYUEsQ0FBQ0MsS0FBS0MsTUFBTSx1QkFBQyxPQUFhQSxlQUFORCxLQUFSO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBZ0I7QUFBQSxFQUN6Q0UsYUFBYUEsQ0FBQ0YsS0FBS0MsR0FBR0UsU0FDcEIsdUJBQUMsT0FBWSxNQUNWRixlQURLRCxLQUFSO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FFQTtBQUVpQixHQUFHO0FBQ3RCLFFBQU1JLGdCQUFnQkEsQ0FBQ0MsU0FBNEI7QUFFakQsVUFBTUMsWUFBWTtBQUNsQixVQUFNQyxZQUFZO0FBRWxCLFVBQU1DLFdBQXdCO0FBQzlCLFFBQUlDLGdCQUFnQko7QUFFcEIsV0FBT0ksZUFBZTtBQUNwQkgsZ0JBQVVJLFlBQVk7QUFDdEJILGdCQUFVRyxZQUFZO0FBRXRCLFlBQU1DLFlBQVlMLFVBQVVNLEtBQUtILGFBQWE7QUFFOUMsWUFBTUksWUFBWU4sVUFBVUssS0FBS0gsYUFBYTtBQUc5QyxZQUFNSyxhQUNKSCxjQUFjLENBQUNFLGFBQWFGLFVBQVVJLFFBQVFGLFVBQVVFLFNBQ3BESixZQUNBRTtBQUVOLFVBQUlDLFlBQVk7QUFDZCxjQUFNRSxhQUFhRixXQUFXQztBQUM5QixjQUFNRSxjQUFjSCxXQUFXLENBQUMsRUFBRUk7QUFHbEMsWUFBSUYsYUFBYSxHQUFHO0FBQ2xCUixtQkFBU1csS0FBS1YsY0FBY1csTUFBTSxHQUFHSixVQUFVLENBQUM7QUFBQSxRQUNsRDtBQUVBLFlBQUlGLGVBQWVILFdBQVc7QUFFNUJILG1CQUFTVyxLQUFLcEIsV0FBV1MsU0FBU1UsUUFBUUosV0FBVyxDQUFDLENBQUUsQ0FBQztBQUFBLFFBQzNELFdBQVdBLGVBQWVELFdBQVc7QUFFbkNMLG1CQUFTVztBQUFBQSxZQUNQakIsV0FBV00sU0FBU1UsUUFBUUosV0FBVyxDQUFDLEdBQUlBLFdBQVcsQ0FBQyxDQUFFO0FBQUEsVUFDNUQ7QUFBQSxRQUNGO0FBR0FMLHdCQUFnQkEsY0FBY1csTUFBTUosYUFBYUMsV0FBVztBQUFBLE1BQzlELE9BQU87QUFFTFQsaUJBQVNXLEtBQUtWLGFBQWE7QUFDM0I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFdBQU9EO0FBQUFBLEVBQ1Q7QUFFQSxTQUFPLHVCQUFDLGFBQVdKLHdCQUFjUixPQUFPLEtBQWpDO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBbUM7QUFDNUM7QUFBQ3lCLEtBaEVlMUI7QUFBYyxJQUFBMEI7QUFBQUMsYUFBQUQsSUFBQSIsIm5hbWVzIjpbIlJlYWN0IiwiRWxlbWVudFR5cGUiLCJGcmFnbWVudCIsIktleSIsIk1hcmtkb3duUGFyc2VyIiwiY29udGVudCIsImNvbXBvbmVudCIsIkNvbXBvbmVudCIsInJlbmRlckJvbGQiLCJrZXkiLCJzIiwicmVuZGVyTGluayIsImhyZWYiLCJwYXJzZU1hcmtkb3duIiwidGV4dCIsImJvbGRSZWdleCIsImxpbmtSZWdleCIsImVsZW1lbnRzIiwicmVtYWluaW5nVGV4dCIsImxhc3RJbmRleCIsImJvbGRNYXRjaCIsImV4ZWMiLCJsaW5rTWF0Y2giLCJmaXJzdE1hdGNoIiwiaW5kZXgiLCJtYXRjaEluZGV4IiwibWF0Y2hMZW5ndGgiLCJsZW5ndGgiLCJwdXNoIiwic2xpY2UiLCJfYyIsIiRSZWZyZXNoUmVnJCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJNYXJrZG93blBhcnNlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEVsZW1lbnRUeXBlLCBGcmFnbWVudCwgS2V5LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgTWFya2Rvd25QYXJzZXJQcm9wcyB7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIGNvbXBvbmVudD86IEVsZW1lbnRUeXBlO1xyXG4gIHJlbmRlckJvbGQ/OiAoa2V5OiBLZXksIHM6IHN0cmluZykgPT4gUmVhY3ROb2RlO1xyXG4gIHJlbmRlckxpbms/OiAoa2V5OiBLZXksIHM6IHN0cmluZywgaHJlZjogc3RyaW5nKSA9PiBSZWFjdE5vZGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIGEgc3Vic2V0IG9mIE1hcmtkb3duLlxyXG4gKiBXcml0dGVuIHdpdGggQ29waWxvdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBNYXJrZG93blBhcnNlcih7XHJcbiAgY29udGVudCxcclxuICBjb21wb25lbnQ6IENvbXBvbmVudCA9IEZyYWdtZW50LFxyXG4gIHJlbmRlckJvbGQgPSAoa2V5LCBzKSA9PiA8YiBrZXk9e2tleX0+e3N9PC9iPixcclxuICByZW5kZXJMaW5rID0gKGtleSwgcywgaHJlZikgPT4gKFxyXG4gICAgPGEga2V5PXtrZXl9IGhyZWY9e2hyZWZ9PlxyXG4gICAgICB7c31cclxuICAgIDwvYT5cclxuICApLFxyXG59OiBNYXJrZG93blBhcnNlclByb3BzKSB7XHJcbiAgY29uc3QgcGFyc2VNYXJrZG93biA9ICh0ZXh0OiBzdHJpbmcpOiBSZWFjdE5vZGUgPT4ge1xyXG4gICAgLy8gUmVndWxhciBleHByZXNzaW9ucyBmb3IgYm9sZCBhbmQgbGluayBtYXJrZG93blxyXG4gICAgY29uc3QgYm9sZFJlZ2V4ID0gL1xcKlxcKiguKj8pXFwqXFwqL2c7XHJcbiAgICBjb25zdCBsaW5rUmVnZXggPSAvXFxbKC4qPylcXF1cXCgoLio/KVxcKS9nO1xyXG5cclxuICAgIGNvbnN0IGVsZW1lbnRzOiBSZWFjdE5vZGVbXSA9IFtdO1xyXG4gICAgbGV0IHJlbWFpbmluZ1RleHQgPSB0ZXh0O1xyXG5cclxuICAgIHdoaWxlIChyZW1haW5pbmdUZXh0KSB7XHJcbiAgICAgIGJvbGRSZWdleC5sYXN0SW5kZXggPSAwO1xyXG4gICAgICBsaW5rUmVnZXgubGFzdEluZGV4ID0gMDtcclxuICAgICAgLy8gTWF0Y2ggYm9sZFxyXG4gICAgICBjb25zdCBib2xkTWF0Y2ggPSBib2xkUmVnZXguZXhlYyhyZW1haW5pbmdUZXh0KTtcclxuICAgICAgLy8gTWF0Y2ggbGlua1xyXG4gICAgICBjb25zdCBsaW5rTWF0Y2ggPSBsaW5rUmVnZXguZXhlYyhyZW1haW5pbmdUZXh0KTtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSB0aGUgZmlyc3QgbWF0Y2hcclxuICAgICAgY29uc3QgZmlyc3RNYXRjaCA9XHJcbiAgICAgICAgYm9sZE1hdGNoICYmICghbGlua01hdGNoIHx8IGJvbGRNYXRjaC5pbmRleCA8IGxpbmtNYXRjaC5pbmRleClcclxuICAgICAgICAgID8gYm9sZE1hdGNoXHJcbiAgICAgICAgICA6IGxpbmtNYXRjaDtcclxuXHJcbiAgICAgIGlmIChmaXJzdE1hdGNoKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IGZpcnN0TWF0Y2guaW5kZXg7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hMZW5ndGggPSBmaXJzdE1hdGNoWzBdLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gUHVzaCBwbGFpbiB0ZXh0IGJlZm9yZSB0aGUgbWF0Y2hcclxuICAgICAgICBpZiAobWF0Y2hJbmRleCA+IDApIHtcclxuICAgICAgICAgIGVsZW1lbnRzLnB1c2gocmVtYWluaW5nVGV4dC5zbGljZSgwLCBtYXRjaEluZGV4KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlyc3RNYXRjaCA9PT0gYm9sZE1hdGNoKSB7XHJcbiAgICAgICAgICAvLyBQdXNoIGJvbGQgZWxlbWVudFxyXG4gICAgICAgICAgZWxlbWVudHMucHVzaChyZW5kZXJCb2xkKGVsZW1lbnRzLmxlbmd0aCwgZmlyc3RNYXRjaFsxXSEpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZpcnN0TWF0Y2ggPT09IGxpbmtNYXRjaCkge1xyXG4gICAgICAgICAgLy8gUHVzaCBsaW5rIGVsZW1lbnRcclxuICAgICAgICAgIGVsZW1lbnRzLnB1c2goXHJcbiAgICAgICAgICAgIHJlbmRlckxpbmsoZWxlbWVudHMubGVuZ3RoLCBmaXJzdE1hdGNoWzFdISwgZmlyc3RNYXRjaFsyXSEpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTW92ZSByZW1haW5pbmcgdGV4dCBmb3J3YXJkXHJcbiAgICAgICAgcmVtYWluaW5nVGV4dCA9IHJlbWFpbmluZ1RleHQuc2xpY2UobWF0Y2hJbmRleCArIG1hdGNoTGVuZ3RoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyBtb3JlIG1hdGNoZXMsIHB1c2ggdGhlIHJlc3QgYXMgcGxhaW4gdGV4dFxyXG4gICAgICAgIGVsZW1lbnRzLnB1c2gocmVtYWluaW5nVGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWxlbWVudHM7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIDxDb21wb25lbnQ+e3BhcnNlTWFya2Rvd24oY29udGVudCl9PC9Db21wb25lbnQ+O1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvdXRpbC9zcmMvbGliL01hcmtkb3duUGFyc2VyLnRzeCJ9