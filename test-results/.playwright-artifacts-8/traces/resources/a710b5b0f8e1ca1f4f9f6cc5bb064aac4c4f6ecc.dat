import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  egonToString,
  useSuggestStreet
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Autocomplete } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/index.ts";
import { Pin1Icon } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-icons/src/index.ts";
import __vite__cjsImport6_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useState = __vite__cjsImport6_react["useState"];
export const ERROR_TYPE_NO_NUMBER = "NUMBER_REQUIRED";
const ERROR_MSG_NO_NUMBER = /* @__PURE__ */ jsxDEV("span", { children: [
  "Inserisci anche il ",
  /* @__PURE__ */ jsxDEV("b", { children: "numero civico" }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx",
    lineNumber: 17,
    columnNumber: 24
  }, this),
  ". Se la tua abitazione non ha numero civico, inserisci l’indirizzo seguito da snc."
] }, void 0, true, {
  fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx",
  lineNumber: 16,
  columnNumber: 1
}, this);
const HELPER_MSG = "Se la tua abitazione non ha numero civico, inserisci l’indirizzo seguito da snc.";
const errorsTexts = {
  [ERROR_TYPE_NO_NUMBER]: ERROR_MSG_NO_NUMBER
};
export const AddressInput = function AddressInput2({
  name,
  label,
  myRef,
  error,
  disabled,
  icon = true,
  ...field
}) {
  _s();
  const [{ data }, setSearchText] = useSuggestStreet();
  const [value, setValue] = useState(field.value || null);
  return /* @__PURE__ */ jsxDEV(
    Autocomplete,
    {
      inputRef: myRef,
      id: name,
      value,
      onChange: (_event, newValue) => {
        setValue(newValue);
        field.onChange(newValue);
      },
      options: Array.isArray(data) ? data : [],
      componentName: "AddressInput",
      onInputChange: (_event, _value, _reason) => {
        switch (_reason) {
          case "input":
            if (_value) setSearchText(_value);
            break;
        }
      },
      isOptionEqualToValue: (option, value2) => option.id === value2.id && option.number === value2.number && option.exponent === value2.exponent,
      filterOptions: (options) => options,
      getOptionKey: (option) => option.id,
      getOptionLabel: (option) => egonToString(option),
      InputProps: {
        placeholder: disabled ? "" : "Inserisci indirizzo",
        startAdornment: icon && /* @__PURE__ */ jsxDEV(Pin1Icon, {}, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx",
          lineNumber: 90,
          columnNumber: 33
        }, this),
        error: !!error,
        helperText: error?.message === ERROR_TYPE_NO_NUMBER ? ERROR_MSG_NO_NUMBER : error?.message ?? (!disabled && HELPER_MSG),
        label
      },
      renderOption: renderEgonValueOption,
      disabled
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx",
      lineNumber: 63,
      columnNumber: 5
    },
    this
  );
};
_s(AddressInput, "jv/hafZFinVKduf/9v4utRq0EeM=", false, function() {
  return [useSuggestStreet];
});
_c = AddressInput;
function renderEgonValueOption(option) {
  return /* @__PURE__ */ jsxDEV("div", { children: egonToString(option) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx",
    lineNumber: 105,
    columnNumber: 10
  }, this);
}
AddressInput.rules = {
  required: "Campo obbligatorio",
  validate: (value) => {
    if (value?.number == null) {
      return ERROR_TYPE_NO_NUMBER;
    }
  }
};
var _c;
$RefreshReg$(_c, "AddressInput");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressInput.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,