globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
export class EgonAddress {
  constructor(data) {
    this.iso3 = data.iso3;
    this.istatCode = data.istatCode;
    this.streetToponym = data.streetToponym;
    this.streetName = data.streetName;
    this.number = data.number;
    this.exponent = data.exponent;
    this.city = data.city;
    this.zipcode = data.zipcode;
    this.extendedProvince = data.extendedProvince;
    this.province = data.province;
    this.country = data.country;
    this.region = data.region;
    this.egonCodeStreet = data.egonCodeStreet;
    this.egonCodeNumber = data.egonCodeNumber;
  }
  get numberComplete() {
    return `${this.number}${this.exponent}`;
  }
  static fromNormalizeAddressService(data) {
    const inr620 = data["INR_620"];
    return new EgonAddress({
      iso3: inr620["CDXISO"] || inr620["DSXPLCSIG"]["DSXCNY"],
      istatCode: inr620["CDXSTAPLCOBJ"]["CDXCNL"],
      streetToponym: inr620["DSXSTRUFF"]["DSXST1"]["DSXDUG"] || inr620["INRCND"][0]["ST1CND"].split(" ")[0],
      streetName: inr620["DSXSTRUFF"]["DSXST1"]["DSXVIA"],
      number: inr620["CIVICOST1"]["NRPNUMCIV"]["lValue"] || "",
      exponent: inr620["CIVICOST1"]["DSXESP"],
      city: inr620["DSXPLCUFF"]["DSXCNL"],
      zipcode: inr620["CDXZIP"],
      extendedProvince: inr620["DSXPLCUFF"]["DSXDPT"],
      province: inr620["DSXPLCSIG"]["DSXDPT"],
      country: inr620["DSXPLCUFF"]["DSXCNY"],
      region: inr620["DSXPLCUFF"]["DSXREG"],
      egonCodeStreet: inr620["CDPSTRST1"]["CDPSTR"]["lValue"],
      egonCodeNumber: inr620["CIVICOST1"]["CDPOBJCIV"]["lValue"]
    });
  }
  asLeadFormat(opts = {}) {
    if (opts.fallbackIfForeign && this.iso3 === EgonAddress.FOREIGN_ISO3) {
      return {
        ...opts.fallbackIfForeign.asLeadFormat(),
        foreignAddress: true
      };
    }
    return {
      toponymy: this.streetToponym,
      address: this.streetName,
      houseNumber: this.numberComplete,
      city: this.city,
      province: this.province,
      zipCode: this.zipcode,
      istatCode: this.istatCode,
      streetCode: this.egonCodeStreet,
      civicEgonCode: this.egonCodeNumber,
      extendedProvince: this.extendedProvince,
      country: this.country,
      region: this.region,
      foreignAddress: this.iso3 === EgonAddress.FOREIGN_ISO3
    };
  }
  static fromLeadFormat(data) {
    if (data == null) {
      return;
    }
    if (data.foreignAddress) {
      return EgonAddress.fromForeign();
    }
    let number = "", exponent = "";
    const houseNumberMatch = data.houseNumber?.match(/([\d+]*)([A-Za-z]*)/);
    if (houseNumberMatch) {
      number = houseNumberMatch[1] ?? "";
      exponent = houseNumberMatch[2] ?? "";
    } else {
      number = data.houseNumber;
    }
    return new EgonAddress({
      iso3: this.ITA_ISO3,
      streetToponym: data.toponymy,
      streetName: data.address,
      number,
      exponent,
      city: data.city,
      province: data.province,
      zipcode: data.zipCode,
      istatCode: data.istatCode,
      egonCodeStreet: data.streetCode,
      egonCodeNumber: data.civicEgonCode,
      extendedProvince: data.extendedProvince,
      country: data.country,
      region: data.region
    });
  }
  static fromCheckD365Format(data) {
    return new EgonAddress({
      // @ts-expect-error no map
      iso3: null,
      streetToponym: data.toponomastica,
      streetName: data.via,
      number: data.civico,
      exponent: "",
      city: data.comune,
      province: data.prov,
      zipcode: data.cap,
      istatCode: data.codiceIstatComune,
      egonCodeStreet: data.codiceEgon,
      egonCodeNumber: data.codiceEgon,
      // @ts-expect-error no map
      extendedProvince: null,
      // @ts-expect-error no map
      country: null,
      // @ts-expect-error no map
      region: null
    });
  }
  static {
    this.ITA_ISO3 = "ITA";
  }
  static {
    // XXX is used to represent a person of unspecified nationality.
    this.FOREIGN_ISO3 = "XXX";
  }
  static fromForeign() {
    return new EgonAddress({
      city: "",
      country: "",
      egonCodeNumber: 0,
      egonCodeStreet: 0,
      exponent: "",
      extendedProvince: "",
      istatCode: "",
      number: "",
      province: "",
      region: "",
      streetName: "",
      streetToponym: "",
      zipcode: "",
      iso3: this.FOREIGN_ISO3
    });
  }
  asSuggestion() {
    return {
      id: this.egonCodeStreet,
      iso3: this.iso3,
      level: "",
      country: this.country,
      exponent: this.exponent,
      number: this.number,
      region: this.region,
      province: this.province,
      city: this.city,
      zipcode: this.zipcode,
      street: `${this.streetToponym} ${this.streetName}`
    };
  }
  toString() {
    if (this.iso3 === EgonAddress.FOREIGN_ISO3) {
      return "Estero";
    }
    return egonToString(this.asSuggestion());
  }
}
export function egonToString({
  city = "",
  street = "",
  zipcode = "",
  exponent = "",
  province = "",
  number = ""
}) {
  return [street, [number, exponent].filter(Boolean).join(""), [zipcode, city, province].filter(Boolean).join(" ")].filter(Boolean).join(", ");
}

//# sourceMappingURL=data:application/json;base64,