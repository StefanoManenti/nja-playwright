globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import __vite__cjsImport0_lodash_invert from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/lodash_invert.js?v=0189a8d1"; const invert = __vite__cjsImport0_lodash_invert.__esModule ? __vite__cjsImport0_lodash_invert.default : __vite__cjsImport0_lodash_invert;
export class StringMapper {
  constructor(fromFToB) {
    this.fromFToB = fromFToB;
    this.fromBToF = invert(fromFToB);
  }
  toBackend(key, ifNotFound) {
    if (arguments.length < 2 && !this.fromFToB.hasOwnProperty(key)) {
      throw Error(`[MAPPER] key ${JSON.stringify(key)} not found!`);
    }
    return this.fromFToB[key] ?? ifNotFound;
  }
  toFrontend(key, ifNotFound) {
    if (arguments.length < 2 && !this.fromBToF.hasOwnProperty(key)) {
      throw Error(`[MAPPER] key ${JSON.stringify(key)} not found!`);
    }
    return this.fromBToF[key] ?? ifNotFound;
  }
}
export class GenericMapper {
  constructor(mappers) {
    this.mappers = mappers;
  }
  toBackend(key, ifNotFound) {
    const result = this.mappers.toBackend(key);
    if (arguments.length < 2 && result == null) {
      throw Error(`[MAPPER] key ${JSON.stringify(key)} not found!`);
    }
    return result ?? ifNotFound;
  }
  toFrontend(key, ifNotFound) {
    const result = this.mappers.toFrontend(key);
    if (arguments.length < 2 && result == null) {
      throw Error(`[MAPPER] key ${JSON.stringify(key)} not found!`);
    }
    return result ?? ifNotFound;
  }
}
export class EnumToBooleanMapper extends GenericMapper {
  constructor(values) {
    super({
      // @ts-expect-error should be safe
      toBackend: (f) => !f ? null : f === values.true,
      toFrontend: (b) => b == null ? "" : b ? values.true : values.false
    });
    this.values = values;
  }
}
export const yesNoMapper = new EnumToBooleanMapper({
  true: "yes",
  false: "no"
});
function BooleanToEnumMapper(trueValue, falseValue, nullValue) {
  return new GenericMapper({
    toBackend: (f) => f == null ? nullValue : f ? trueValue : falseValue,
    // @ts-expect-error should be safe
    toFrontend: (b) => !b ? null : b === trueValue
  });
}
export class EnumMapper {
  constructor(fromFToB, nullF, nullB) {
    this.nullF = nullF;
    this.nullB = nullB;
    this.fromBToF = /* @__PURE__ */ new Map();
    this.fromFToB = /* @__PURE__ */ new Map();
    for (let [f, b] of fromFToB) {
      this.fromBToF.set(b, f);
      this.fromFToB.set(f, b);
    }
  }
  toBackend(key) {
    return this.fromFToB.get(key) ?? this.nullB;
  }
  toFrontend(key) {
    return this.fromBToF.get(key) ?? this.nullF;
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU9BLFlBQVk7QUFPWixhQUFNQyxhQUViO0FBQUEsRUFHRUMsWUFBNkJDLFVBQThCO0FBQTlCQTtBQUMzQixTQUFLQyxXQUFXSixPQUFPRyxRQUFRO0FBQUEsRUFDakM7QUFBQSxFQUVBRSxVQUF5QkMsS0FBUUMsWUFBdUI7QUFDdEQsUUFBSUMsVUFBVUMsU0FBUyxLQUFLLENBQUMsS0FBS04sU0FBU08sZUFBZUosR0FBRyxHQUFHO0FBQzlELFlBQU1LLE1BQU0sZ0JBQWdCQyxLQUFLQyxVQUFVUCxHQUFHLENBQUMsYUFBYTtBQUFBLElBQzlEO0FBQ0EsV0FBTyxLQUFLSCxTQUFTRyxHQUFHLEtBQUtDO0FBQUFBLEVBQy9CO0FBQUEsRUFDQU8sV0FBMEJSLEtBQVFDLFlBQXVCO0FBQ3ZELFFBQUlDLFVBQVVDLFNBQVMsS0FBSyxDQUFDLEtBQUtMLFNBQVNNLGVBQWVKLEdBQUcsR0FBRztBQUM5RCxZQUFNSyxNQUFNLGdCQUFnQkMsS0FBS0MsVUFBVVAsR0FBRyxDQUFDLGFBQWE7QUFBQSxJQUM5RDtBQUNBLFdBQU8sS0FBS0YsU0FBU0UsR0FBRyxLQUFLQztBQUFBQSxFQUMvQjtBQUNGO0FBRU8sYUFBTVEsY0FBNkM7QUFBQSxFQUN4RGIsWUFDbUJjLFNBSWpCO0FBSmlCQTtBQUFBQSxFQUloQjtBQUFBLEVBRUhYLFVBQXlCQyxLQUFRQyxZQUF1QjtBQUN0RCxVQUFNVSxTQUFTLEtBQUtELFFBQVFYLFVBQVVDLEdBQUc7QUFFekMsUUFBSUUsVUFBVUMsU0FBUyxLQUFLUSxVQUFVLE1BQU07QUFDMUMsWUFBTU4sTUFBTSxnQkFBZ0JDLEtBQUtDLFVBQVVQLEdBQUcsQ0FBQyxhQUFhO0FBQUEsSUFDOUQ7QUFHQSxXQUFPVyxVQUFVVjtBQUFBQSxFQUNuQjtBQUFBLEVBRUFPLFdBQTBCUixLQUFRQyxZQUF1QjtBQUN2RCxVQUFNVSxTQUFTLEtBQUtELFFBQVFGLFdBQVdSLEdBQUc7QUFFMUMsUUFBSUUsVUFBVUMsU0FBUyxLQUFLUSxVQUFVLE1BQU07QUFDMUMsWUFBTU4sTUFBTSxnQkFBZ0JDLEtBQUtDLFVBQVVQLEdBQUcsQ0FBQyxhQUFhO0FBQUEsSUFDOUQ7QUFHQSxXQUFPVyxVQUFVVjtBQUFBQSxFQUNuQjtBQUNGO0FBRU8sYUFBTVcsNEJBR0hILGNBQW1DO0FBQUEsRUFDM0NiLFlBQ1dpQixRQUlUO0FBQ0EsVUFBTTtBQUFBO0FBQUEsTUFFSmQsV0FBWWUsT0FBTyxDQUFDQSxJQUFJLE9BQU9BLE1BQU1ELE9BQU9FO0FBQUFBLE1BQzVDUCxZQUFhUSxPQUFPQSxLQUFLLE9BQU8sS0FBS0EsSUFBSUgsT0FBT0UsT0FBT0YsT0FBT0k7QUFBQUEsSUFDaEUsQ0FBQztBQVRRSjtBQUFBQSxFQVVYO0FBQ0Y7QUFFTyxhQUFNSyxjQUFjLElBQUlOLG9CQUFvQjtBQUFBLEVBQ2pERyxNQUFNO0FBQUEsRUFDTkUsT0FBTztBQUNULENBQUM7QUFFRCxTQUFTRSxvQkFBdUJDLFdBQWNDLFlBQWVDLFdBQWM7QUFDekUsU0FBTyxJQUFJYixjQUEwQjtBQUFBLElBQ25DVixXQUFZZSxPQUFPQSxLQUFLLE9BQU9RLFlBQVlSLElBQUlNLFlBQVlDO0FBQUFBO0FBQUFBLElBRTNEYixZQUFhUSxPQUFPLENBQUNBLElBQUksT0FBT0EsTUFBTUk7QUFBQUEsRUFDeEMsQ0FBQztBQUNIO0FBRU8sYUFBTUcsV0FBMEM7QUFBQSxFQUlyRDNCLFlBQ0VDLFVBQ2lCMkIsT0FDQUMsT0FDakI7QUFGaUJEO0FBQ0FDO0FBRWpCLFNBQUszQixXQUFXLG9CQUFJNEIsSUFBVTtBQUM5QixTQUFLN0IsV0FBVyxvQkFBSTZCLElBQVU7QUFDOUIsYUFBUyxDQUFDWixHQUFHRSxDQUFDLEtBQUtuQixVQUFVO0FBQzNCLFdBQUtDLFNBQVM2QixJQUFJWCxHQUFHRixDQUFDO0FBQ3RCLFdBQUtqQixTQUFTOEIsSUFBSWIsR0FBR0UsQ0FBQztBQUFBLElBQ3hCO0FBQUEsRUFDRjtBQUFBLEVBRUFqQixVQUFVQyxLQUFXO0FBQ25CLFdBQU8sS0FBS0gsU0FBUytCLElBQUk1QixHQUFHLEtBQUssS0FBS3lCO0FBQUFBLEVBQ3hDO0FBQUEsRUFDQWpCLFdBQVdSLEtBQVc7QUFDcEIsV0FBTyxLQUFLRixTQUFTOEIsSUFBSTVCLEdBQUcsS0FBSyxLQUFLd0I7QUFBQUEsRUFDeEM7QUFDRiIsIm5hbWVzIjpbImludmVydCIsIlN0cmluZ01hcHBlciIsImNvbnN0cnVjdG9yIiwiZnJvbUZUb0IiLCJmcm9tQlRvRiIsInRvQmFja2VuZCIsImtleSIsImlmTm90Rm91bmQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvRnJvbnRlbmQiLCJHZW5lcmljTWFwcGVyIiwibWFwcGVycyIsInJlc3VsdCIsIkVudW1Ub0Jvb2xlYW5NYXBwZXIiLCJ2YWx1ZXMiLCJmIiwidHJ1ZSIsImIiLCJmYWxzZSIsInllc05vTWFwcGVyIiwiQm9vbGVhblRvRW51bU1hcHBlciIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJudWxsVmFsdWUiLCJFbnVtTWFwcGVyIiwibnVsbEYiLCJudWxsQiIsIk1hcCIsInNldCIsImdldCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJNYXBwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGludmVydCBmcm9tICdsb2Rhc2gvaW52ZXJ0JztcclxuXHJcbmludGVyZmFjZSBJTWFwcGVyPEYsIEI+IHtcclxuICB0b0JhY2tlbmQ8TyA9IHVuZGVmaW5lZD4oa2V5OiBGLCBpZk5vdEZvdW5kPzogTyk6IEIgfCBPO1xyXG4gIHRvRnJvbnRlbmQ8TyA9IHVuZGVmaW5lZD4oa2V5OiBCLCBpZk5vdEZvdW5kPzogTyk6IEYgfCBPO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyaW5nTWFwcGVyPEYgZXh0ZW5kcyBzdHJpbmcsIEIgZXh0ZW5kcyBzdHJpbmc+XHJcbiAgaW1wbGVtZW50cyBJTWFwcGVyPEYsIEI+XHJcbntcclxuICBwcml2YXRlIHJlYWRvbmx5IGZyb21CVG9GOiB7IFtrZXkgaW4gQl0/OiBGIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZnJvbUZUb0I6IHsgW2tleSBpbiBGXT86IEIgfSkge1xyXG4gICAgdGhpcy5mcm9tQlRvRiA9IGludmVydChmcm9tRlRvQikgYXMgYW55O1xyXG4gIH1cclxuXHJcbiAgdG9CYWNrZW5kPE8gPSB1bmRlZmluZWQ+KGtleTogRiwgaWZOb3RGb3VuZD86IE8pOiBCIHwgTyB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgIXRoaXMuZnJvbUZUb0IuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICB0aHJvdyBFcnJvcihgW01BUFBFUl0ga2V5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gbm90IGZvdW5kIWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZnJvbUZUb0Jba2V5XSA/PyBpZk5vdEZvdW5kITtcclxuICB9XHJcbiAgdG9Gcm9udGVuZDxPID0gdW5kZWZpbmVkPihrZXk6IEIsIGlmTm90Rm91bmQ/OiBPKTogRiB8IE8ge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyICYmICF0aGlzLmZyb21CVG9GLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoYFtNQVBQRVJdIGtleSAke0pTT04uc3RyaW5naWZ5KGtleSl9IG5vdCBmb3VuZCFgKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmZyb21CVG9GW2tleV0gPz8gaWZOb3RGb3VuZCE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2VuZXJpY01hcHBlcjxGLCBCPiBpbXBsZW1lbnRzIElNYXBwZXI8RiwgQj4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXBwZXJzOiB7XHJcbiAgICAgIHRvQmFja2VuZDogKGY6IEYpID0+IEI7XHJcbiAgICAgIHRvRnJvbnRlbmQ6IChmOiBCKSA9PiBGO1xyXG4gICAgfVxyXG4gICkge31cclxuXHJcbiAgdG9CYWNrZW5kPE8gPSB1bmRlZmluZWQ+KGtleTogRiwgaWZOb3RGb3VuZD86IE8pOiBCIHwgTyB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLm1hcHBlcnMudG9CYWNrZW5kKGtleSk7XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyICYmIHJlc3VsdCA9PSBudWxsKSB7XHJcbiAgICAgIHRocm93IEVycm9yKGBbTUFQUEVSXSBrZXkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBub3QgZm91bmQhYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBzaG91bGQgYmUgc2FmZVxyXG4gICAgcmV0dXJuIHJlc3VsdCA/PyBpZk5vdEZvdW5kO1xyXG4gIH1cclxuXHJcbiAgdG9Gcm9udGVuZDxPID0gdW5kZWZpbmVkPihrZXk6IEIsIGlmTm90Rm91bmQ/OiBPKTogRiB8IE8ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5tYXBwZXJzLnRvRnJvbnRlbmQoa2V5KTtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgcmVzdWx0ID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoYFtNQVBQRVJdIGtleSAke0pTT04uc3RyaW5naWZ5KGtleSl9IG5vdCBmb3VuZCFgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHNob3VsZCBiZSBzYWZlXHJcbiAgICByZXR1cm4gcmVzdWx0ID8/IGlmTm90Rm91bmQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW51bVRvQm9vbGVhbk1hcHBlcjxcclxuICBZIGV4dGVuZHMgc3RyaW5nLFxyXG4gIE4gZXh0ZW5kcyBzdHJpbmdcclxuPiBleHRlbmRzIEdlbmVyaWNNYXBwZXI8JycgfCBZIHwgTiwgYm9vbGVhbj4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcmVhZG9ubHkgdmFsdWVzOiB7XHJcbiAgICAgIHJlYWRvbmx5IHRydWU6IFk7XHJcbiAgICAgIHJlYWRvbmx5IGZhbHNlOiBOO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHNob3VsZCBiZSBzYWZlXHJcbiAgICAgIHRvQmFja2VuZDogKGYpID0+ICghZiA/IG51bGwgOiBmID09PSB2YWx1ZXMudHJ1ZSksXHJcbiAgICAgIHRvRnJvbnRlbmQ6IChiKSA9PiAoYiA9PSBudWxsID8gJycgOiBiID8gdmFsdWVzLnRydWUgOiB2YWx1ZXMuZmFsc2UpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgeWVzTm9NYXBwZXIgPSBuZXcgRW51bVRvQm9vbGVhbk1hcHBlcih7XHJcbiAgdHJ1ZTogJ3llcycsXHJcbiAgZmFsc2U6ICdubycsXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gQm9vbGVhblRvRW51bU1hcHBlcjxCPih0cnVlVmFsdWU6IEIsIGZhbHNlVmFsdWU6IEIsIG51bGxWYWx1ZTogQikge1xyXG4gIHJldHVybiBuZXcgR2VuZXJpY01hcHBlcjxib29sZWFuLCBCPih7XHJcbiAgICB0b0JhY2tlbmQ6IChmKSA9PiAoZiA9PSBudWxsID8gbnVsbFZhbHVlIDogZiA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWUpLFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBzaG91bGQgYmUgc2FmZVxyXG4gICAgdG9Gcm9udGVuZDogKGIpID0+ICghYiA/IG51bGwgOiBiID09PSB0cnVlVmFsdWUpLFxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW51bU1hcHBlcjxGLCBCPiBpbXBsZW1lbnRzIElNYXBwZXI8RiwgQj4ge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZnJvbUJUb0Y6IE1hcDxCLCBGPjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGZyb21GVG9COiBNYXA8RiwgQj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZnJvbUZUb0I6IHJlYWRvbmx5IChyZWFkb25seSBbRiwgQl0pW10sXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG51bGxGOiBGLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBudWxsQjogQlxyXG4gICkge1xyXG4gICAgdGhpcy5mcm9tQlRvRiA9IG5ldyBNYXA8QiwgRj4oKTtcclxuICAgIHRoaXMuZnJvbUZUb0IgPSBuZXcgTWFwPEYsIEI+KCk7XHJcbiAgICBmb3IgKGxldCBbZiwgYl0gb2YgZnJvbUZUb0IpIHtcclxuICAgICAgdGhpcy5mcm9tQlRvRi5zZXQoYiwgZik7XHJcbiAgICAgIHRoaXMuZnJvbUZUb0Iuc2V0KGYsIGIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG9CYWNrZW5kKGtleTogRik6IEIge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJvbUZUb0IuZ2V0KGtleSkgPz8gdGhpcy5udWxsQiE7XHJcbiAgfVxyXG4gIHRvRnJvbnRlbmQoa2V5OiBCKTogRiB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm9tQlRvRi5nZXQoa2V5KSA/PyB0aGlzLm51bGxGITtcclxuICB9XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy91dGlsL3NyYy9saWIvTWFwcGVyLnRzIn0=