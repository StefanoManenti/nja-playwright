globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  powerAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class LocationMeterStep extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(98);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/location-meter/LocationMeterStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "LocationMeter";
  }
  depends() {
    return [];
  }
  provides() {
    return [StepDependencies.LOCATION_METER];
  }
  isInFlux(get) {
    if (get(powerAtom)) {
      return false;
    }
    const operativeMode = get(operativeModeAtom);
    if (operativeMode !== OperativeMode.NEW_ACTIVATION) {
      return false;
    }
    return get(operativeModeEnabled$);
  }
  toDo(get) {
    return false;
  }
}
export const locationMeter = new LocationMeterStep();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLDBCQUEwQkosS0FBSztBQUFBLEVBQXJDO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxFQUFFO0FBRTlCSyxnQkFBT0EsTUFBTSxPQUFPLHFCQUFxQjtBQUN6Q0MsNEJBQW1CTDtBQUFBQTtBQUFBQSxFQUVuQk0sV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsVUFBVTtBQUNSLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU8sQ0FBQ1AsaUJBQWlCUSxjQUFjO0FBQUEsRUFDekM7QUFBQSxFQUVVQyxTQUFTQyxLQUFhO0FBQzlCLFFBQUlBLElBQUlkLFNBQVMsR0FBRztBQUNsQixhQUFPO0FBQUEsSUFDVDtBQVNBLFVBQU1lLGdCQUFnQkQsSUFBSWhCLGlCQUFpQjtBQUMzQyxRQUFJaUIsa0JBQWtCbEIsY0FBY21CLGdCQUFnQjtBQUNsRCxhQUFPO0FBQUEsSUFDVDtBQUVBLFdBQU9GLElBQUlmLHFCQUFxQjtBQUFBLEVBQ2xDO0FBQUEsRUFFVWtCLEtBQUtILEtBQWE7QUFDMUIsV0FBTztBQUFBLEVBQ1Q7QUFDRjtBQUVPLGFBQU1JLGdCQUFnQixJQUFJYixrQkFBa0IiLCJuYW1lcyI6WyJPcGVyYXRpdmVNb2RlIiwib3BlcmF0aXZlTW9kZUF0b20iLCJvcGVyYXRpdmVNb2RlRW5hYmxlZCQiLCJwb3dlckF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcEVycm9yQm91bmRhcnkiLCJTdGVwRGVwZW5kZW5jaWVzIiwiTG9jYXRpb25NZXRlclN0ZXAiLCJwcmlvcml0eSIsImxhenkiLCJXcmFwcGVyQ29tcG9uZW50IiwidG9TdHJpbmciLCJkZXBlbmRzIiwicHJvdmlkZXMiLCJMT0NBVElPTl9NRVRFUiIsImlzSW5GbHV4IiwiZ2V0Iiwib3BlcmF0aXZlTW9kZSIsIk5FV19BQ1RJVkFUSU9OIiwidG9EbyIsImxvY2F0aW9uTWV0ZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsibG9jYXRpb24tbWV0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgT3BlcmF0aXZlTW9kZSxcclxuICBvcGVyYXRpdmVNb2RlQXRvbSxcclxuICBvcGVyYXRpdmVNb2RlRW5hYmxlZCQsXHJcbiAgcG93ZXJBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHsgU3RlcERlcGVuZGVuY2llcyB9IGZyb20gJy4uL1N0ZXBEZXBlbmRlbmNpZXMnO1xyXG5cclxuY2xhc3MgTG9jYXRpb25NZXRlclN0ZXAgZXh0ZW5kcyBTdGVwIHtcclxuICBwcmlvcml0eSA9IG5ldyBTdGVwUHJpb3JpdHkoOTgpO1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL0xvY2F0aW9uTWV0ZXJTdGVwJyk7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAnTG9jYXRpb25NZXRlcic7XHJcbiAgfVxyXG5cclxuICBkZXBlbmRzKCkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZXMoKSB7XHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuTE9DQVRJT05fTUVURVJdO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICBpZiAoZ2V0KHBvd2VyQXRvbSkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENocmlzdGlhbiBNaWNvY2NpOiBiZWxsYSBwZW5zYXRhLCBpbiBhcy1pcyBub24gYyfDqCBxdWVzdG8gY29udHJvbGxvLCBmb3JzZSDDqCBzZnVnZ2l0bz8gSW8gbG8gY29tbWVudG9cclxuICAgIC8vIGNvbnN0IGhhc0NvbnRhdG9yZSA9XHJcbiAgICAvLyAgIGdldCh0c0FjdGl2YXRpb25HYXMkKS5jb250YXRvcmVQcmVzZW50ZSA9PT0gJ3llcyc7XHJcbiAgICAvLyBpZiAoIWhhc0NvbnRhdG9yZSkge1xyXG4gICAgLy8gICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29uc3Qgb3BlcmF0aXZlTW9kZSA9IGdldChvcGVyYXRpdmVNb2RlQXRvbSk7XHJcbiAgICBpZiAob3BlcmF0aXZlTW9kZSAhPT0gT3BlcmF0aXZlTW9kZS5ORVdfQUNUSVZBVElPTikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHRvRG8oZ2V0OiBHZXR0ZXIpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhdGlvbk1ldGVyID0gbmV3IExvY2F0aW9uTWV0ZXJTdGVwKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9sb2NhdGlvbi1tZXRlci9sb2NhdGlvbi1tZXRlci50c3gifQ==