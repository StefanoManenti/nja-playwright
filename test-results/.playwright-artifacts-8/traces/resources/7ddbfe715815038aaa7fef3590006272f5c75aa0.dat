import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const Fragment = __vite__cjsImport0_react_jsxDevRuntime["Fragment"]; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { flip, offset, shift, size } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@floating-ui_core.js?v=0189a8d1";
import {
  Select as BaseSelect
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@mui_base_Select.js?v=0189a8d1";
import {
  Chevron16LightIcon,
  CloseIcon,
  SearchSlimIcon
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-icons/src/index.ts";
import clsx from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/clsx.js?v=0189a8d1";
import __vite__cjsImport7_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const React = __vite__cjsImport7_react.__esModule ? __vite__cjsImport7_react.default : __vite__cjsImport7_react; const useEffect = __vite__cjsImport7_react["useEffect"]; const useId = __vite__cjsImport7_react["useId"]; const useMemo = __vite__cjsImport7_react["useMemo"]; const useRef = __vite__cjsImport7_react["useRef"]; const useState = __vite__cjsImport7_react["useState"]





;
import { FormHelperText } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/FormHelperText.tsx";
import { InputLabel } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/InputLabel.tsx";
import classes from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.module.less";
import { TextField } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/TextField.tsx";
export const middleware = [
  offset(8),
  flip(),
  shift(),
  size({
    apply({ rects, elements }) {
      Object.assign(elements.floating.style, {
        width: `${rects.reference.width}px`
      });
    }
  })
];
const ListboxWithFilter = React.forwardRef(_c = function ListboxWithFilter2({
  children,
  hasFilter,
  hasOptions,
  filter = "",
  onFilterChange,
  ...props
}, ref) {
  return /* @__PURE__ */ jsxDEV(Fragment, { children: [
    hasFilter && /* @__PURE__ */ jsxDEV("div", { className: classes.filterInputWrapper, children: /* @__PURE__ */ jsxDEV(
      TextField,
      {
        type: "text",
        startAdornment: /* @__PURE__ */ jsxDEV(SearchSlimIcon, { className: classes.iconSearch }, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
          lineNumber: 97,
          columnNumber: 27
        }, this),
        placeholder: "Cerca tra le opzioniâ€¦",
        value: filter,
        onChange: (e) => onFilterChange?.(e.target.value),
        className: classes.filterInput,
        fullWidth: true,
        autoFocus: true
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
        lineNumber: 95,
        columnNumber: 11
      },
      this
    ) }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
      lineNumber: 94,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ jsxDEV(
      "ul",
      {
        ...props,
        ref,
        className: clsx(classes.listbox, props.className),
        children: hasOptions ? children : /* @__PURE__ */ jsxDEV("li", { className: classes.liNoOptions, children: "Nessuna opzione" }, "0-no-result-option", false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
          lineNumber: 116,
          columnNumber: 9
        }, this)
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
        lineNumber: 108,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
    lineNumber: 92,
    columnNumber: 5
  }, this);
});
_c2 = ListboxWithFilter;
export const Select = _s(React.forwardRef(_s(function Select2({
  startAdornment,
  fullWidth,
  hasFilter = false,
  children,
  className,
  ...props
}, ref) {
  _s();
  const [filter, setFilter] = useState("");
  const filteredChildren = useMemo(() => {
    if (!hasFilter || !filter.trim()) return children;
    return React.Children.toArray(children).filter((child) => {
      if (!React.isValidElement(child)) return false;
      const label = child.props?.children;
      return typeof label === "string" && label.toLowerCase().includes(filter.toLowerCase());
    });
  }, [children, hasFilter, filter]);
  return /* @__PURE__ */ jsxDEV(
    BaseSelect,
    {
      ...props,
      ref,
      children: filteredChildren,
      slots: {
        root: Button,
        listbox: ({ ownerState, ...listboxProps }) => /* @__PURE__ */ jsxDEV(
          ListboxWithFilter,
          {
            ...listboxProps,
            hasFilter,
            filter,
            onFilterChange: setFilter,
            hasOptions: React.Children.count(filteredChildren) > 0
          },
          void 0,
          false,
          {
            fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
            lineNumber: 164,
            columnNumber: 9
          },
          this
        )
      },
      slotProps: {
        root: {
          className: clsx(
            classes.root,
            fullWidth && classes.fullWidth,
            className
          ),
          startAdornment
        },
        popup: {
          className: clsx(classes.popup, props.error && classes.selectError),
          middleware
        }
      }
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
      lineNumber: 157,
      columnNumber: 5
    },
    this
  );
}, "EXg1VCBeqIinY04cYduRi/xs7x4=")), "EXg1VCBeqIinY04cYduRi/xs7x4=");
const Button = _s2(React.forwardRef(_c3 = _s2(function Button2({
  error,
  helperText,
  label,
  onBlur,
  ownerState,
  showClear,
  startAdornment,
  ...other
}, ref) {
  _s2();
  const id = useId();
  const ariaDescribedby = `${id}-helper-text`;
  const wasOpenRef = useRef(false);
  useEffect(() => {
    if (wasOpenRef.current && !ownerState.open && typeof onBlur === "function") {
      const currentTarget = typeof ref === "object" && ref && "current" in ref ? ref.current : null;
      const event = {
        type: "blur",
        target: currentTarget,
        currentTarget
      };
      onBlur(event);
    }
    wasOpenRef.current = ownerState.open;
  }, [ownerState.open, onBlur, ref]);
  return /* @__PURE__ */ jsxDEV("div", { className: clsx([error && classes.selectError]), children: [
    label && /* @__PURE__ */ jsxDEV(InputLabel, { children: label }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
      lineNumber: 246,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ jsxDEV("button", { type: "button", ...other, ref, children: [
      startAdornment && /* @__PURE__ */ jsxDEV("div", { className: classes.adornment, children: startAdornment }, void 0, false, {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
        lineNumber: 249,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ jsxDEV(
        "span",
        {
          className: clsx(
            !(ownerState.value || ownerState.defaultValue) && classes.placeholder
          ),
          children: other.children
        },
        void 0,
        false,
        {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
          lineNumber: 251,
          columnNumber: 9
        },
        this
      ),
      /* @__PURE__ */ jsxDEV("div", { className: classes.iconsGrid, children: [
        showClear && ownerState.value && /* @__PURE__ */ jsxDEV(
          CloseIcon,
          {
            className: classes.icon,
            onClick: (e) => {
              showClear();
              if (!ownerState.open) e.stopPropagation();
            }
          },
          void 0,
          false,
          {
            fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
            lineNumber: 262,
            columnNumber: 11
          },
          this
        ),
        /* @__PURE__ */ jsxDEV(Chevron16LightIcon, { className: classes.icon }, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
          lineNumber: 270,
          columnNumber: 11
        }, this)
      ] }, void 0, true, {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
        lineNumber: 260,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
      lineNumber: 247,
      columnNumber: 7
    }, this),
    helperText && /* @__PURE__ */ jsxDEV(
      FormHelperText,
      {
        error,
        id: ariaDescribedby,
        className: classes.helperText,
        children: helperText
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
        lineNumber: 275,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx",
    lineNumber: 245,
    columnNumber: 5
  }, this);
}, "5fhWvtCh1yKhzpHczGgLlKkEhN4=", false, function() {
  return [useId];
})), "5fhWvtCh1yKhzpHczGgLlKkEhN4=", false, function() {
  return [useId];
});
_c4 = Button;
var _c, _c2, _c3, _c4;
$RefreshReg$(_c, "ListboxWithFilter$React.forwardRef");
$RefreshReg$(_c2, "ListboxWithFilter");
$RefreshReg$(_c3, "Button$React.forwardRef");
$RefreshReg$(_c4, "Button");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,