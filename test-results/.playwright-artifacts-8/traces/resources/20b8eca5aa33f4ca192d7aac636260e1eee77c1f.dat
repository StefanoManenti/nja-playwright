globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atomAction, PreconditionFailedError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/index.ts";
import { checkTransfer } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkTransfer.ts";
import { currentPlicoCode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { customerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { NewAccount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/NewAccount.ts";
export class TransferAccount extends NewAccount {
  static {
    this.new$ = atomAction(async (get, set, {
      pod,
      pdr,
      taxId
    }) => {
      const codiceProposta = await get(currentPlicoCode);
      if (!codiceProposta) {
        throw new PreconditionFailedError("plicoCode is null");
      }
      const data = await checkTransfer({
        pod,
        pdr,
        codiceProposta,
        codFiscPrevisto: taxId
      });
      const fornituraCommon = data.fornituraLuce || data.fornituraGas;
      if (!fornituraCommon) {
        throw new PreconditionFailedError("fornituraLuce and fornituraGas are null");
      }
      const account = new TransferAccount(customerAtom, data.intestatario, !!pod, !!pdr, fornituraCommon.codiceConto);
      set(account.supplyAddress, EgonAddress.fromCheckD365Format(fornituraCommon.indirizzo));
      if (data.fornituraLuce) {
        const supply = get(account.powerSupply);
        if (!supply) {
          throw new PreconditionFailedError("unexpected power supply is null");
        }
        set(supply.pod, data.fornituraLuce.podPdr);
        set(supply.contractCode, data.fornituraLuce.codiceContratto);
        set(supply.assetCode, data.fornituraLuce.codiceAsset);
        set(supply.assetId, data.fornituraLuce.supplyCode);
        set(supply.pdfCode, data.fornituraLuce.codicePDF);
        set(supply.kwAtom, data.fornituraLuce.potenzaImpegnata);
        set(supply.voltageAtom, data.fornituraLuce.livelloTensione);
      }
      if (data.fornituraGas) {
        const supply = get(account.gasSupply);
        if (!supply) {
          throw new PreconditionFailedError("unexpected gas supply is null");
        }
        set(supply.pdr, data.fornituraGas.podPdr);
        set(supply.contractCode, data.fornituraGas.codiceContratto);
        set(supply.assetCode, data.fornituraGas.codiceAsset);
        set(supply.assetId, data.fornituraGas.supplyCode);
        set(supply.pdfCode, data.fornituraGas.codicePDF);
      }
      return account;
    });
  }
  constructor(customer$, oldCustomer, power, gas, code) {
    super(customer$, power, gas, code);
    this.oldCustomer = {
      ...oldCustomer,
      segment: oldCustomer.segmento
    };
  }
}

//# sourceMappingURL=data:application/json;base64,