globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { CheckIbanNonRiuscitoError, IbanNotValidError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { API, atomWithRetryableQuery, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
import { addressAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
async function checkIban(payload) {
  if (areCheckBypassed()) {
    return {
      stato: "CHECK_RIUSCITO",
      ibanSeda: true
    };
  }
  const otherFields = {};
  if (payload.tipoSoggetto !== "PG") {
    otherFields.siglaProvincia = "XX";
  }
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/ibanCheck`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      iban: payload.iban,
      codiceProposta: payload.plicoCode,
      subjectType: payload.tipoSoggetto,
      vatRegistrationNo: payload.tipoSoggetto === "PF" ? payload.codiceFiscaleIntestatario : payload.piva,
      provinceCode: payload.tipoSoggetto === "PF" ? null : payload.siglaProvincia,
      operationId: logHash,
      logHash,
      idLead: payload.idLead,
      plicoCode: payload.plicoCode,
      salesProcess: payload.salesProcess
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  switch (data.result) {
    case "CHECK_RIUSCITO":
    case "CHECK_PARZIALE":
      return {
        stato: data.statoCheckIban,
        ibanSeda: data.ibanSeda
      };
    case "CHECK_NON_RIUSCITO":
      throw new CheckIbanNonRiuscitoError(data.errorMessage, logHash, response);
    default:
      throw new IbanNotValidError(data.statoCheckIban, logHash, response);
  }
}
export const atomWithCheckIban = (tool) => {
  return atomWithRetryableQuery(async (get) => {
    const contract = get(currentContractInfoAtom);
    const idLead = contract.idLead;
    const plicoCode = await contract.plicoCode;
    const salesProcess = await contract.salesProcess;
    const ibanPayload = getIbanPayload(tool);
    if (ibanPayload.tipoSoggetto === "PG") {
      const a = await get(addressAtom);
      ibanPayload.siglaProvincia = a?.province || "";
    }
    return {
      queryKey: ["checkIban", ibanPayload],
      queryFn: () => checkIban({
        idLead,
        plicoCode,
        salesProcess,
        operazione: salesProcess,
        ...ibanPayload
      })
    };
  });
};
function getIbanPayload(tool) {
  const iban = tool.iban;
  if (tool.intestatario.type === "legal") {
    const payload2 = {
      iban,
      tipoSoggetto: "PG",
      piva: tool.intestatario.vatNumber,
      siglaProvincia: ""
    };
    return payload2;
  }
  const payload = {
    iban,
    tipoSoggetto: "PF",
    codiceFiscaleIntestatario: tool.intestatario.taxId
  };
  return payload;
}

//# sourceMappingURL=data:application/json;base64,