globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { deepEquals, PreconditionFailedError, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomFamily } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { broadband$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/broadband/broadband.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { TransferType, transferTypeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/transfer.ts";
import { CreditCheckError, Ddl009_010Error } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode, Payment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
async function fetchCreditCheck(payload) {
  if (areCheckBypassed()) {
    return {
      customerInWhitelist: true
    };
  }
  const logHash = generateOperationID();
  const data1 = {
    caller: "WEB",
    logHash,
    plicoCode: payload.plicoCode,
    fiscalCode: payload.fiscalCode,
    vatNumber: payload.vatNumber,
    idLead: payload.idLead,
    modalitaOperativa: payload.modalitaOperativa,
    checkTypes: payload.checkTypes
  };
  if (payload.checkTypes === "CREDIT,SCORECARD") {
    data1.iban = payload.iban;
  }
  const response = await fetch(`${API}/webOrderCommonServices/v1.1/creditCheck`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(data1)
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  if (data.errorManagement?.errorCode === "DDL_009" || data.errorManagement?.errorCode === "DDL_010") {
    throw new Ddl009_010Error(data.errorManagement?.errorCode, logHash, response);
  }
  if (data.status !== "Success") {
    throw new ServiceUnhandledResponseError(data.status, logHash, response);
  }
  if (data.result !== "001") {
    throw new ServiceUnhandledResponseError(data.result, logHash, response);
  }
  const esito = checkEsito(data.response.creditCheck?.esito, (x) => JSON.parse(x)) && checkEsito(data.response.scorecard?.esito) && checkEsito(data.response.insolutoNDS?.esito);
  if (!esito) {
    throw new CreditCheckError("KO_CREDIT_CHECK", logHash, response);
  }
  return {
    customerInWhitelist: data.response.creditCheck?.dettaglio.whitelist === "OK"
  };
}
function checkEsito(v, parse = (x) => !!x) {
  if (v == null) {
    return true;
  }
  return parse(v);
}
const fetchCreditCheckAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\weborder\\creditCheck.ts/fetchCreditCheckAtom", atomFamily((...params) => atomWithErrorReset(() => fetchCreditCheck(...params)), (a, b) => deepEquals(a, b)));
fetchCreditCheckAtom.debugLabel = "fetchCreditCheckAtom";
async function _checkCredit(get, customer$, paymentData, modalitaOperativa) {
  const contract = get(currentContractInfoAtom);
  const idLead = contract.idLead;
  const plicoCode = await contract.plicoCode;
  const vatOrTaxId = await getVatOrTaxId(get, customer$);
  const paymentType = await get(paymentData.paymentType$);
  if (paymentType === Payment.DOMICILIATION) {
    const tool = await get(paymentData.paymentTool$);
    if (tool == null) {
      throw new PreconditionFailedError("Payment type is domiciliation but no iban is defined.");
    }
    const iban = tool.iban;
    return get(fetchCreditCheckAtom({
      idLead,
      plicoCode,
      modalitaOperativa,
      checkTypes: "CREDIT,SCORECARD",
      iban,
      ...vatOrTaxId
    }));
  }
  return get(fetchCreditCheckAtom({
    idLead,
    plicoCode,
    modalitaOperativa,
    checkTypes: "CREDIT",
    ...vatOrTaxId
  }));
}
async function getVatOrTaxId(get, customer$) {
  const customer = await get(customer$);
  const profile = customer.profile;
  const segment = await get(customer.segment);
  const vatOrTaxId = segment === Segment.SMALL ? {
    vatNumber: await get(profile.vatNumber$)
  } : {
    fiscalCode: await get(profile.taxId$)
  };
  if (vatOrTaxId.fiscalCode == null && vatOrTaxId.vatNumber == null) {
    throw new PreconditionFailedError("TaxId is empty");
  }
  return vatOrTaxId;
}
export const atomWithCheckCredit = (customer$, paymentData) => atomWithErrorReset(async (get) => {
  const transferType = await get(transferTypeAtom);
  if (transferType === TransferType.MORTIS_CAUSA) {
    return {
      customerInWhitelist: true
    };
  }
  const salesProcesses = await get(checkCreditSalesProcesses$);
  console.debug(salesProcesses);
  const promises = salesProcesses.map((modalitaOperativa) => _checkCredit(get, customer$, paymentData, modalitaOperativa));
  const results = await Promise.all(promises);
  return {
    customerInWhitelist: results.reduce((previousValue, currentValue) => previousValue && currentValue.customerInWhitelist, true)
  };
});
const checkCreditSalesProcesses$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\weborder\\creditCheck.ts/checkCreditSalesProcesses$", atom(async (get) => {
  const wp = get(workingProductAtom);
  if (wp == null) {
    return ["ALTRO"];
  }
  const toReturn = /* @__PURE__ */ new Set();
  if (wp.commodity) {
    const modalitaOperativa = getCheckCreditCommodityModalitaOperativa(wp.operativeMode);
    if (modalitaOperativa) {
      toReturn.add(modalitaOperativa);
    }
  }
  if (wp.broadband) {
    const broadband = await get(broadband$);
    const modalitaOperativa = get(broadband.salesProcess$);
    toReturn.add(modalitaOperativa);
  }
  if (!toReturn.size) {
    toReturn.add("ALTRO");
  }
  return [...toReturn.values()];
}));
checkCreditSalesProcesses$.debugLabel = "checkCreditSalesProcesses$";
function getCheckCreditCommodityModalitaOperativa(operativeMode) {
  switch (operativeMode) {
    case OperativeMode.SWITCH_IN:
      return "SWITCH IN";
    case OperativeMode.SWITCH_IN_TRANSFER:
      return "VOLTURA CON SWITCH";
    case OperativeMode.TRANSFER:
      return "VOLTURA";
    case OperativeMode.NEW_ACTIVATION:
      return "ATTIVAZIONE";
    case OperativeMode.CHANGE_OFFER:
      return "CAMBIO PRODOTTO";
  }
}

//# sourceMappingURL=data:application/json;base64,