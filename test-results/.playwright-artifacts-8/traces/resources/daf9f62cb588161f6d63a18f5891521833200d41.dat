globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
const MUL_PRECISION = 100;
export function mf(price, multiplyWith = 1, digits = 4) {
  if (!price) {
    return "";
  }
  const digitsMul = Math.pow(10, digits);
  const percent = multiplyWith * MUL_PRECISION;
  const s = Number(price.replace(",", "."));
  const calcAndRound = Number(Math.round(Math.round(s * digitsMul * percent) / MUL_PRECISION));
  return (calcAndRound / digitsMul).toFixed(digits).replace(".", ",").replace(/,0+$/, "");
}
export function sf(price, subtractWith, digits = 4) {
  if (!price) {
    return "";
  }
  const digitsMul = Math.pow(10, digits);
  const s = Number(price.replace(",", "."));
  const s2 = Number(`${subtractWith}`.replace(",", "."));
  const calcAndRound = Number(Math.round(s * digitsMul - s2 * digitsMul));
  return (calcAndRound / digitsMul).toFixed(digits).replace(".", ",");
}
export function pricesSum(price, sumWith, digits = 4) {
  if (!price) {
    return "";
  }
  const digitsMul = Math.pow(10, digits);
  const s = Number(price.replace(",", "."));
  const s2 = Number(`${sumWith}`.replace(",", "."));
  const calcAndRound = Number(Math.round(s * digitsMul + s2 * digitsMul));
  return (calcAndRound / digitsMul).toFixed(digits).replace(".", ",");
}
const FULL_PERCENTAGE = 100;
export function applicaSconto(price, sconto, newPrice) {
  if (price.type !== "normal") return price;
  const basePrice = price;
  const sconti = typeof sconto === "function" ? sconto(basePrice) : sconto;
  const price0 = mf(basePrice.qty, 1 - sconti[0] / FULL_PERCENTAGE);
  const price1 = mf(basePrice.qty, 1 - sconti[1] / FULL_PERCENTAGE);
  return newPrice(basePrice, [price0, price1]);
}
export class PriceCalculatorV2 {
  /**
   * @param special Abilita il parsing dei prezzi special. (SPECIAL|PIENO)
   *   Se false ignorerà il prezzo SPECIAL e userà sempre il prezzo PIENO.
   */
  constructor(special = false) {
    this.special = special;
    // Operazioni da applicare
    this.ops = [];
  }
  addDiscount(op) {
    this.ops.push(op);
    return this;
  }
  setTag(tag) {
    this.ops.push({
      tag,
      condition: false
    });
    return this;
  }
  /**
   * Applica gli sconti
   * @param price prezzo preso dal fragment, eventualmente con pipe (SPECIAL|PIENO).
   */
  apply(price) {
    if (price == null) {
      return {
        qty: "ND",
        oldQty: void 0
      };
    }
    const currentCalculator = new SinglePriceCalculator(this.ops);
    const oldCalculator = new SinglePriceCalculator(this.ops.map(PriceCalculatorV2.opForOldPrice));
    const {
      qty,
      fullQty
    } = getQtyAndFullQty(price, this.special);
    return {
      qty: currentCalculator.apply(qty, fullQty),
      oldQty: fullQty ? oldCalculator.apply(fullQty) : void 0
    };
  }
  static opForOldPrice(op) {
    return op.applyAlsoToOldPrice ? op : {
      ...op,
      condition: false
    };
  }
}
class Prices {
  constructor() {
    this.tags = /* @__PURE__ */ new Map();
  }
  get(tag) {
    const p = this.tags.get(tag);
    if (p == null) {
      throw new Error("Unknown tag");
    }
    return p;
  }
  set(tag, value) {
    if (this.tags.has(tag)) {
      throw new Error("Tag already exists");
    }
    this.tags.set(tag, value);
  }
}
class SinglePriceCalculator {
  constructor(ops) {
    this.ops = ops;
  }
  /**
   * Applica gli sconti
   * @param qty prezzo
   * @param fullQty eventuale prezzo originale, se non passato allora `qty` sarà il prezzo originale.
   */
  apply(qty, fullQty) {
    if (qty == null) {
      return qty;
    }
    const tags = new Prices();
    tags.set("original", fullQty ?? qty);
    tags.set("special", qty);
    for (const op of this.ops) {
      qty = this.getOperationFunction(op)(qty, tags);
      if (op.tag) {
        tags.set(op.tag, qty);
      }
    }
    return qty;
  }
  getOperationFunction(op) {
    const transparent = (qty) => qty;
    if (!op.condition) {
      return transparent;
    }
    if ("percent" in op) {
      const {
        percent,
        from,
        digits
      } = op;
      if (percent == null) {
        return transparent;
      }
      return (qty, tags) => {
        return sf(qty, mf(tags.get(from), +percent / 100, digits));
      };
    }
    if ("amount" in op) {
      const {
        amount,
        digits
      } = op;
      if (amount == null) {
        return transparent;
      }
      return (qty) => sf(qty, amount, digits);
    }
    if ("custom" in op) {
      return op.custom;
    }
    throw new Error("Invalid operation");
  }
}
function getQtyAndFullQty(price, enableDiscount) {
  const {
    qty,
    fullQty
  } = parsePriceWithPipe(price);
  if (enableDiscount) {
    return {
      qty,
      fullQty
    };
  } else {
    return {
      qty: fullQty || qty
    };
  }
}
function parsePriceWithPipe(price) {
  let qty = price;
  let fullQty = void 0;
  if (qty?.includes("|")) {
    const split = qty.split("|");
    fullQty = split[1];
    qty = split[0];
  }
  return {
    qty,
    fullQty
  };
}

//# sourceMappingURL=data:application/json;base64,