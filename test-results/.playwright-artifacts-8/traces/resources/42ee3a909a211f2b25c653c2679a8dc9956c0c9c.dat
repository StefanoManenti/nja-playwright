import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react;
import "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/styles.css";
const FootnotesContext = React.createContext({});
export function FootnoteRef(props) {
  _s();
  const { description } = props;
  const {
    footnotes,
    footnotesTitleId,
    getFootnoteRefId,
    getFootnoteId,
    register
  } = React.useContext(FootnotesContext);
  const idRef = React.useMemo(
    () => getFootnoteRefId(props),
    [getFootnoteRefId, props]
  );
  const idNote = React.useMemo(
    () => getFootnoteId(props),
    [getFootnoteId, props]
  );
  const footnote = React.useMemo(
    () => ({ idRef, idNote, description }),
    [idRef, idNote, description]
  );
  if (!footnotes.has(footnote.idRef)) {
    footnotes.set(footnote.idRef, footnote);
  }
  React.useEffect(() => {
    const unregister = register(footnote);
    return () => unregister();
  }, [register, footnote]);
  return /* @__PURE__ */ jsxDEV("span", { "data-a11y-footnotes-ref": "", children: props.children }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
    lineNumber: 71,
    columnNumber: 10
  }, this);
}
_s(FootnoteRef, "yBlaAy9CHVHQZ3o55HEdkj1eNXc=");
_c = FootnoteRef;
export function Footnotes(props) {
  _s2();
  const { footnotes, footnotesTitleId } = React.useContext(FootnotesContext);
  const {
    Wrapper = "footer",
    Title = (props2) => /* @__PURE__ */ jsxDEV("h2", { ...props2, children: "Footnotes" }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
      lineNumber: 103,
      columnNumber: 24
    }, this),
    List = "ol",
    ListItem = "li",
    BackLink = (props2) => /* @__PURE__ */ jsxDEV("a", { ...props2, children: "↩" }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
      lineNumber: 106,
      columnNumber: 27
    }, this)
  } = props;
  if (footnotes.size === 0) return null;
  const references = Array.from(footnotes.values());
  return /* @__PURE__ */ jsxDEV(Wrapper, { "data-a11y-footnotes-footer": true, role: "doc-endnotes", children: [
    /* @__PURE__ */ jsxDEV(Title, { "data-a11y-footnotes-title": "", id: footnotesTitleId }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
      lineNumber: 115,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ jsxDEV(List, { "data-a11y-footnotes-list": "", children: references.map(
      ({ idNote, idRef, description }, index) => /* @__PURE__ */ jsxDEV(
        ListItem,
        {
          id: idNote,
          "data-a11y-footnotes-list-item": "",
          index: index + 1,
          children: [
            description,
            " ",
            /* @__PURE__ */ jsxDEV(
              BackLink,
              {
                "data-a11y-footnotes-back-link": "",
                href: "#" + idRef,
                "aria-label": `Back to reference ${index + 1}`,
                role: "doc-backlink"
              },
              void 0,
              false,
              {
                fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
                lineNumber: 125,
                columnNumber: 13
              },
              this
            )
          ]
        },
        idNote,
        true,
        {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
          lineNumber: 118,
          columnNumber: 9
        },
        this
      )
    ) }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
      lineNumber: 116,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
    lineNumber: 114,
    columnNumber: 5
  }, this);
}
_s2(Footnotes, "Oyb8VsNQqmJ+p6bk1xV3J/kTXTs=");
_c2 = Footnotes;
export function FootnotesProvider({
  children,
  footnotesTitleId = "footnotes-label"
}) {
  _s3();
  const [footnotes, setFootnotes] = React.useState(/* @__PURE__ */ new Map());
  const getBaseId = React.useCallback(
    ({ id, children: children2 }) => id || getIdFromTree(children2),
    []
  );
  const getFootnoteRefId = React.useCallback(
    (props) => getBaseId(props) + "-ref",
    [getBaseId]
  );
  const getFootnoteId = React.useCallback(
    (props) => getBaseId(props) + "-note",
    [getBaseId]
  );
  React.useEffect(() => setFootnotes(/* @__PURE__ */ new Map()), []);
  const register = React.useCallback((footnote) => {
    setFootnotes((footnotes2) => {
      const clone = new Map(footnotes2);
      if (!clone.has(footnote.idRef)) clone.set(footnote.idRef, footnote);
      return clone;
    });
    return () => {
      setFootnotes((footnotes2) => {
        const clone = new Map(footnotes2);
        clone.delete(footnote.idRef);
        return clone;
      });
    };
  }, []);
  return /* @__PURE__ */ jsxDEV(
    FootnotesContext.Provider,
    {
      value: {
        footnotes,
        footnotesTitleId,
        getFootnoteRefId,
        getFootnoteId,
        register
      },
      children
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx",
      lineNumber: 183,
      columnNumber: 5
    },
    this
  );
}
_s3(FootnotesProvider, "+m6bus+31nU5AJXVSVy33WmwtHI=");
_c3 = FootnotesProvider;
function getTextFromTree(tree) {
  let text = "";
  if (tree == null) {
    return text;
  }
  if (typeof tree === "string") {
    text += tree;
  } else if (Array.isArray(tree)) {
    text += tree.map(getTextFromTree).join("");
  } else if (React.isValidElement(tree) && tree.props.children) {
    text += getTextFromTree(tree.props.children);
  }
  return text;
}
export function getIdFromTree(tree) {
  return getTextFromTree(tree).toLowerCase().replace(/[^a-z0-9-_\s]/g, "").replace(/\s+/g, "-");
}
var _c, _c2, _c3;
$RefreshReg$(_c, "FootnoteRef");
$RefreshReg$(_c2, "Footnotes");
$RefreshReg$(_c3, "FootnotesProvider");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/footnotes/footnotes.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,