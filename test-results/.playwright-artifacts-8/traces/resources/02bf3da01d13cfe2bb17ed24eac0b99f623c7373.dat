globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { delay, http, HttpResponse } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/msw.js?v=0189a8d1";
var Status = /* @__PURE__ */ ((Status2) => {
  Status2[Status2["NON_COPERTO"] = 0] = "NON_COPERTO";
  Status2[Status2["COPERTO_IN_FUTURO"] = 1] = "COPERTO_IN_FUTURO";
  Status2[Status2["COPERTO"] = 2] = "COPERTO";
  return Status2;
})(Status || {});
let currentStatus = 2 /* COPERTO */;
export default http.post(/\/serviceDA.\/api\/productsServices\/v1\/bb-checkServiceCoverage/, async () => {
  await delay();
  const status = currentStatus;
  currentStatus = (currentStatus + 1) % 3;
  switch (status) {
    case 0 /* NON_COPERTO */:
      return HttpResponse.json({
        result: "001",
        status: "Success",
        coveredServices: [{
          scenario: "NON_COPERTO"
        }]
      });
    case 1 /* COPERTO_IN_FUTURO */:
      return HttpResponse.json({
        result: "001",
        status: "Success",
        coveredServices: [{
          scenario: "COPERTO_IN_FUTURO"
        }]
      });
    case 2 /* COPERTO */:
    default:
      return HttpResponse.json({
        result: "001",
        status: "Success",
        coveredServices: [{
          provider: "OpenFiber",
          technology: "FTTH",
          profile: "1000/300Mbps",
          scenario: "COPERTO",
          cluster: "AB",
          coverageState: "110"
        }]
      });
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLE9BQU9DLE1BQU1DLG9CQUFvQjtBQUUxQyxJQUFLQyxTQUFMLGtCQUFLQSxZQUFMO0FBQ0VDO0FBQ0FDO0FBQ0FDO0FBSEdIO0FBQUFBO0FBT0wsSUFBSUksZ0JBQWdCSjtBQUVwQixlQUFlRixLQUFLTyxLQUNsQixvRUFDQSxZQUFZO0FBQ1YsUUFBTVIsTUFBTTtBQUVaLFFBQU1TLFNBQVNGO0FBQ2ZBLG1CQUFpQkEsZ0JBQWdCLEtBQUs7QUFFdEMsVUFBUUUsUUFBTTtBQUFBLElBQ1osS0FBS047QUFDSCxhQUFPRCxhQUFhUSxLQUFLO0FBQUEsUUFDdkJDLFFBQVE7QUFBQSxRQUNSRixRQUFRO0FBQUEsUUFDUkcsaUJBQWlCLENBQ2Y7QUFBQSxVQUNFQyxVQUFVO0FBQUEsUUFDWixDQUFDO0FBQUEsTUFFTCxDQUFDO0FBQUEsSUFDSCxLQUFLVjtBQUNILGFBQU9ELGFBQWFRLEtBQUs7QUFBQSxRQUN2QkMsUUFBUTtBQUFBLFFBQ1JGLFFBQVE7QUFBQSxRQUNSRyxpQkFBaUIsQ0FDZjtBQUFBLFVBQ0VDLFVBQVU7QUFBQSxRQUNaLENBQUM7QUFBQSxNQUVMLENBQUM7QUFBQSxJQUNILEtBQUtWO0FBQUFBLElBQ0w7QUFDRSxhQUFPRCxhQUFhUSxLQUFLO0FBQUEsUUFDdkJDLFFBQVE7QUFBQSxRQUNSRixRQUFRO0FBQUEsUUFDUkcsaUJBQWlCLENBQ2Y7QUFBQSxVQUNFRSxVQUFVO0FBQUEsVUFDVkMsWUFBWTtBQUFBLFVBQ1pDLFNBQVM7QUFBQSxVQUNUSCxVQUFVO0FBQUEsVUFDVkksU0FBUztBQUFBLFVBQ1RDLGVBQWU7QUFBQSxRQUNqQixDQUFDO0FBQUEsTUFFTCxDQUFDO0FBQUEsRUFDTDtBQUNGLENBQ0YiLCJuYW1lcyI6WyJkZWxheSIsImh0dHAiLCJIdHRwUmVzcG9uc2UiLCJTdGF0dXMiLCJOT05fQ09QRVJUTyIsIkNPUEVSVE9fSU5fRlVUVVJPIiwiQ09QRVJUTyIsImN1cnJlbnRTdGF0dXMiLCJwb3N0Iiwic3RhdHVzIiwianNvbiIsInJlc3VsdCIsImNvdmVyZWRTZXJ2aWNlcyIsInNjZW5hcmlvIiwicHJvdmlkZXIiLCJ0ZWNobm9sb2d5IiwicHJvZmlsZSIsImNsdXN0ZXIiLCJjb3ZlcmFnZVN0YXRlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImJiLWNoZWNrU2VydmljZUNvdmVyYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlbGF5LCBodHRwLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdtc3cnO1xyXG5cclxuZW51bSBTdGF0dXMge1xyXG4gIE5PTl9DT1BFUlRPLFxyXG4gIENPUEVSVE9fSU5fRlVUVVJPLFxyXG4gIENPUEVSVE8sXHJcbn1cclxuXHJcbi8vIGxldCBjdXJyZW50U3RhdHVzID0gU3RhdHVzLk5PTl9DT1BFUlRPO1xyXG5sZXQgY3VycmVudFN0YXR1cyA9IFN0YXR1cy5DT1BFUlRPO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaHR0cC5wb3N0KFxyXG4gIC9cXC9zZXJ2aWNlREEuXFwvYXBpXFwvcHJvZHVjdHNTZXJ2aWNlc1xcL3YxXFwvYmItY2hlY2tTZXJ2aWNlQ292ZXJhZ2UvLFxyXG4gIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IGRlbGF5KCk7XHJcblxyXG4gICAgY29uc3Qgc3RhdHVzID0gY3VycmVudFN0YXR1cztcclxuICAgIGN1cnJlbnRTdGF0dXMgPSAoY3VycmVudFN0YXR1cyArIDEpICUgMztcclxuXHJcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xyXG4gICAgICBjYXNlIFN0YXR1cy5OT05fQ09QRVJUTzpcclxuICAgICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgICAgcmVzdWx0OiAnMDAxJyxcclxuICAgICAgICAgIHN0YXR1czogJ1N1Y2Nlc3MnLFxyXG4gICAgICAgICAgY292ZXJlZFNlcnZpY2VzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBzY2VuYXJpbzogJ05PTl9DT1BFUlRPJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGNhc2UgU3RhdHVzLkNPUEVSVE9fSU5fRlVUVVJPOlxyXG4gICAgICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgICByZXN1bHQ6ICcwMDEnLFxyXG4gICAgICAgICAgc3RhdHVzOiAnU3VjY2VzcycsXHJcbiAgICAgICAgICBjb3ZlcmVkU2VydmljZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHNjZW5hcmlvOiAnQ09QRVJUT19JTl9GVVRVUk8nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgICAgY2FzZSBTdGF0dXMuQ09QRVJUTzpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgICAgcmVzdWx0OiAnMDAxJyxcclxuICAgICAgICAgIHN0YXR1czogJ1N1Y2Nlc3MnLFxyXG4gICAgICAgICAgY292ZXJlZFNlcnZpY2VzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwcm92aWRlcjogJ09wZW5GaWJlcicsXHJcbiAgICAgICAgICAgICAgdGVjaG5vbG9neTogJ0ZUVEgnLFxyXG4gICAgICAgICAgICAgIHByb2ZpbGU6ICcxMDAwLzMwME1icHMnLFxyXG4gICAgICAgICAgICAgIHNjZW5hcmlvOiAnQ09QRVJUTycsXHJcbiAgICAgICAgICAgICAgY2x1c3RlcjogJ0FCJyxcclxuICAgICAgICAgICAgICBjb3ZlcmFnZVN0YXRlOiAnMTEwJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzLW1vY2svc3JjL2xpYi9oYW5kbGVycy9iYi1jaGVja1NlcnZpY2VDb3ZlcmFnZS50cyJ9