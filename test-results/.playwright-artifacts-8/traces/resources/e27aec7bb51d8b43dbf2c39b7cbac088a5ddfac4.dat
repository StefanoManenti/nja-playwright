globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { fromSiNo, fromYN, toSiNo, toYN } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/types.ts";
import { ImmediateEffect } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/types.ts";
import { workingOnBroadbandAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { broadband$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/broadband/broadband.ts";
export const bulkOrderBroadband$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\broadband.ts/bulkOrderBroadband$", atom(async (get) => {
  const enabled = get(workingOnBroadbandAtom);
  if (!enabled) {
    return {};
  }
  const broadband = await get(broadband$);
  const phone = get(broadband.phone$);
  const address = await get(broadband.address$);
  const migrationCode = await get(broadband.migrationCode$);
  const effectiveDate = await get(broadband.effectiveDate$);
  const contactPhone = await get(broadband.contactPhone$);
  const customerModem = get(broadband.customerModem$);
  const salesProcess = get(broadband.salesProcess$);
  const broadbandData = {
    contactPhone: contactPhone?.full ?? "",
    // TODO REMOVE productId HARDCODED
    productId: "SKU_PLNBB_PERNOI_202507",
    // TODO REMOVE customerType HARDCODED
    customerType: "Dipendente",
    voiceService: toSiNo(phone?.hasPhone),
    lineNumber: phone?.hasPhone ? phone?.phoneNumber : "",
    immediateEffect: get(broadband.immediateEffect$) === ImmediateEffect.PRIORITY,
    effectiveDate: effectiveDate?.toISOString(),
    provider: address?.provider,
    technology: address?.technology,
    cluster: address?.cluster,
    coverageState: address?.coverageState,
    speedProfile: address?.profile,
    scenario: address?.scenario,
    internet: migrationCode?.hasInternet,
    migrationCode: migrationCode?.migrationCode,
    modemSupply: toYN(!customerModem),
    salesProcess
  };
  const toReturn = {
    broadband: broadbandData,
    fornitureData: address?.address.asLeadFormat(),
    salesProcess
  };
  return toReturn;
}, async (get, set, lead) => {
  const bData = lead.broadband;
  const address = EgonAddress.fromLeadFormat(lead.fornitureData);
  const broadband = await get(broadband$);
  if (bData?.voiceService != null) {
    const hasPhone = fromSiNo(bData.voiceService);
    if (hasPhone && bData.lineNumber) {
      set(broadband.phone$, {
        hasPhone: true,
        phoneNumber: bData.lineNumber
      });
    } else if (!hasPhone) {
      set(broadband.phone$, {
        hasPhone: false
      });
    }
  }
  if (bData?.internet != null) {
    if (bData?.internet) {
      await set(broadband.migrationCode$, {
        hasInternet: true,
        migrationCode: bData?.migrationCode
      });
    } else {
      await set(broadband.migrationCode$, {
        hasInternet: false
      });
    }
  }
  if (bData?.modemSupply != null) {
    set(broadband.customerModem$, !fromYN(bData?.modemSupply));
  }
  if (address) {
    await set(broadband.address$, address);
  }
  if (lead.broadband?.contactPhone) {
    set(broadband.contactPhone$, lead.broadband?.contactPhone);
  }
  if (bData?.immediateEffect != null) {
    set(broadband.immediateEffect$, bData.immediateEffect ? ImmediateEffect.PRIORITY : ImmediateEffect.STANDARD);
  }
}));
bulkOrderBroadband$.debugLabel = "bulkOrderBroadband$";

//# sourceMappingURL=data:application/json;base64,