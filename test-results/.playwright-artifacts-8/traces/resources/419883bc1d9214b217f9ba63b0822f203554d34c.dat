globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/index.ts";
import { buildPanelBestSizeAtom, buildPanelCompatibilityAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/panel-adoption/index.ts";
import { atomWithPanelsLocationAlreadyActive } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/panelsDetails.ts";
import { atomWithCheckAsset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkAsset.ts";
import { atomWithCheckPayment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkPayment.ts";
import { atomWithCheckCredit } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/creditCheck.ts";
import { CommodityObj } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/CommodityObj.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { Bill, Payment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { atomWithAddressAsString } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithAddressAsString.ts";
import { atomWithPaymentHolder } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithPaymentHolder.ts";
import { atomWithPaymentTools } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/buildPaymentToolsAtom.ts";
export class ChangeOfferAccount {
  constructor(data, customer) {
    this.data = data;
    this.customer = customer;
    this.existing = true;
    this.customer$ = atom(() => this.customer);
    this._billType$ = atom(Bill.NOT_SELECTED);
    this.billTypeFromService$ = atom(() => this.data.bollettaDigitale ? Bill.DIGITAL : Bill.PAPER);
    this.billType$ = atom((get) => {
      const billType = get(this._billType$);
      return billType || get(this.billTypeFromService$);
    }, (get, set, args) => {
      set(this._billType$, args);
    });
    this._paymentType$ = atom(Payment.NOT_SELECTED);
    this._paymentTool$ = atom();
    this.checkCredit$ = atom((get) => {
      const paymentType = get(this._paymentType$);
      if (!paymentType) {
        return {
          customerInWhitelist: false
        };
      }
      return get(atomWithCheckCredit(this.customer$, this));
    });
    this.paymentData$ = atom(async (get) => {
      const customerCode = get(this.customer.customerCode);
      if (!customerCode) return void 0;
      const response = await get(atomWithCheckPayment(customerCode));
      if (response.esito !== "OK" || !response.datiPagamento) return void 0;
      return response.datiPagamento;
    });
    this.paymentTypeFromService$ = atom(async (get) => {
      const paymentData = await get(this.paymentData$);
      console.log(paymentData);
      return paymentData?.domiciliazione ? Payment.DOMICILIATION : Payment.POSTAL;
    });
    this.paymentType$ = atom(async (get) => {
      const paymentType = get(this._paymentType$);
      return paymentType || get(this.paymentTypeFromService$);
    }, (get, set, args) => {
      set(this._paymentType$, args);
    });
    this.paymentTool$ = atom(async (get) => {
      const _type = get(this._paymentType$);
      const _tool = get(this._paymentTool$);
      if (_type && _tool) {
        if ("id" in _tool && !("iban" in _tool)) {
          const paymentTools = await get(this.paymentTools);
          return paymentTools?.find((tool) => tool.id === _tool.id);
        }
        return _tool;
      }
      const type = await get(this.paymentTypeFromService$);
      if (type !== Payment.DOMICILIATION) {
        return void 0;
      }
      const paymentData = await get(this.paymentData$);
      if (!paymentData) {
        return void 0;
      }
      return {
        iban: paymentData.iban || "",
        // [Christian Micocci] Domenico Napoletano, in data 11/06/2025 mi ha detto che ibanSeda non serve per il cambio prodotto.
        // ibanSeda: paymentData.ibanSeda,
        intestatario: paymentData.segmentoIntestatario === Segment.SMALL ? {
          type: "legal",
          businessName: paymentData.ragSocIntestatario || "",
          taxId: paymentData.codFiscIntestatario || "",
          vatNumber: paymentData.partitaIvaIntestatario || ""
        } : {
          type: "individual",
          givenName: paymentData.nomeIntestatario || "",
          familyName: paymentData.cognomeIntestatario || "",
          taxId: paymentData.codFiscIntestatario || ""
        },
        subscriber: paymentData.segmentoIntestatario === Segment.SMALL ? {
          type: "individual",
          givenName: paymentData.nomeSottoscrittore || "",
          familyName: paymentData.cognomeSottoscrittore || "",
          taxId: paymentData.codFiscSottoscrittore || ""
        } : void 0
      };
    }, (get, set, args) => {
      set(this._paymentTool$, args);
    });
    this.samePaymentHolderAtom = atomWithPaymentHolder(this);
    this.code = this.data.codiceConto;
    this.paymentTools = atomWithPaymentTools(this.code);
    this.alias = this.data.alias;
    this.commodity = new CommodityObj(this.data.commodity);
    this.powerSupply = atom(() => this.commodity.power ? new ChangeOfferPowerSupply(this.data, this) : void 0);
    this.gasSupply = atom(() => this.commodity.gas ? new ChangeOfferGasSupply(this.data, this) : void 0);
    this.supplyAddress = atom(EgonAddress.fromCheckD365Format(this.data.indirizzoFornitura));
    this.shippingAddress = atom(EgonAddress.fromCheckD365Format(this.data.indirizzoEsazione));
    this.supplyAddressAsString = atomWithAddressAsString(this.supplyAddress);
    this.shippingAddressAsString = atomWithAddressAsString(this.shippingAddress);
  }
}
export function isChangeOfferAccount(account) {
  return account instanceof ChangeOfferAccount;
}
class ChangeOfferPowerSupply {
  constructor(data, account) {
    this.data = data;
    this.account = account;
    this.panelBestSize = buildPanelBestSizeAtom(this, this.account.customer.customerCode);
    this.panelCompatible = buildPanelCompatibilityAtom(this);
    this.activePanelsLocations$ = atomWithPanelsLocationAlreadyActive(this, this.data.codiceConto);
    this.productName = this.data.codiceSiebelProdottoPower;
    this.assetCode = atom("TODO DA DOVE LO PRENDO?");
    this.assetId = atom("TODO DA DOVE LO PRENDO?");
    this.consumption = {
      estimatedYear: atom(this.data.consumoAnnuoPower)
    };
    this.contractCode = atom(this.data.codiceContratto);
    this.existing = true;
    this.pdfCode = atom(this.data.codiceConto);
    this.pod = atom(this.data.pod);
    this.checkAsset = atomWithCheckAsset({
      pod: this.pod
    });
    this.assetSiebel = this.data.codiceAssetSiebelPower;
  }
}
class ChangeOfferGasSupply {
  constructor(data, account) {
    this.data = data;
    this.account = account;
    this.productName = this.data.codiceSiebelProdottoGas;
    this.assetCode = atom("NOT_AVAILABLE");
    this.assetId = atom("NOT_AVAILABLE");
    this.consumption = {
      estimatedYear: atom(this.data.consumoAnnuoGas)
    };
    this.contractCode = atom(this.data.codiceContratto);
    this.existing = true;
    this.pdfCode = atom(this.data.codiceConto);
    this.pdr = atom(this.data.pdr);
    this.checkAsset = atomWithCheckAsset({
      pdr: this.pdr
    });
    this.assetSiebel = this.data.codiceAssetSiebelGas;
  }
}

//# sourceMappingURL=data:application/json;base64,