globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, atomWithRetryableQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { getPrivateAreaCommonQuerystring, readPrivateAreaServiceResponse } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
export var StatoPannello = /* @__PURE__ */ ((StatoPannello2) => {
  StatoPannello2["inAttivazione"] = "IN_ATTIVAZIONE";
  StatoPannello2["attivo"] = "ATTIVO";
  StatoPannello2["attivo48ore"] = "ATTIVO_48ORE";
  StatoPannello2["disattivo1mese"] = "DISATTIVO_1MESE";
  StatoPannello2["disattivo6mesi"] = "DISATTIVO_6MESI";
  return StatoPannello2;
})(StatoPannello || {});
async function fetchPanelsForAccounts({
  codiceContoCliente,
  assetCode
}) {
  const URL = `${API}/pannelli-services/v1/accounts/${codiceContoCliente}/supply/${assetCode}/details`;
  const response = await fetch(`${URL}?${getPrivateAreaCommonQuerystring()}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  const json = await readPrivateAreaServiceResponse(response);
  if (response.status === 200) {
    return json;
  }
  throw Error(response.statusText);
}
async function fetchPanelsLocationAlreadyActive(params) {
  const root = await fetchPanelsForAccounts(params);
  return root.panels.filter((p) => !equals(p.state, "DISATTIVO_1MESE" /* disattivo1mese */, "DISATTIVO_6MESI" /* disattivo6mesi */)).map((p) => p.position);
}
export function atomWithPanelsLocationAlreadyActive(supply, accountCode) {
  return atomWithRetryableQuery((get) => {
    const assetCode = get(supply.assetCode);
    if (!assetCode) {
      throw Error("Empty assetCode");
    }
    if (!accountCode) {
      throw Error("Empty accountCode");
    }
    return {
      queryKey: ["PanelsLocationAlreadyActive", assetCode],
      queryFn: () => fetchPanelsLocationAlreadyActive({
        codiceContoCliente: accountCode,
        assetCode
      })
    };
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGNBQWM7QUFFdkIsU0FBU0MsS0FBS0MsOEJBQThCO0FBQzVDLFNBQ0VDLGlDQUNBQyxzQ0FDSztBQXVCQSxXQUFLQyxnQkFBTCxrQkFBS0EsbUJBQUw7QUFFTEMsb0NBQWdCO0FBRWhCQyw2QkFBUztBQUVUQyxrQ0FBYztBQUNkQyxxQ0FBaUI7QUFDakJDLHFDQUFpQjtBQVJQTDtBQUFBQTtBQWdCWixlQUFlTSx1QkFBdUI7QUFBQSxFQUNwQ0M7QUFBQUEsRUFDQUM7QUFDTSxHQUFHO0FBQ1QsUUFBTUMsTUFBTSxHQUFHYixHQUFHLGtDQUFrQ1csa0JBQWtCLFdBQVdDLFNBQVM7QUFFMUYsUUFBTUUsV0FBVyxNQUFNQyxNQUFNLEdBQUdGLEdBQUcsSUFBSVgsZ0NBQWdDLENBQUMsSUFBSTtBQUFBLElBQzFFYyxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1BDLFFBQVE7QUFBQSxJQUNWO0FBQUEsRUFDRixDQUFDO0FBRUQsUUFBTUMsT0FBTyxNQUFNaEIsK0JBQStCVyxRQUFRO0FBQzFELE1BQUlBLFNBQVNNLFdBQVcsS0FBSztBQUMzQixXQUFPRDtBQUFBQSxFQUNUO0FBRUEsUUFBTUUsTUFBTVAsU0FBU1EsVUFBVTtBQUNqQztBQUVBLGVBQWVDLGlDQUFpQ0MsUUFBZ0I7QUFDOUQsUUFBTUMsT0FBTyxNQUFNZix1QkFBdUJjLE1BQU07QUFDaEQsU0FBT0MsS0FBS0MsT0FDVEMsT0FDRUMsT0FDQyxDQUFDN0IsT0FDQzZCLEVBQUVDLE9BQ0Z6Qix3Q0FDQUEsc0NBQ0YsQ0FDSixFQUNDMEIsSUFBS0YsT0FBTUEsRUFBRUcsUUFBUTtBQUMxQjtBQUVPLGdCQUFTQyxvQ0FDZEMsUUFDQUMsYUFDQTtBQUNBLFNBQU9qQyx1QkFBd0JrQyxTQUFRO0FBQ3JDLFVBQU12QixZQUFZdUIsSUFBSUYsT0FBT3JCLFNBQVM7QUFFdEMsUUFBSSxDQUFDQSxXQUFXO0FBQ2QsWUFBTVMsTUFBTSxpQkFBaUI7QUFBQSxJQUMvQjtBQUNBLFFBQUksQ0FBQ2EsYUFBYTtBQUNoQixZQUFNYixNQUFNLG1CQUFtQjtBQUFBLElBQ2pDO0FBRUEsV0FBTztBQUFBLE1BQ0xlLFVBQVUsQ0FBQywrQkFBK0J4QixTQUFTO0FBQUEsTUFDbkR5QixTQUFTQSxNQUNQZCxpQ0FBaUM7QUFBQSxRQUMvQlosb0JBQW9CdUI7QUFBQUEsUUFDcEJ0QjtBQUFBQSxNQUNGLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDRixDQUFDO0FBQ0giLCJuYW1lcyI6WyJlcXVhbHMiLCJBUEkiLCJhdG9tV2l0aFJldHJ5YWJsZVF1ZXJ5IiwiZ2V0UHJpdmF0ZUFyZWFDb21tb25RdWVyeXN0cmluZyIsInJlYWRQcml2YXRlQXJlYVNlcnZpY2VSZXNwb25zZSIsIlN0YXRvUGFubmVsbG8iLCJpbkF0dGl2YXppb25lIiwiYXR0aXZvIiwiYXR0aXZvNDhvcmUiLCJkaXNhdHRpdm8xbWVzZSIsImRpc2F0dGl2bzZtZXNpIiwiZmV0Y2hQYW5lbHNGb3JBY2NvdW50cyIsImNvZGljZUNvbnRvQ2xpZW50ZSIsImFzc2V0Q29kZSIsIlVSTCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwianNvbiIsInN0YXR1cyIsIkVycm9yIiwic3RhdHVzVGV4dCIsImZldGNoUGFuZWxzTG9jYXRpb25BbHJlYWR5QWN0aXZlIiwicGFyYW1zIiwicm9vdCIsInBhbmVscyIsImZpbHRlciIsInAiLCJzdGF0ZSIsIm1hcCIsInBvc2l0aW9uIiwiYXRvbVdpdGhQYW5lbHNMb2NhdGlvbkFscmVhZHlBY3RpdmUiLCJzdXBwbHkiLCJhY2NvdW50Q29kZSIsImdldCIsInF1ZXJ5S2V5IiwicXVlcnlGbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJwYW5lbHNEZXRhaWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVxdWFscyB9IGZyb20gJ0BuYWotd28vdXRpbCc7XHJcbmltcG9ydCB0eXBlIHsgUG93ZXJTdXBwbHkgfSBmcm9tICcuLi8uLi9hdG9tcy90eXBlcyc7XHJcbmltcG9ydCB7IEFQSSwgYXRvbVdpdGhSZXRyeWFibGVRdWVyeSB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHtcclxuICBnZXRQcml2YXRlQXJlYUNvbW1vblF1ZXJ5c3RyaW5nLFxyXG4gIHJlYWRQcml2YXRlQXJlYVNlcnZpY2VSZXNwb25zZSxcclxufSBmcm9tICcuL3V0aWxzJztcclxuXHJcbi8vIHF1ZXN0byDDqCBpbCBzZXJ2aXppbyBwcmluY2lwYWxlIGNoZSByaXNwb25kZSBjb3PDrFxyXG5leHBvcnQgdHlwZSBEZXRhaWxzUGFubmVsbGlMaXN0Um9vdCA9IHtcclxuICBwYW5lbHM6IERldGFpbHNQYW5uZWxsb1Jvb3RbXTtcclxuICBjYXNlNDhIb3VyczogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV0YWlsc1Bhbm5lbGxvUm9vdCB7XHJcbiAgLy8gSWQgZGVsIHBhbm5lbGxvIChleDogJ1hYWCcpXHJcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG4gIC8vIFBvc2l6aW9uZSBkZWwgcGFubmVsbG8gKGV4OiAnUG9ydG8gVG9ycmVzJylcclxuICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gIC8vIFBvdGVuemEgZGVsIHBhbm5lbGxvIChleDogJzAuNScpXHJcbiAgcG93ZXI6IHN0cmluZztcclxuICAvLyBUYWdsaWEgZGVsIHBhbm5lbGxvIChleDogJ0wnKVxyXG4gIHNpemU6IHN0cmluZztcclxuICAvLyBTdGF0byBkZWwgcGFubmVsbG9cclxuICBzdGF0ZTogU3RhdG9QYW5uZWxsbztcclxuICAvLyBEYXRhIGRpIGRpc2F0dGl2YXppb25lIGRlbCBwYW5uZWxsbyAoZXg6IDIwOTktMTItMzEpXHJcbiAgdGVybWluYXRpb25EYXRlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFN0YXRvUGFubmVsbG8ge1xyXG4gIC8vIChOT04gVkVORElCSUxFKVxyXG4gIGluQXR0aXZhemlvbmUgPSAnSU5fQVRUSVZBWklPTkUnLFxyXG4gIC8vIChOT04gVkVORElCSUxFKVxyXG4gIGF0dGl2byA9ICdBVFRJVk8nLFxyXG4gIC8vIChOT04gVkVORElCSUxFKVxyXG4gIGF0dGl2bzQ4b3JlID0gJ0FUVElWT180OE9SRScsXHJcbiAgZGlzYXR0aXZvMW1lc2UgPSAnRElTQVRUSVZPXzFNRVNFJyxcclxuICBkaXNhdHRpdm82bWVzaSA9ICdESVNBVFRJVk9fNk1FU0knLFxyXG59XHJcblxyXG50eXBlIFBhcmFtcyA9IHtcclxuICBjb2RpY2VDb250b0NsaWVudGU6IHN0cmluZztcclxuICBhc3NldENvZGU6IHN0cmluZztcclxufTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGFuZWxzRm9yQWNjb3VudHMoe1xyXG4gIGNvZGljZUNvbnRvQ2xpZW50ZSxcclxuICBhc3NldENvZGUsXHJcbn06IFBhcmFtcykge1xyXG4gIGNvbnN0IFVSTCA9IGAke0FQSX0vcGFubmVsbGktc2VydmljZXMvdjEvYWNjb3VudHMvJHtjb2RpY2VDb250b0NsaWVudGV9L3N1cHBseS8ke2Fzc2V0Q29kZX0vZGV0YWlsc2A7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7VVJMfT8ke2dldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcoKX1gLCB7XHJcbiAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZWFkUHJpdmF0ZUFyZWFTZXJ2aWNlUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgcmV0dXJuIGpzb24gYXMgRGV0YWlsc1Bhbm5lbGxpTGlzdFJvb3Q7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hQYW5lbHNMb2NhdGlvbkFscmVhZHlBY3RpdmUocGFyYW1zOiBQYXJhbXMpIHtcclxuICBjb25zdCByb290ID0gYXdhaXQgZmV0Y2hQYW5lbHNGb3JBY2NvdW50cyhwYXJhbXMpO1xyXG4gIHJldHVybiByb290LnBhbmVsc1xyXG4gICAgLmZpbHRlcihcclxuICAgICAgKHApID0+XHJcbiAgICAgICAgIWVxdWFscyhcclxuICAgICAgICAgIHAuc3RhdGUsXHJcbiAgICAgICAgICBTdGF0b1Bhbm5lbGxvLmRpc2F0dGl2bzFtZXNlLFxyXG4gICAgICAgICAgU3RhdG9QYW5uZWxsby5kaXNhdHRpdm82bWVzaVxyXG4gICAgICAgIClcclxuICAgIClcclxuICAgIC5tYXAoKHApID0+IHAucG9zaXRpb24pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXRvbVdpdGhQYW5lbHNMb2NhdGlvbkFscmVhZHlBY3RpdmUoXHJcbiAgc3VwcGx5OiBQaWNrPFBvd2VyU3VwcGx5LCAnYXNzZXRDb2RlJz4sXHJcbiAgYWNjb3VudENvZGU6IHN0cmluZ1xyXG4pIHtcclxuICByZXR1cm4gYXRvbVdpdGhSZXRyeWFibGVRdWVyeSgoZ2V0KSA9PiB7XHJcbiAgICBjb25zdCBhc3NldENvZGUgPSBnZXQoc3VwcGx5LmFzc2V0Q29kZSk7XHJcblxyXG4gICAgaWYgKCFhc3NldENvZGUpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoJ0VtcHR5IGFzc2V0Q29kZScpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhY2NvdW50Q29kZSkge1xyXG4gICAgICB0aHJvdyBFcnJvcignRW1wdHkgYWNjb3VudENvZGUnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBxdWVyeUtleTogWydQYW5lbHNMb2NhdGlvbkFscmVhZHlBY3RpdmUnLCBhc3NldENvZGVdLFxyXG4gICAgICBxdWVyeUZuOiAoKSA9PlxyXG4gICAgICAgIGZldGNoUGFuZWxzTG9jYXRpb25BbHJlYWR5QWN0aXZlKHtcclxuICAgICAgICAgIGNvZGljZUNvbnRvQ2xpZW50ZTogYWNjb3VudENvZGUsXHJcbiAgICAgICAgICBhc3NldENvZGU6IGFzc2V0Q29kZSxcclxuICAgICAgICB9KSxcclxuICAgIH07XHJcbiAgfSk7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2FwaS9wcml2YXRlLWFyZWEvcGFuZWxzRGV0YWlscy50cyJ9