globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  Segment,
  transferTypeAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
class TransferType extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(9);
    this.WrapperComponent = StepErrorBoundary;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/transfer/TransferTypeStep.tsx");
  }
  toString() {
    return "TipologyTransfer";
  }
  depends() {
    return [];
  }
  provides() {
    return [StepDependencies.TRANSFER_TYPE];
  }
  async isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return operativeMode === OperativeMode.TRANSFER && get(operativeModeEnabled$) && await get(customerSegmentAtom) === Segment.RESID;
  }
  toDo(get) {
    return !get(transferTypeAtom);
  }
}
export const transferType = new TransferType();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxTQUFTQyx3QkFBd0I7QUFDakMsT0FBT0MsdUJBQXVCO0FBRTlCLE1BQU1DLHFCQUFxQkosS0FBSztBQUFBLEVBQWhDO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxDQUFDO0FBQzdCSyw0QkFBbUJIO0FBRW5CSSxnQkFBT0EsTUFBTSxPQUFPLG9CQUFvQjtBQUFBO0FBQUEsRUFFeENDLFdBQVc7QUFDVCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUFDLFVBQVU7QUFDUixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUFDLFdBQVc7QUFDVCxXQUFPLENBQUNSLGlCQUFpQlMsYUFBYTtBQUFBLEVBQ3hDO0FBQUEsRUFFQSxNQUFnQkMsU0FBU0MsS0FBYTtBQUNwQyxVQUFNQyxnQkFBZ0JELElBQUlqQixpQkFBaUI7QUFFM0MsV0FDRWtCLGtCQUFrQm5CLGNBQWNvQixZQUNoQ0YsSUFBSWhCLHFCQUFxQixLQUN4QixNQUFNZ0IsSUFBSW5CLG1CQUFtQixNQUFPSSxRQUFRa0I7QUFBQUEsRUFFakQ7QUFBQSxFQUVVQyxLQUFLSixLQUFhO0FBQzFCLFdBQU8sQ0FBQ0EsSUFBSWQsZ0JBQWdCO0FBQUEsRUFDOUI7QUFDRjtBQUVPLGFBQU1tQixlQUFlLElBQUlkLGFBQWEiLCJuYW1lcyI6WyJjdXN0b21lclNlZ21lbnRBdG9tIiwiT3BlcmF0aXZlTW9kZSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwiU2VnbWVudCIsInRyYW5zZmVyVHlwZUF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcERlcGVuZGVuY2llcyIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiVHJhbnNmZXJUeXBlIiwicHJpb3JpdHkiLCJXcmFwcGVyQ29tcG9uZW50IiwibGF6eSIsInRvU3RyaW5nIiwiZGVwZW5kcyIsInByb3ZpZGVzIiwiVFJBTlNGRVJfVFlQRSIsImlzSW5GbHV4IiwiZ2V0Iiwib3BlcmF0aXZlTW9kZSIsIlRSQU5TRkVSIiwiUkVTSUQiLCJ0b0RvIiwidHJhbnNmZXJUeXBlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInRyYW5zZmVyLXR5cGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgY3VzdG9tZXJTZWdtZW50QXRvbSxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICBTZWdtZW50LFxyXG4gIHRyYW5zZmVyVHlwZUF0b20sXHJcbn0gZnJvbSAnQG5hai13by9kYXRhLWFjY2Vzcyc7XHJcbmltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcbmltcG9ydCBTdGVwRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9TdGVwRXJyb3JCb3VuZGFyeSc7XHJcblxyXG5jbGFzcyBUcmFuc2ZlclR5cGUgZXh0ZW5kcyBTdGVwIHtcclxuICBwcmlvcml0eSA9IG5ldyBTdGVwUHJpb3JpdHkoOSk7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL1RyYW5zZmVyVHlwZVN0ZXAnKTtcclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJ1RpcG9sb2d5VHJhbnNmZXInO1xyXG4gIH1cclxuXHJcbiAgZGVwZW5kcygpIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtTdGVwRGVwZW5kZW5jaWVzLlRSQU5TRkVSX1RZUEVdO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICBjb25zdCBvcGVyYXRpdmVNb2RlID0gZ2V0KG9wZXJhdGl2ZU1vZGVBdG9tKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBvcGVyYXRpdmVNb2RlID09PSBPcGVyYXRpdmVNb2RlLlRSQU5TRkVSICYmXHJcbiAgICAgIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlJFU0lEXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHRvRG8oZ2V0OiBHZXR0ZXIpIHtcclxuICAgIHJldHVybiAhZ2V0KHRyYW5zZmVyVHlwZUF0b20pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRyYW5zZmVyVHlwZSA9IG5ldyBUcmFuc2ZlclR5cGUoKTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9zdGVwcy9zcmMvbGliL3RyYW5zZmVyL3RyYW5zZmVyLXR5cGUudHN4In0=