globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { saveToUrl } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { customerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { billType$, paymentType$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/paymentType$.ts";
import { atomAction } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
export const autoUpdateSearchParamsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\desiredSearchParams.ts/autoUpdateSearchParamsAtom", atomAction(async (get) => {
  const product = get(workingProductAtom);
  const searchParams = new URLSearchParams(document.location.search);
  saveToUrl({
    commodities: {
      gas: product?.commodity?.gas,
      power: product?.commodity?.power,
      operativeMode: product?.operativeMode,
      bill: await get(billType$),
      payment: await get(paymentType$)
    },
    segment: await get(customerSegmentAtom)
  }, searchParams);
  window.history.replaceState({}, "", `${window.location.pathname}?${searchParams.toString()}`);
}));
autoUpdateSearchParamsAtom.debugLabel = "autoUpdateSearchParamsAtom";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGlCQUFpQjtBQUMxQixTQUFTQywwQkFBMEI7QUFDbkMsU0FBU0MsMkJBQTJCO0FBQ3BDLFNBQVNDLFdBQVdDLG9CQUFvQjtBQUN4QyxTQUFTQyxrQkFBa0I7QUFFM0IsYUFBQUMsNkJBQUFDLFdBQUFDLGVBQUFDLElBQUEsa0pBQTBDSixXQUFXLE9BQU9JLFFBQVE7QUFDbEUsUUFBTUMsVUFBVUQsSUFBSVIsa0JBQWtCO0FBRXRDLFFBQU1VLGVBQWUsSUFBSUMsZ0JBQWdCQyxTQUFTQyxTQUFTQyxNQUFNO0FBQ2pFZixZQUNFO0FBQUEsSUFDRWdCLGFBQWE7QUFBQSxNQUNYQyxLQUFLUCxTQUFTUSxXQUFXRDtBQUFBQSxNQUN6QkUsT0FBT1QsU0FBU1EsV0FBV0M7QUFBQUEsTUFDM0JDLGVBQWVWLFNBQVNVO0FBQUFBLE1BQ3hCQyxNQUFNLE1BQU1aLElBQUlOLFNBQVM7QUFBQSxNQUN6Qm1CLFNBQVMsTUFBTWIsSUFBSUwsWUFBWTtBQUFBLElBQ2pDO0FBQUEsSUFDQW1CLFNBQVMsTUFBTWQsSUFBSVAsbUJBQW1CO0FBQUEsRUFDeEMsR0FDQVMsWUFDRjtBQUVBYSxTQUFPQyxRQUFRQyxhQUNiLENBQUMsR0FDRCxJQUNBLEdBQUdGLE9BQU9WLFNBQVNhLFFBQVEsSUFBSWhCLGFBQWFpQixTQUFTLENBQUMsRUFDeEQ7QUFDRixDQUFDLENBQUM7QUFBQ3RCLDJCQUFBdUIsYUFBQSIsIm5hbWVzIjpbInNhdmVUb1VybCIsIndvcmtpbmdQcm9kdWN0QXRvbSIsImN1c3RvbWVyU2VnbWVudEF0b20iLCJiaWxsVHlwZSQiLCJwYXltZW50VHlwZSQiLCJhdG9tQWN0aW9uIiwiYXV0b1VwZGF0ZVNlYXJjaFBhcmFtc0F0b20iLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJwcm9kdWN0Iiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsInNlYXJjaCIsImNvbW1vZGl0aWVzIiwiZ2FzIiwiY29tbW9kaXR5IiwicG93ZXIiLCJvcGVyYXRpdmVNb2RlIiwiYmlsbCIsInBheW1lbnQiLCJzZWdtZW50Iiwid2luZG93IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInBhdGhuYW1lIiwidG9TdHJpbmciLCJkZWJ1Z0xhYmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImRlc2lyZWRTZWFyY2hQYXJhbXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2F2ZVRvVXJsIH0gZnJvbSAnLi9zdGF0ZS11cmwnO1xyXG5pbXBvcnQgeyB3b3JraW5nUHJvZHVjdEF0b20gfSBmcm9tICcuL3Ryb3VibGVzaG9vdGluZyc7XHJcbmltcG9ydCB7IGN1c3RvbWVyU2VnbWVudEF0b20gfSBmcm9tICcuLi9hdG9tcy9jdXN0b21lci1hdG9tcyc7XHJcbmltcG9ydCB7IGJpbGxUeXBlJCwgcGF5bWVudFR5cGUkIH0gZnJvbSAnLi9wYXltZW50VHlwZSQnO1xyXG5pbXBvcnQgeyBhdG9tQWN0aW9uIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuXHJcbmV4cG9ydCBjb25zdCBhdXRvVXBkYXRlU2VhcmNoUGFyYW1zQXRvbSA9IGF0b21BY3Rpb24oYXN5bmMgKGdldCkgPT4ge1xyXG4gIGNvbnN0IHByb2R1Y3QgPSBnZXQod29ya2luZ1Byb2R1Y3RBdG9tKTtcclxuXHJcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gIHNhdmVUb1VybChcclxuICAgIHtcclxuICAgICAgY29tbW9kaXRpZXM6IHtcclxuICAgICAgICBnYXM6IHByb2R1Y3Q/LmNvbW1vZGl0eT8uZ2FzLFxyXG4gICAgICAgIHBvd2VyOiBwcm9kdWN0Py5jb21tb2RpdHk/LnBvd2VyLFxyXG4gICAgICAgIG9wZXJhdGl2ZU1vZGU6IHByb2R1Y3Q/Lm9wZXJhdGl2ZU1vZGUsXHJcbiAgICAgICAgYmlsbDogYXdhaXQgZ2V0KGJpbGxUeXBlJCksXHJcbiAgICAgICAgcGF5bWVudDogYXdhaXQgZ2V0KHBheW1lbnRUeXBlJCksXHJcbiAgICAgIH0sXHJcbiAgICAgIHNlZ21lbnQ6IGF3YWl0IGdldChjdXN0b21lclNlZ21lbnRBdG9tKSxcclxuICAgIH0sXHJcbiAgICBzZWFyY2hQYXJhbXNcclxuICApO1xyXG5cclxuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXHJcbiAgICB7fSxcclxuICAgICcnLFxyXG4gICAgYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfT8ke3NlYXJjaFBhcmFtcy50b1N0cmluZygpfWBcclxuICApO1xyXG59KTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL3Ryb3VibGVzaG9vdGluZy9kZXNpcmVkU2VhcmNoUGFyYW1zLnRzIn0=