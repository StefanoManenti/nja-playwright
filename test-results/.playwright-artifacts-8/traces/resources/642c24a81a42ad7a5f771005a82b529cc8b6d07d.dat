globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  Segment,
  workingOnBroadbandAtom,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class Address extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(15);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/address/AddressStep.tsx?t=1754037874129");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "address";
  }
  async isInFlux(get) {
    return get(operativeModeAtom) !== OperativeMode.CHANGE_OFFER && !get(workingOnPanelStandaloneAtom) && (get(workingOnBroadbandAtom) || get(operativeModeEnabled$)) && await get(customerSegmentAtom) === Segment.RESID;
  }
  depends() {
    return [];
  }
  provides() {
    return [StepDependencies.ADDRESS, StepDependencies.SUPPLY_ADDRESS];
  }
}
export const address = new Address();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLGdCQUFnQkosS0FBSztBQUFBLEVBQTNCO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxFQUFFO0FBRTlCSyxnQkFBT0EsTUFBTSxPQUFPLGVBQWU7QUFDbkNDLDRCQUFtQkw7QUFBQUE7QUFBQUEsRUFFbkJNLFdBQVc7QUFDVCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsTUFBZ0JDLFNBQVNDLEtBQWE7QUFDcEMsV0FDRUEsSUFBSWYsaUJBQWlCLE1BQU1ELGNBQWNpQixnQkFDekMsQ0FBQ0QsSUFBSVgsNEJBQTRCLE1BQ2hDVyxJQUFJWixzQkFBc0IsS0FBS1ksSUFBSWQscUJBQXFCLE1BQ3hELE1BQU1jLElBQUlqQixtQkFBbUIsTUFBT0ksUUFBUWU7QUFBQUEsRUFFakQ7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxXQUFXO0FBQ1QsV0FBTyxDQUFDWCxpQkFBaUJZLFNBQVNaLGlCQUFpQmEsY0FBYztBQUFBLEVBQ25FO0FBQ0Y7QUFFTyxhQUFNQyxVQUFVLElBQUliLFFBQVEiLCJuYW1lcyI6WyJjdXN0b21lclNlZ21lbnRBdG9tIiwiT3BlcmF0aXZlTW9kZSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwiU2VnbWVudCIsIndvcmtpbmdPbkJyb2FkYmFuZEF0b20iLCJ3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tIiwiU3RlcCIsIlN0ZXBQcmlvcml0eSIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiU3RlcERlcGVuZGVuY2llcyIsIkFkZHJlc3MiLCJwcmlvcml0eSIsImxhenkiLCJXcmFwcGVyQ29tcG9uZW50IiwidG9TdHJpbmciLCJpc0luRmx1eCIsImdldCIsIkNIQU5HRV9PRkZFUiIsIlJFU0lEIiwiZGVwZW5kcyIsInByb3ZpZGVzIiwiQUREUkVTUyIsIlNVUFBMWV9BRERSRVNTIiwiYWRkcmVzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJhZGRyZXNzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGN1c3RvbWVyU2VnbWVudEF0b20sXHJcbiAgT3BlcmF0aXZlTW9kZSxcclxuICBvcGVyYXRpdmVNb2RlQXRvbSxcclxuICBvcGVyYXRpdmVNb2RlRW5hYmxlZCQsXHJcbiAgU2VnbWVudCxcclxuICB3b3JraW5nT25Ccm9hZGJhbmRBdG9tLFxyXG4gIHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20sXHJcbn0gZnJvbSAnQG5hai13by9kYXRhLWFjY2Vzcyc7XHJcbmltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQgU3RlcEVycm9yQm91bmRhcnkgZnJvbSAnLi4vU3RlcEVycm9yQm91bmRhcnknO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcblxyXG5jbGFzcyBBZGRyZXNzIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDE1KTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9BZGRyZXNzU3RlcCcpO1xyXG4gIFdyYXBwZXJDb21wb25lbnQgPSBTdGVwRXJyb3JCb3VuZGFyeTtcclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJ2FkZHJlc3MnO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUF0b20pICE9PSBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUiAmJlxyXG4gICAgICAhZ2V0KHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20pICYmXHJcbiAgICAgIChnZXQod29ya2luZ09uQnJvYWRiYW5kQXRvbSkgfHwgZ2V0KG9wZXJhdGl2ZU1vZGVFbmFibGVkJCkpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlJFU0lEXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVwZW5kcygpIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtTdGVwRGVwZW5kZW5jaWVzLkFERFJFU1MsIFN0ZXBEZXBlbmRlbmNpZXMuU1VQUExZX0FERFJFU1NdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFkZHJlc3MgPSBuZXcgQWRkcmVzcygpO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL3N0ZXBzL3NyYy9saWIvYWRkcmVzcy9hZGRyZXNzLnRzeCJ9