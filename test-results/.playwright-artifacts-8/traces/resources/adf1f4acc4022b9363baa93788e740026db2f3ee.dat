globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { mapPower } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/offers/src/adapters/power.adapter.ts";
import { mapGas } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/offers/src/adapters/gas.adapter.ts";
import { applyDiscount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/offers/src/lib/digital-discount.ts";
const pristineValues = /* @__PURE__ */ new Map();
export function generaCorrispettivi(json, opzioni = {}) {
  const {
    body
  } = json;
  const cacheKey = body.code;
  if (!pristineValues.has(cacheKey)) {
    pristineValues.set(cacheKey, {
      power: deepClone(body.power),
      gas: deepClone(body.gas)
    });
  }
  const original = pristineValues.get(cacheKey);
  const powerOrig = deepClone(original.power);
  const gasOrig = deepClone(original.gas);
  const power = mapPower(powerOrig, opzioni.tariffSelected);
  const gas = mapGas(gasOrig, opzioni.tariffSelected);
  if (power.tariffs_template === "PLACET" || gas.tariffs_template === "PLACET") {
    return null;
  }
  const digitalFactor = getDigitalFactor(body.discounts, opzioni.billSelected);
  const directDebitFactor = getDirectDebitFactor(body.discounts, opzioni.paymentSelected);
  if (digitalFactor) {
    applyDiscount(power, digitalFactor);
    applyDiscount(gas, digitalFactor);
  }
  if (directDebitFactor) {
    applyDiscount(power, directDebitFactor);
    applyDiscount(gas, directDebitFactor);
  }
  return {
    name: body.name,
    code: body.code,
    channel: body.channel,
    touchpoint: body.touchpoint,
    payments: filterByOption(body.payments, opzioni.paymentSelected),
    bills: filterByOption(body.bills, opzioni.billSelected),
    costs: !body.costs || !body.costs.change_offer ? {
      change_offer: "0"
    } : body.costs,
    power,
    gas
  };
}
function filterByOption(list, pick) {
  if (!pick) return list || [];
  if (!list) return [];
  return list.includes(pick) ? [pick] : [];
}
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}
function getDigitalFactor(discounts, billSelected) {
  if (billSelected !== "DIGITAL") return null;
  const found = discounts.find((d) => d.type === "digital");
  if (!found) return null;
  const factor = +found.value.replace(",", ".");
  return Number.isFinite(factor) ? factor : null;
}
function getDirectDebitFactor(discounts, paymentSelected) {
  if (paymentSelected !== "DIRECT") return null;
  const found = discounts.find((d) => d.type === "direct_debit");
  if (!found) return null;
  const factor = +found.value.replace(",", ".");
  return Number.isFinite(factor) ? factor : null;
}

//# sourceMappingURL=data:application/json;base64,