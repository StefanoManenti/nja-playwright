globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { offer$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/products-collection/index.ts";
import { fetchVasInterattivo } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/vas.ts";
import { offerIdAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { atomWithRetryableQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { loggedUserLoyaltyAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/customer/index.ts";
import { getPlenitudeHref } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
export const offerSegmentAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/offerSegmentAtom", atom(async (get) => {
  return (await get(offer$))?.segment;
}));
offerSegmentAtom.debugLabel = "offerSegmentAtom";
export const isPerNoiAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/isPerNoiAtom", atom((get) => get(offerIdAtom).code === "BASE_LXNOIV-GXNOIV"));
isPerNoiAtom.debugLabel = "isPerNoiAtom";
export const offerWithEmployeeLogin = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/offerWithEmployeeLogin", atom((get) => {
  const {
    channel,
    touchpoint
  } = get(offerIdAtom);
  return channel.startsWith("DPEN2EGP") && touchpoint.endsWith("RE");
}));
offerWithEmployeeLogin.debugLabel = "offerWithEmployeeLogin";
export const domiciliationMandatory$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/domiciliationMandatory$", atom(async (get) => {
  const paymentTypes = (await get(offer$))?.payments;
  return paymentTypes?.length === 1 && paymentTypes[0] === "DIRECT";
}));
domiciliationMandatory$.debugLabel = "domiciliationMandatory$";
export const digitalBillMandatory$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/digitalBillMandatory$", atom(async (get) => {
  const billTypes = (await get(offer$))?.bills;
  return billTypes?.length === 1 && billTypes[0] === "DIGITAL";
}));
digitalBillMandatory$.debugLabel = "digitalBillMandatory$";
export const isOfferForVulnerableUsers = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/isOfferForVulnerableUsers", atom((get) => {
  return !!get(offerIdAtom).code.match(/(TRVULN)/);
}));
isOfferForVulnerableUsers.debugLabel = "isOfferForVulnerableUsers";
export const shouldFetchVasAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/shouldFetchVasAtom", atom((get) => {
  const {
    touchpoint
  } = get(offerIdAtom);
  return touchpoint === "CV";
}));
shouldFetchVasAtom.debugLabel = "shouldFetchVasAtom";
export const vasInfo$ = atomWithRetryableQuery(async (get) => {
  const {
    channel,
    touchpoint
  } = get(offerIdAtom);
  return {
    queryKey: ["vas", channel],
    queryFn: () => fetchVasInterattivo({
      codiceCanale: channel,
      codiceTpCanale: touchpoint
    })
  };
});
export const vasValues$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/vasValues$", atom());
vasValues$.debugLabel = "vasValues$";
export const offersChecksAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\offer-atoms.ts/offersChecksAtom", atom(async (get) => {
  if (get(offerIdAtom).code === "BASE_PANNELLO_INSIEME") {
    const customerHasLoyalty = await get(loggedUserLoyaltyAtom);
    if (!customerHasLoyalty) {
      window.location.replace(getPlenitudeHref("/landing/adotta-un-pannello-insieme/adotta-un-pannello-accesso"));
    }
  }
}));
offersChecksAtom.debugLabel = "offersChecksAtom";

//# sourceMappingURL=data:application/json;base64,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QUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDLENBQUM7QUFBQzhCLGlCQUFBeEIsYUFBQSIsIm5hbWVzIjpbImF0b20iLCJvZmZlciQiLCJmZXRjaFZhc0ludGVyYXR0aXZvIiwib2ZmZXJJZEF0b20iLCJhdG9tV2l0aFJldHJ5YWJsZVF1ZXJ5IiwibG9nZ2VkVXNlckxveWFsdHlBdG9tIiwiZ2V0UGxlbml0dWRlSHJlZiIsIm9mZmVyU2VnbWVudEF0b20iLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJzZWdtZW50IiwiZGVidWdMYWJlbCIsImlzUGVyTm9pQXRvbSIsImNvZGUiLCJvZmZlcldpdGhFbXBsb3llZUxvZ2luIiwiY2hhbm5lbCIsInRvdWNocG9pbnQiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJkb21pY2lsaWF0aW9uTWFuZGF0b3J5JCIsInBheW1lbnRUeXBlcyIsInBheW1lbnRzIiwibGVuZ3RoIiwiZGlnaXRhbEJpbGxNYW5kYXRvcnkkIiwiYmlsbFR5cGVzIiwiYmlsbHMiLCJpc09mZmVyRm9yVnVsbmVyYWJsZVVzZXJzIiwibWF0Y2giLCJzaG91bGRGZXRjaFZhc0F0b20iLCJ2YXNJbmZvJCIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsImNvZGljZUNhbmFsZSIsImNvZGljZVRwQ2FuYWxlIiwidmFzVmFsdWVzJCIsIm9mZmVyc0NoZWNrc0F0b20iLCJjdXN0b21lckhhc0xveWFsdHkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcGxhY2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsib2ZmZXItYXRvbXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgb2ZmZXIkIH0gZnJvbSAnLi4vYXBpL3Byb2R1Y3RzLWNvbGxlY3Rpb24nO1xyXG5pbXBvcnQgeyBmZXRjaFZhc0ludGVyYXR0aXZvIH0gZnJvbSAnLi4vYXBpL3dlYm9yZGVyL3Zhcyc7XHJcbmltcG9ydCB7IG9mZmVySWRBdG9tIH0gZnJvbSAnLi4vdHJvdWJsZXNob290aW5nL2F0b21zJztcclxuaW1wb3J0IHsgYXRvbVdpdGhSZXRyeWFibGVRdWVyeSB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgbG9nZ2VkVXNlckxveWFsdHlBdG9tIH0gZnJvbSAnLi4vYXBpL2N1c3RvbWVyJztcclxuaW1wb3J0IHsgZ2V0UGxlbml0dWRlSHJlZiB9IGZyb20gJ0BuYWotd28vdXRpbCc7XHJcblxyXG5leHBvcnQgY29uc3Qgb2ZmZXJTZWdtZW50QXRvbSA9IGF0b20oYXN5bmMgKGdldCkgPT4ge1xyXG4gIHJldHVybiAoYXdhaXQgZ2V0KG9mZmVyJCkpPy5zZWdtZW50O1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc1Blck5vaUF0b20gPSBhdG9tKFxyXG4gIChnZXQpID0+IGdldChvZmZlcklkQXRvbSkuY29kZSA9PT0gJ0JBU0VfTFhOT0lWLUdYTk9JVidcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBvZmZlcldpdGhFbXBsb3llZUxvZ2luID0gYXRvbSgoZ2V0KSA9PiB7XHJcbiAgY29uc3QgeyBjaGFubmVsLCB0b3VjaHBvaW50IH0gPSBnZXQob2ZmZXJJZEF0b20pO1xyXG4gIHJldHVybiBjaGFubmVsLnN0YXJ0c1dpdGgoJ0RQRU4yRUdQJykgJiYgdG91Y2hwb2ludC5lbmRzV2l0aCgnUkUnKTtcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgZG9taWNpbGlhdGlvbk1hbmRhdG9yeSQgPSBhdG9tKGFzeW5jIChnZXQpID0+IHtcclxuICBjb25zdCBwYXltZW50VHlwZXMgPSAoYXdhaXQgZ2V0KG9mZmVyJCkpPy5wYXltZW50cztcclxuICByZXR1cm4gcGF5bWVudFR5cGVzPy5sZW5ndGggPT09IDEgJiYgcGF5bWVudFR5cGVzWzBdID09PSAnRElSRUNUJztcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgZGlnaXRhbEJpbGxNYW5kYXRvcnkkID0gYXRvbShhc3luYyAoZ2V0KSA9PiB7XHJcbiAgY29uc3QgYmlsbFR5cGVzID0gKGF3YWl0IGdldChvZmZlciQpKT8uYmlsbHM7XHJcbiAgcmV0dXJuIGJpbGxUeXBlcz8ubGVuZ3RoID09PSAxICYmIGJpbGxUeXBlc1swXSA9PT0gJ0RJR0lUQUwnO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc09mZmVyRm9yVnVsbmVyYWJsZVVzZXJzID0gYXRvbSgoZ2V0KSA9PiB7XHJcbiAgcmV0dXJuICEhZ2V0KG9mZmVySWRBdG9tKS5jb2RlLm1hdGNoKC8oVFJWVUxOKS8pO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBzaG91bGRGZXRjaFZhc0F0b20gPSBhdG9tKChnZXQpID0+IHtcclxuICBjb25zdCB7IHRvdWNocG9pbnQgfSA9IGdldChvZmZlcklkQXRvbSk7XHJcbiAgcmV0dXJuIHRvdWNocG9pbnQgPT09ICdDVic7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHZhc0luZm8kID0gYXRvbVdpdGhSZXRyeWFibGVRdWVyeShhc3luYyAoZ2V0KSA9PiB7XHJcbiAgY29uc3QgeyBjaGFubmVsLCB0b3VjaHBvaW50IH0gPSBnZXQob2ZmZXJJZEF0b20pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcXVlcnlLZXk6IFsndmFzJywgY2hhbm5lbF0sXHJcbiAgICBxdWVyeUZuOiAoKSA9PlxyXG4gICAgICBmZXRjaFZhc0ludGVyYXR0aXZvKHtcclxuICAgICAgICBjb2RpY2VDYW5hbGU6IGNoYW5uZWwsXHJcbiAgICAgICAgY29kaWNlVHBDYW5hbGU6IHRvdWNocG9pbnQsXHJcbiAgICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZXhwb3J0IHR5cGUgVmFzVmFsdWVzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuZXhwb3J0IGNvbnN0IHZhc1ZhbHVlcyQgPSBhdG9tPFZhc1ZhbHVlcz4oKTtcclxuXHJcbmV4cG9ydCBjb25zdCBvZmZlcnNDaGVja3NBdG9tID0gYXRvbShhc3luYyAoZ2V0KSA9PiB7XHJcbiAgaWYgKGdldChvZmZlcklkQXRvbSkuY29kZSA9PT0gJ0JBU0VfUEFOTkVMTE9fSU5TSUVNRScpIHtcclxuICAgIGNvbnN0IGN1c3RvbWVySGFzTG95YWx0eSA9IGF3YWl0IGdldChsb2dnZWRVc2VyTG95YWx0eUF0b20pO1xyXG4gICAgaWYgKCFjdXN0b21lckhhc0xveWFsdHkpIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoXHJcbiAgICAgICAgZ2V0UGxlbml0dWRlSHJlZihcclxuICAgICAgICAgICcvbGFuZGluZy9hZG90dGEtdW4tcGFubmVsbG8taW5zaWVtZS9hZG90dGEtdW4tcGFubmVsbG8tYWNjZXNzbydcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2F0b21zL29mZmVyLWF0b21zLnRzIn0=