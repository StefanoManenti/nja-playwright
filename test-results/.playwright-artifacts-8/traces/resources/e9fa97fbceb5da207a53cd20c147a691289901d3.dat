globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithSuspenseQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai-tanstack-query.js?v=0189a8d1";
import { API } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { getPrivateAreaCommonQuerystring, readPrivateAreaServiceResponse } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
async function fetchListaForniture(codiceConto) {
  const response = await fetch(`${API}/contiServices/conti/${codiceConto}/lista-forniture?${getPrivateAreaCommonQuerystring()}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  const json = await readPrivateAreaServiceResponse(response);
  if (response.status === 200) {
    return json.fornitura;
  }
  throw Error(response.statusText);
}
export const buildListaFornitureServiceAtom = (codiceConto) => {
  const atom1 = atomWithSuspenseQuery(() => ({
    queryKey: ["lista-forniture", codiceConto],
    queryFn: ({
      queryKey: [, codiceConto2]
    }) => fetchListaForniture(codiceConto2)
  }));
  return atom(async (get) => {
    const {
      data
    } = await get(atom1);
    return data;
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFDckIsU0FBU0MsNkJBQTZCO0FBQ3RDLFNBQVNDLFdBQVc7QUFDcEIsU0FDRUMsaUNBQ0FDLHNDQUNLO0FBbUNQLGVBQWVDLG9CQUFvQkMsYUFBaUM7QUFDbEUsUUFBTUMsV0FBVyxNQUFNQyxNQUNyQixHQUFHTixHQUFHLHdCQUF3QkksV0FBVyxvQkFBb0JILGdDQUFnQyxDQUFDLElBQzlGO0FBQUEsSUFDRU0sUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQQyxRQUFRO0FBQUEsSUFDVjtBQUFBLEVBQ0YsQ0FDRjtBQUVBLFFBQU1DLE9BQU8sTUFBTVIsK0JBQStCRyxRQUFRO0FBQzFELE1BQUlBLFNBQVNNLFdBQVcsS0FBSztBQUMzQixXQUFPRCxLQUFLRTtBQUFBQSxFQUNkO0FBRUEsUUFBTUMsTUFBTVIsU0FBU1MsVUFBVTtBQUNqQztBQUVPLGFBQU1DLGlDQUFpQ0EsQ0FBQ1gsZ0JBQXdCO0FBQ3JFLFFBQU1ZLFFBQVFqQixzQkFBc0IsT0FBTztBQUFBLElBQ3pDa0IsVUFBVSxDQUFDLG1CQUFtQmIsV0FBVztBQUFBLElBQ3pDYyxTQUFTQSxDQUFDO0FBQUEsTUFBRUQsVUFBVSxHQUFHYixZQUFXO0FBQUEsSUFBRSxNQUNwQ0Qsb0JBQW9CQyxZQUFXO0FBQUEsRUFDbkMsRUFBRTtBQUVGLFNBQU9OLEtBQUssT0FBT3FCLFFBQVE7QUFDekIsVUFBTTtBQUFBLE1BQUVDO0FBQUFBLElBQUssSUFBSSxNQUFNRCxJQUFJSCxLQUFLO0FBQ2hDLFdBQU9JO0FBQUFBLEVBQ1QsQ0FBQztBQUNIIiwibmFtZXMiOlsiYXRvbSIsImF0b21XaXRoU3VzcGVuc2VRdWVyeSIsIkFQSSIsImdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmciLCJyZWFkUHJpdmF0ZUFyZWFTZXJ2aWNlUmVzcG9uc2UiLCJmZXRjaExpc3RhRm9ybml0dXJlIiwiY29kaWNlQ29udG8iLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsImpzb24iLCJzdGF0dXMiLCJmb3JuaXR1cmEiLCJFcnJvciIsInN0YXR1c1RleHQiLCJidWlsZExpc3RhRm9ybml0dXJlU2VydmljZUF0b20iLCJhdG9tMSIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsImdldCIsImRhdGEiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsibGlzdGEtZm9ybml0dXJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7IGF0b21XaXRoU3VzcGVuc2VRdWVyeSB9IGZyb20gJ2pvdGFpLXRhbnN0YWNrLXF1ZXJ5JztcclxuaW1wb3J0IHsgQVBJIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcsXHJcbiAgcmVhZFByaXZhdGVBcmVhU2VydmljZVJlc3BvbnNlLFxyXG59IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JuaXR1cmEge1xyXG4gIGFzc2V0SWQ6IHN0cmluZztcclxuICBjYXA6IHN0cmluZztcclxuICBjZXNzYWJpbGU/OiBib29sZWFuO1xyXG4gIGNvZGljZVBkZjogc3RyaW5nO1xyXG4gIGNvbnN1bW9QcmV2aXN0bzogbnVtYmVyO1xyXG4gIGRhdGFGaW5lVmFsaWRpdGFDRT86IHN0cmluZztcclxuICBkYXRhSW5pemlvVmFsaWRpdGFDRT86IHN0cmluZztcclxuICBkZXNjcml6aW9uZUluZGlyaXp6bzogc3RyaW5nO1xyXG4gIGZsYWdNaWRvcmk6IGJvb2xlYW47XHJcbiAgZm9ybml0dXJhOiBzdHJpbmc7XHJcbiAgaW5kaXJpenpvRm9ybml0dXJhOiBzdHJpbmc7XHJcbiAgbG9jYWxpdGE6IHN0cmluZztcclxuICBtYXRyaWNvbGFDb250YXRvcmU6IHN0cmluZztcclxuICBudW1lcm9DaXZpY286IHN0cmluZztcclxuICBudW1lcm9Db250cmF0dG86IHN0cmluZztcclxuICBwb2Q/OiBzdHJpbmc7XHJcbiAgcGRyPzogc3RyaW5nO1xyXG4gIHBvZFBkcjogc3RyaW5nO1xyXG4gIHByb2RvdHRvOiBzdHJpbmc7XHJcbiAgc2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgdGlwbzogc3RyaW5nO1xyXG4gIHRpcG9NZXJjYXRvPzogc3RyaW5nO1xyXG4gIHRpcG9Db250YXRvcmU/OiBzdHJpbmc7XHJcbiAgdGlwb1V0ZW50ZTogc3RyaW5nO1xyXG4gIHRpcG9sb2dpYU9mZmVydGE/OiBzdHJpbmc7XHJcbiAgdG9wb25vbWFzdGljYTogc3RyaW5nO1xyXG4gIHV0aWxpenpvPzogc3RyaW5nO1xyXG4gIGFzc2V0Q29kZT86IHN0cmluZztcclxuICBjZVNjYWR1dGU/OiBib29sZWFuO1xyXG4gIHN0YXR1cz86IHN0cmluZztcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hMaXN0YUZvcm5pdHVyZShjb2RpY2VDb250bzogdW5kZWZpbmVkIHwgc3RyaW5nKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke0FQSX0vY29udGlTZXJ2aWNlcy9jb250aS8ke2NvZGljZUNvbnRvfS9saXN0YS1mb3JuaXR1cmU/JHtnZXRQcml2YXRlQXJlYUNvbW1vblF1ZXJ5c3RyaW5nKCl9YCxcclxuICAgIHtcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZWFkUHJpdmF0ZUFyZWFTZXJ2aWNlUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgcmV0dXJuIGpzb24uZm9ybml0dXJhIGFzIEZvcm5pdHVyYVtdO1xyXG4gIH1cclxuXHJcbiAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBidWlsZExpc3RhRm9ybml0dXJlU2VydmljZUF0b20gPSAoY29kaWNlQ29udG86IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGF0b20xID0gYXRvbVdpdGhTdXNwZW5zZVF1ZXJ5KCgpID0+ICh7XHJcbiAgICBxdWVyeUtleTogWydsaXN0YS1mb3JuaXR1cmUnLCBjb2RpY2VDb250b10sXHJcbiAgICBxdWVyeUZuOiAoeyBxdWVyeUtleTogWywgY29kaWNlQ29udG9dIH0pID0+XHJcbiAgICAgIGZldGNoTGlzdGFGb3JuaXR1cmUoY29kaWNlQ29udG8pLFxyXG4gIH0pKTtcclxuXHJcbiAgcmV0dXJuIGF0b20oYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBnZXQoYXRvbTEpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSk7XHJcbn07XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hcGkvcHJpdmF0ZS1hcmVhL2xpc3RhLWZvcm5pdHVyZS50cyJ9