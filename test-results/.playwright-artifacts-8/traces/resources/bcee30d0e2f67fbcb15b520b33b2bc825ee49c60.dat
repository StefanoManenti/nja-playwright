globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
const MATCH_POWER = /(LUCE|ENERGIA|24h)/i;
const MATCH_GAS = /GAS/i;
const MATCH_ENERGIA_VERDE = /^Energia verde$/i;
const MATCH_GAS_VERDE = /^Gas con CO. compensata/i;
const MATCH_SCONTO_IN_BOLLETTA = /SCONTO IN BOLLETTA/i;
const TOOLTIP_ENERGIA_VERDE = "Energia elettrica certificata tramite garanzie di origine di provenienza europea – come immessa in rete e prodotta da impianti alimentati al 100% da fonti rinnovabili.";
const TOOLTIP_GAS_VERDE = "Plenitude finanzia progetti di conservazione acquistando crediti di carbonio per compensare la CO₂ prodotta dal consumo domestico di gas.";
const TOOLTIP_ENERGIA_BUSINESS = "Se hai un contatore di nuova generazione, in grado di leggere i consumi per le fasce orarie (F1, F2, F3), ti verrà applicata la tariffa trioraria. In caso contrario la tariffa applicata sarà quella monoraria.";
export function transformCorrispettivi({
  prices,
  discounts
}) {
  const power = [];
  const gas = [];
  let lastInserted = null;
  for (const {
    rows,
    extra
  } of prices) {
    let addLine = -1;
    for (const row of rows.concat(extra ?? [])) {
      const isPower = row.name.main.match(MATCH_POWER);
      const isGas = row.name.main.match(MATCH_GAS);
      const isScontoInBolletta = row.name.main.match(MATCH_SCONTO_IN_BOLLETTA);
      if (isPower) {
        lastInserted = power;
        power.push({
          ...row,
          name: {
            ...row.name,
            main: row.name.main.replace(/^LUCE 24h/, "Corrispettivo importo").replace(/^LUCE/, "Corrispettivi").replace(MATCH_ENERGIA_VERDE, "Energia verde"),
            tooltip: row.name.main.match(MATCH_ENERGIA_VERDE) ? TOOLTIP_ENERGIA_VERDE : row.name.tooltip
          }
        });
        if (row.name.main === "24h") {
          addLine = 2;
        }
        if (row.name.main === "LUCE F3") {
          addLine = 2;
        }
      } else if (isGas) {
        lastInserted = gas;
        gas.push({
          ...row,
          name: {
            ...row.name,
            main: row.name.main.replace(/^GAS$/, "Corrispettivo importo"),
            tooltip: row.name.main.match(MATCH_GAS_VERDE) ? TOOLTIP_GAS_VERDE : row.name.tooltip
          }
        });
      } else if (isScontoInBolletta) {
        discounts.scontoInBolletta = row.price;
      } else {
        lastInserted?.push(row);
      }
      if (addLine >= 0) {
        addLine -= 1;
      }
      if (addLine === 0) {
        power.push({
          price: {
            type: "line"
          }
        });
      }
    }
  }
  return {
    power,
    gas,
    discounts
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU1BLE1BQU1BLGNBQWM7QUFDcEIsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLDJCQUEyQjtBQUVqQyxNQUFNQyx3QkFDSjtBQUVGLE1BQU1DLG9CQUNKO0FBRUYsTUFBTUMsMkJBQ0o7QUFFSyxnQkFBU0MsdUJBQXVCO0FBQUEsRUFDckNDO0FBQUFBLEVBQ0FDO0FBQ2tCLEdBQUc7QUFDckIsUUFBTUMsUUFBZTtBQUNyQixRQUFNQyxNQUFhO0FBRW5CLE1BQUlDLGVBQTZCO0FBQ2pDLGFBQVc7QUFBQSxJQUFFQztBQUFBQSxJQUFNQztBQUFBQSxFQUFNLEtBQUtOLFFBQVE7QUFDcEMsUUFBSU8sVUFBVTtBQUNkLGVBQVdDLE9BQU9ILEtBQUtJLE9BQU9ILFNBQVMsRUFBRSxHQUFHO0FBQzFDLFlBQU1JLFVBQVVGLElBQUlHLEtBQUtDLEtBQUtDLE1BQU10QixXQUFXO0FBQy9DLFlBQU11QixRQUFRTixJQUFJRyxLQUFLQyxLQUFLQyxNQUFNckIsU0FBUztBQUMzQyxZQUFNdUIscUJBQXFCUCxJQUFJRyxLQUFLQyxLQUFLQyxNQUFNbEIsd0JBQXdCO0FBRXZFLFVBQUllLFNBQVM7QUFDWE4sdUJBQWVGO0FBQ2ZBLGNBQU1jLEtBQUs7QUFBQSxVQUNULEdBQUdSO0FBQUFBLFVBQ0hHLE1BQU07QUFBQSxZQUNKLEdBQUdILElBQUlHO0FBQUFBLFlBQ1BDLE1BQU1KLElBQUlHLEtBQUtDLEtBQ1pLLFFBQVEsYUFBYSx1QkFBdUIsRUFDNUNBLFFBQVEsU0FBUyxlQUFlLEVBQ2hDQSxRQUFReEIscUJBQXFCLGVBQWU7QUFBQSxZQUMvQ3lCLFNBQVNWLElBQUlHLEtBQUtDLEtBQUtDLE1BQU1wQixtQkFBbUIsSUFDNUNHLHdCQUNBWSxJQUFJRyxLQUFLTztBQUFBQSxVQUNmO0FBQUEsUUFDRixDQUFDO0FBRUQsWUFBSVYsSUFBSUcsS0FBS0MsU0FBUyxPQUFPO0FBQzNCTCxvQkFBVTtBQUFBLFFBQ1o7QUFDQSxZQUFJQyxJQUFJRyxLQUFLQyxTQUFTLFdBQVc7QUFDL0JMLG9CQUFVO0FBQUEsUUFDWjtBQUFBLE1BQ0YsV0FBV08sT0FBTztBQUNoQlYsdUJBQWVEO0FBQ2ZBLFlBQUlhLEtBQUs7QUFBQSxVQUNQLEdBQUdSO0FBQUFBLFVBQ0hHLE1BQU07QUFBQSxZQUNKLEdBQUdILElBQUlHO0FBQUFBLFlBQ1BDLE1BQU1KLElBQUlHLEtBQUtDLEtBQUtLLFFBQVEsU0FBUyx1QkFBdUI7QUFBQSxZQUM1REMsU0FBU1YsSUFBSUcsS0FBS0MsS0FBS0MsTUFBTW5CLGVBQWUsSUFDeENHLG9CQUNBVyxJQUFJRyxLQUFLTztBQUFBQSxVQUNmO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSCxXQUFXSCxvQkFBb0I7QUFDN0JkLGtCQUFVa0IsbUJBQW1CWCxJQUFJWTtBQUFBQSxNQUNuQyxPQUFPO0FBQ0xoQixzQkFBY1ksS0FBS1IsR0FBRztBQUFBLE1BQ3hCO0FBRUEsVUFBSUQsV0FBVyxHQUFHO0FBQ2hCQSxtQkFBVztBQUFBLE1BQ2I7QUFDQSxVQUFJQSxZQUFZLEdBQUc7QUFDakJMLGNBQU1jLEtBQUs7QUFBQSxVQUNUSSxPQUFPO0FBQUEsWUFDTEMsTUFBTTtBQUFBLFVBQ1I7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxTQUFPO0FBQUEsSUFBRW5CO0FBQUFBLElBQU9DO0FBQUFBLElBQUtGO0FBQUFBLEVBQVU7QUFDakMiLCJuYW1lcyI6WyJNQVRDSF9QT1dFUiIsIk1BVENIX0dBUyIsIk1BVENIX0VORVJHSUFfVkVSREUiLCJNQVRDSF9HQVNfVkVSREUiLCJNQVRDSF9TQ09OVE9fSU5fQk9MTEVUVEEiLCJUT09MVElQX0VORVJHSUFfVkVSREUiLCJUT09MVElQX0dBU19WRVJERSIsIlRPT0xUSVBfRU5FUkdJQV9CVVNJTkVTUyIsInRyYW5zZm9ybUNvcnJpc3BldHRpdmkiLCJwcmljZXMiLCJkaXNjb3VudHMiLCJwb3dlciIsImdhcyIsImxhc3RJbnNlcnRlZCIsInJvd3MiLCJleHRyYSIsImFkZExpbmUiLCJyb3ciLCJjb25jYXQiLCJpc1Bvd2VyIiwibmFtZSIsIm1haW4iLCJtYXRjaCIsImlzR2FzIiwiaXNTY29udG9JbkJvbGxldHRhIiwicHVzaCIsInJlcGxhY2UiLCJ0b29sdGlwIiwic2NvbnRvSW5Cb2xsZXR0YSIsInByaWNlIiwidHlwZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJjb3JyaXNwZXR0aXZpLXdyYXBwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICB0eXBlIFByaWNlTm9ybWFsLFxyXG4gIHR5cGUgUHJpY2VzQW5kRGlzY291bnRzLFxyXG4gIHR5cGUgUm93LFxyXG59IGZyb20gJy4vY29ycmlzcGV0dGl2aS9wcmljZXMnO1xyXG5cclxuY29uc3QgTUFUQ0hfUE9XRVIgPSAvKExVQ0V8RU5FUkdJQXwyNGgpL2k7XHJcbmNvbnN0IE1BVENIX0dBUyA9IC9HQVMvaTtcclxuY29uc3QgTUFUQ0hfRU5FUkdJQV9WRVJERSA9IC9eRW5lcmdpYSB2ZXJkZSQvaTtcclxuY29uc3QgTUFUQ0hfR0FTX1ZFUkRFID0gL15HYXMgY29uIENPLiBjb21wZW5zYXRhL2k7XHJcbmNvbnN0IE1BVENIX1NDT05UT19JTl9CT0xMRVRUQSA9IC9TQ09OVE8gSU4gQk9MTEVUVEEvaTtcclxuXHJcbmNvbnN0IFRPT0xUSVBfRU5FUkdJQV9WRVJERSA9XHJcbiAgJ0VuZXJnaWEgZWxldHRyaWNhIGNlcnRpZmljYXRhIHRyYW1pdGUgZ2FyYW56aWUgZGkgb3JpZ2luZSBkaSBwcm92ZW5pZW56YSBldXJvcGVhIOKAkyBjb21lIGltbWVzc2EgaW4gcmV0ZSBlIHByb2RvdHRhIGRhIGltcGlhbnRpIGFsaW1lbnRhdGkgYWwgMTAwJSBkYSBmb250aSByaW5ub3ZhYmlsaS4nO1xyXG5cclxuY29uc3QgVE9PTFRJUF9HQVNfVkVSREUgPVxyXG4gICdQbGVuaXR1ZGUgZmluYW56aWEgcHJvZ2V0dGkgZGkgY29uc2VydmF6aW9uZSBhY3F1aXN0YW5kbyBjcmVkaXRpIGRpIGNhcmJvbmlvIHBlciBjb21wZW5zYXJlIGxhIENP4oKCIHByb2RvdHRhIGRhbCBjb25zdW1vIGRvbWVzdGljbyBkaSBnYXMuJztcclxuXHJcbmNvbnN0IFRPT0xUSVBfRU5FUkdJQV9CVVNJTkVTUyA9XHJcbiAgJ1NlIGhhaSB1biBjb250YXRvcmUgZGkgbnVvdmEgZ2VuZXJhemlvbmUsIGluIGdyYWRvIGRpIGxlZ2dlcmUgaSBjb25zdW1pIHBlciBsZSBmYXNjZSBvcmFyaWUgKEYxLCBGMiwgRjMpLCB0aSB2ZXJyw6AgYXBwbGljYXRhIGxhIHRhcmlmZmEgdHJpb3JhcmlhLiBJbiBjYXNvIGNvbnRyYXJpbyBsYSB0YXJpZmZhIGFwcGxpY2F0YSBzYXLDoCBxdWVsbGEgbW9ub3JhcmlhLic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQ29ycmlzcGV0dGl2aSh7XHJcbiAgcHJpY2VzLFxyXG4gIGRpc2NvdW50cyxcclxufTogUHJpY2VzQW5kRGlzY291bnRzKSB7XHJcbiAgY29uc3QgcG93ZXI6IFJvd1tdID0gW107XHJcbiAgY29uc3QgZ2FzOiBSb3dbXSA9IFtdO1xyXG5cclxuICBsZXQgbGFzdEluc2VydGVkOiBSb3dbXSB8IG51bGwgPSBudWxsO1xyXG4gIGZvciAoY29uc3QgeyByb3dzLCBleHRyYSB9IG9mIHByaWNlcykge1xyXG4gICAgbGV0IGFkZExpbmUgPSAtMTtcclxuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MuY29uY2F0KGV4dHJhID8/IFtdKSkge1xyXG4gICAgICBjb25zdCBpc1Bvd2VyID0gcm93Lm5hbWUubWFpbi5tYXRjaChNQVRDSF9QT1dFUik7XHJcbiAgICAgIGNvbnN0IGlzR2FzID0gcm93Lm5hbWUubWFpbi5tYXRjaChNQVRDSF9HQVMpO1xyXG4gICAgICBjb25zdCBpc1Njb250b0luQm9sbGV0dGEgPSByb3cubmFtZS5tYWluLm1hdGNoKE1BVENIX1NDT05UT19JTl9CT0xMRVRUQSk7XHJcblxyXG4gICAgICBpZiAoaXNQb3dlcikge1xyXG4gICAgICAgIGxhc3RJbnNlcnRlZCA9IHBvd2VyO1xyXG4gICAgICAgIHBvd2VyLnB1c2goe1xyXG4gICAgICAgICAgLi4ucm93LFxyXG4gICAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICAuLi5yb3cubmFtZSxcclxuICAgICAgICAgICAgbWFpbjogcm93Lm5hbWUubWFpblxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9eTFVDRSAyNGgvLCAnQ29ycmlzcGV0dGl2byBpbXBvcnRvJylcclxuICAgICAgICAgICAgICAucmVwbGFjZSgvXkxVQ0UvLCAnQ29ycmlzcGV0dGl2aScpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoTUFUQ0hfRU5FUkdJQV9WRVJERSwgJ0VuZXJnaWEgdmVyZGUnKSxcclxuICAgICAgICAgICAgdG9vbHRpcDogcm93Lm5hbWUubWFpbi5tYXRjaChNQVRDSF9FTkVSR0lBX1ZFUkRFKVxyXG4gICAgICAgICAgICAgID8gVE9PTFRJUF9FTkVSR0lBX1ZFUkRFXHJcbiAgICAgICAgICAgICAgOiByb3cubmFtZS50b29sdGlwLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHJvdy5uYW1lLm1haW4gPT09ICcyNGgnKSB7XHJcbiAgICAgICAgICBhZGRMaW5lID0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJvdy5uYW1lLm1haW4gPT09ICdMVUNFIEYzJykge1xyXG4gICAgICAgICAgYWRkTGluZSA9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGlzR2FzKSB7XHJcbiAgICAgICAgbGFzdEluc2VydGVkID0gZ2FzO1xyXG4gICAgICAgIGdhcy5wdXNoKHtcclxuICAgICAgICAgIC4uLnJvdyxcclxuICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgLi4ucm93Lm5hbWUsXHJcbiAgICAgICAgICAgIG1haW46IHJvdy5uYW1lLm1haW4ucmVwbGFjZSgvXkdBUyQvLCAnQ29ycmlzcGV0dGl2byBpbXBvcnRvJyksXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHJvdy5uYW1lLm1haW4ubWF0Y2goTUFUQ0hfR0FTX1ZFUkRFKVxyXG4gICAgICAgICAgICAgID8gVE9PTFRJUF9HQVNfVkVSREVcclxuICAgICAgICAgICAgICA6IHJvdy5uYW1lLnRvb2x0aXAsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzU2NvbnRvSW5Cb2xsZXR0YSkge1xyXG4gICAgICAgIGRpc2NvdW50cy5zY29udG9JbkJvbGxldHRhID0gcm93LnByaWNlIGFzIFByaWNlTm9ybWFsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxhc3RJbnNlcnRlZD8ucHVzaChyb3cpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYWRkTGluZSA+PSAwKSB7XHJcbiAgICAgICAgYWRkTGluZSAtPSAxO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChhZGRMaW5lID09PSAwKSB7XHJcbiAgICAgICAgcG93ZXIucHVzaCh7XHJcbiAgICAgICAgICBwcmljZToge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBwb3dlciwgZ2FzLCBkaXNjb3VudHMgfTtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvb2ZmZXJ0YS9jb3JyaXNwZXR0aXZpLXdyYXBwZXIudHMifQ==