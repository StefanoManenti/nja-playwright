globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { checkMattoncini } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi/coupon.ts";
import { calcolaScontiProdotti } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi/sconti-prodotti.ts";
import { PriceCalculatorV2 } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi/utils.ts";
import { parseCommercializzazioneVendita } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi/commercializzazione-vendita.ts";
export function generaCorrispettiviFixa(offer, opzioni, scontistica = {}) {
  const {
    discount,
    discounts,
    texts
  } = calcolaScontiProdotti(offer, opzioni);
  const toReturn = {
    prices: [],
    discounts,
    texts,
    greenEnergyIncluded: offer.verde.luceInclusa
    // greenEnergyPrice: {
    //   price: sconti?.prezzoEnergiaVerde.
    //   unit: sconti?.unitaEnergiaVerde,
    //   info: '(IVA ESCLUSA)',
    // },
  };
  let extraLuce = null;
  if (offer.costiDiCommercializzazione.luce) {
    const parsed = parseCommercializzazioneVendita(offer.costiDiCommercializzazione.luce, "POWER", scontistica);
    if (parsed) {
      extraLuce = [parsed];
    }
  }
  let extraGas = null;
  if (offer.costiDiCommercializzazione.gas) {
    const parsed = parseCommercializzazioneVendita(offer.costiDiCommercializzazione.gas, "GAS", scontistica);
    if (parsed) {
      extraGas = [parsed];
    }
  }
  {
    const p = new PriceCalculatorV2(!!scontistica.prezziBarratiLuce).addDiscount({
      tag: "after-discounts",
      applyAlsoToOldPrice: true,
      condition: true,
      percent: discount,
      from: "original"
    }).addDiscount({
      condition: checkMattoncini(scontistica.coupon?.infoLuce, "LS003"),
      percent: scontistica.coupon?.infoLuce?.percentValue,
      from: "after-discounts"
    }).addDiscount({
      condition: checkMattoncini(scontistica.coupon?.infoLuce, "LS005", "LS006"),
      amount: scontistica.coupon?.infoLuce?.listPrice
    });
    if (opzioni.tariffaLuce === "BIORARIA") {
      const items = {
        rows: [{
          name: {
            main: "LUCE F1",
            descriptions: ["08:00 - 19:00", "lun-ven escluse festività"]
          },
          price: {
            type: "normal",
            unit: "€/kWh",
            ...p.apply(offer.prezzi.luce?.bioraria?.f1)
          }
        }, {
          name: {
            main: "LUCE F2-F3",
            descriptions: ["19:00 - 08:00", "Weekend e festività"]
          },
          price: {
            type: "normal",
            unit: "€/kWh",
            ...p.apply(offer.prezzi.luce?.bioraria?.f23)
          }
        }]
      };
      if (extraLuce) items.extra = extraLuce;
      toReturn.prices.push(items);
    } else {
      const items = {
        rows: [{
          name: {
            main: "LUCE 24h",
            descriptions: ["", "tutti i giorni"]
          },
          price: {
            type: "normal",
            unit: "€/kWh",
            ...p.apply(offer.prezzi.luce?.monoraria)
          }
        }]
      };
      if (extraLuce) items.extra = extraLuce;
      toReturn.prices.push(items);
    }
  }
  {
    const p = new PriceCalculatorV2(!!scontistica.prezziBarratiGas).addDiscount({
      tag: "after-discounts",
      applyAlsoToOldPrice: true,
      condition: true,
      percent: discount,
      from: "original"
    }).addDiscount({
      condition: checkMattoncini(scontistica.coupon?.infoGas, "GS001"),
      percent: scontistica.coupon?.infoGas?.percentValue,
      from: "after-discounts"
    }).addDiscount({
      condition: checkMattoncini(scontistica.coupon?.infoGas, "GS004", "GS009"),
      amount: scontistica.coupon?.infoGas?.listPrice
    });
    const items = {
      rows: [{
        name: {
          main: "GAS",
          descriptions: ["", ""]
        },
        price: {
          type: "normal",
          unit: "€/Smc",
          ...p.apply(offer.prezzi.gas)
        }
      }]
    };
    if (extraGas) items.extra = extraGas;
    toReturn.prices.push(items);
  }
  if (offer.verde.luceInclusa) {
    toReturn.prices.push({
      rows: [{
        name: {
          main: "ENERGIA VERDE"
        },
        price: {
          type: "included",
          info: "Inclusa"
        }
      }]
    });
  }
  if (offer.verde.gasIncluso) {
    toReturn.prices.push({
      rows: [{
        name: {
          main: "Gas con CO₂ compensata"
        },
        price: {
          type: "included",
          info: "Incluso"
        }
      }]
    });
  }
  return toReturn;
}

//# sourceMappingURL=data:application/json;base64,