globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { EnumMapper } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { powerRateAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { billType$, paymentType$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/paymentType$.ts";
import { Bill, Payment, PowerRate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
export const bulkOrderOptions$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\options.ts/bulkOrderOptions$", atom(async (get) => {
  const payment = await get(paymentType$);
  const bill = await get(billType$);
  const powerRate = get(powerRateAtom);
  const data = {
    domiciliation: domiciliationMapper.toBackend(payment),
    billType: billMapper.toBackend(bill),
    hoursBundle: hoursBundleMapper.toBackend(powerRate)
  };
  return data;
}, async (get, set, args) => {
  await set(paymentType$, domiciliationMapper.toFrontend(args.domiciliation));
  await set(billType$, billMapper.toFrontend(args.billType));
  set(powerRateAtom, hoursBundleMapper.toFrontend(args.options?.hoursBundle));
}));
bulkOrderOptions$.debugLabel = "bulkOrderOptions$";
const domiciliationMapper = new EnumMapper([[Payment.DOMICILIATION, "Y"], [Payment.POSTAL, "N"]], Payment.NOT_SELECTED, null);
const billMapper = new EnumMapper([[Bill.DIGITAL, "DIGITALE"], [Bill.PAPER, "CARTACEO"]], Bill.NOT_SELECTED, null);
const hoursBundleMapper = new EnumMapper([[PowerRate.SINGLE, "Monoraria"], [PowerRate.BI_HOURLY, "Bioraria"]], PowerRate.NOT_SELECTED, null);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGtCQUFrQjtBQUMzQixTQUFTQyxZQUFZO0FBT3JCLFNBQVNDLHFCQUFxQjtBQUM5QixTQUFTQyxXQUFXQyxvQkFBb0I7QUFDeEMsU0FBU0MsTUFBTUMsU0FBU0MsaUJBQWlCO0FBT3pDLGFBQUFDLG9CQUFBQyxXQUFBQyxlQUFBQyxJQUFBLHNJQUFpRVYsS0FDL0QsT0FBT1UsUUFBUTtBQUNiLFFBQU1DLFVBQVUsTUFBTUQsSUFBSVAsWUFBWTtBQUN0QyxRQUFNUyxPQUFPLE1BQU1GLElBQUlSLFNBQVM7QUFDaEMsUUFBTVcsWUFBWUgsSUFBSVQsYUFBYTtBQUVuQyxRQUFNYSxPQUFhO0FBQUEsSUFDakJDLGVBQWVDLG9CQUFvQkMsVUFBVU4sT0FBTztBQUFBLElBQ3BETyxVQUFVQyxXQUFXRixVQUFVTCxJQUFJO0FBQUEsSUFDbkNRLGFBQWFDLGtCQUFrQkosVUFBVUosU0FBUztBQUFBLEVBQ3BEO0FBRUEsU0FBT0M7QUFDVCxHQUNBLE9BQ0VKLEtBQ0FZLEtBQ0FDLFNBQ0c7QUFDSCxRQUFNRCxJQUFJbkIsY0FBY2Esb0JBQW9CUSxXQUFXRCxLQUFLUixhQUFhLENBQUM7QUFDMUUsUUFBTU8sSUFBSXBCLFdBQVdpQixXQUFXSyxXQUFXRCxLQUFLTCxRQUFRLENBQUM7QUFDekRJLE1BQUlyQixlQUFlb0Isa0JBQWtCRyxXQUFXRCxLQUFLRSxTQUFTTCxXQUFXLENBQUM7QUFDNUUsQ0FDRixDQUFDO0FBQUNiLGtCQUFBbUIsYUFBQTtBQUVGLE1BQU1WLHNCQUFzQixJQUFJakIsV0FJOUIsQ0FDRSxDQUFDTSxRQUFRc0IsZUFBZSxHQUFHLEdBQzNCLENBQUN0QixRQUFRdUIsUUFBUSxHQUFHLENBQUMsR0FFdkJ2QixRQUFRd0IsY0FDUixJQUNGO0FBRUEsTUFBTVYsYUFBYSxJQUFJcEIsV0FDckIsQ0FDRSxDQUFDSyxLQUFLMEIsU0FBUyxVQUFVLEdBQ3pCLENBQUMxQixLQUFLMkIsT0FBTyxVQUFVLENBQUMsR0FFMUIzQixLQUFLeUIsY0FDTCxJQUNGO0FBRUEsTUFBTVIsb0JBQW9CLElBQUl0QixXQUM1QixDQUNFLENBQUNPLFVBQVUwQixRQUFRLFdBQVcsR0FDOUIsQ0FBQzFCLFVBQVUyQixXQUFXLFVBQVUsQ0FBQyxHQUVuQzNCLFVBQVV1QixjQUNWLElBQ0YiLCJuYW1lcyI6WyJFbnVtTWFwcGVyIiwiYXRvbSIsInBvd2VyUmF0ZUF0b20iLCJiaWxsVHlwZSQiLCJwYXltZW50VHlwZSQiLCJCaWxsIiwiUGF5bWVudCIsIlBvd2VyUmF0ZSIsImJ1bGtPcmRlck9wdGlvbnMkIiwiZ2xvYmFsVGhpcyIsImpvdGFpQXRvbUNhY2hlIiwiZ2V0IiwicGF5bWVudCIsImJpbGwiLCJwb3dlclJhdGUiLCJkYXRhIiwiZG9taWNpbGlhdGlvbiIsImRvbWljaWxpYXRpb25NYXBwZXIiLCJ0b0JhY2tlbmQiLCJiaWxsVHlwZSIsImJpbGxNYXBwZXIiLCJob3Vyc0J1bmRsZSIsImhvdXJzQnVuZGxlTWFwcGVyIiwic2V0IiwiYXJncyIsInRvRnJvbnRlbmQiLCJvcHRpb25zIiwiZGVidWdMYWJlbCIsIkRPTUlDSUxJQVRJT04iLCJQT1NUQUwiLCJOT1RfU0VMRUNURUQiLCJESUdJVEFMIiwiUEFQRVIiLCJTSU5HTEUiLCJCSV9IT1VSTFkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsib3B0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnVtTWFwcGVyIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHR5cGUgeyBNb25nb0xlYWQgfSBmcm9tICcuLi8uLi8uLi9hcGkvbGVhZCc7XHJcbmltcG9ydCB7XHJcbiAgQmlsbFR5cGUsXHJcbiAgRG9taWNpbGlhdGlvblR5cGUsXHJcbiAgSG91cnNCdW5kbGUsXHJcbn0gZnJvbSAnLi4vLi4vLi4vYXBpL2xlYWQvX3R5cGVzJztcclxuaW1wb3J0IHsgcG93ZXJSYXRlQXRvbSB9IGZyb20gJy4uLy4uLy4uL3Ryb3VibGVzaG9vdGluZy9hdG9tcyc7XHJcbmltcG9ydCB7IGJpbGxUeXBlJCwgcGF5bWVudFR5cGUkIH0gZnJvbSAnLi4vLi4vLi4vdHJvdWJsZXNob290aW5nL3BheW1lbnRUeXBlJCc7XHJcbmltcG9ydCB7IEJpbGwsIFBheW1lbnQsIFBvd2VyUmF0ZSB9IGZyb20gJy4uLy4uLy4uL3Ryb3VibGVzaG9vdGluZy90eXBlcyc7XHJcbmltcG9ydCB7IHR5cGUgQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG50eXBlIERhdGEgPSBQaWNrPE1vbmdvTGVhZCwgJ2RvbWljaWxpYXRpb24nIHwgJ2JpbGxUeXBlJz4gJiB7XHJcbiAgaG91cnNCdW5kbGU/OiBIb3Vyc0J1bmRsZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBidWxrT3JkZXJPcHRpb25zJDogQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tPERhdGE+ID0gYXRvbShcclxuICBhc3luYyAoZ2V0KSA9PiB7XHJcbiAgICBjb25zdCBwYXltZW50ID0gYXdhaXQgZ2V0KHBheW1lbnRUeXBlJCk7XHJcbiAgICBjb25zdCBiaWxsID0gYXdhaXQgZ2V0KGJpbGxUeXBlJCk7XHJcbiAgICBjb25zdCBwb3dlclJhdGUgPSBnZXQocG93ZXJSYXRlQXRvbSk7XHJcblxyXG4gICAgY29uc3QgZGF0YTogRGF0YSA9IHtcclxuICAgICAgZG9taWNpbGlhdGlvbjogZG9taWNpbGlhdGlvbk1hcHBlci50b0JhY2tlbmQocGF5bWVudCksXHJcbiAgICAgIGJpbGxUeXBlOiBiaWxsTWFwcGVyLnRvQmFja2VuZChiaWxsKSxcclxuICAgICAgaG91cnNCdW5kbGU6IGhvdXJzQnVuZGxlTWFwcGVyLnRvQmFja2VuZChwb3dlclJhdGUpLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9LFxyXG4gIGFzeW5jIChcclxuICAgIGdldCxcclxuICAgIHNldCxcclxuICAgIGFyZ3M6IFBpY2s8TW9uZ29MZWFkLCAnZG9taWNpbGlhdGlvbicgfCAnYmlsbFR5cGUnIHwgJ29wdGlvbnMnPlxyXG4gICkgPT4ge1xyXG4gICAgYXdhaXQgc2V0KHBheW1lbnRUeXBlJCwgZG9taWNpbGlhdGlvbk1hcHBlci50b0Zyb250ZW5kKGFyZ3MuZG9taWNpbGlhdGlvbikpO1xyXG4gICAgYXdhaXQgc2V0KGJpbGxUeXBlJCwgYmlsbE1hcHBlci50b0Zyb250ZW5kKGFyZ3MuYmlsbFR5cGUpKTtcclxuICAgIHNldChwb3dlclJhdGVBdG9tLCBob3Vyc0J1bmRsZU1hcHBlci50b0Zyb250ZW5kKGFyZ3Mub3B0aW9ucz8uaG91cnNCdW5kbGUpKTtcclxuICB9XHJcbik7XHJcblxyXG5jb25zdCBkb21pY2lsaWF0aW9uTWFwcGVyID0gbmV3IEVudW1NYXBwZXI8XHJcbiAgUGF5bWVudCxcclxuICBEb21pY2lsaWF0aW9uVHlwZSB8IHVuZGVmaW5lZFxyXG4+KFxyXG4gIFtcclxuICAgIFtQYXltZW50LkRPTUlDSUxJQVRJT04sICdZJ10sXHJcbiAgICBbUGF5bWVudC5QT1NUQUwsICdOJ10sXHJcbiAgXSxcclxuICBQYXltZW50Lk5PVF9TRUxFQ1RFRCxcclxuICBudWxsXHJcbik7XHJcblxyXG5jb25zdCBiaWxsTWFwcGVyID0gbmV3IEVudW1NYXBwZXI8QmlsbCwgQmlsbFR5cGUgfCB1bmRlZmluZWQ+KFxyXG4gIFtcclxuICAgIFtCaWxsLkRJR0lUQUwsICdESUdJVEFMRSddLFxyXG4gICAgW0JpbGwuUEFQRVIsICdDQVJUQUNFTyddLFxyXG4gIF0sXHJcbiAgQmlsbC5OT1RfU0VMRUNURUQsXHJcbiAgbnVsbFxyXG4pO1xyXG5cclxuY29uc3QgaG91cnNCdW5kbGVNYXBwZXIgPSBuZXcgRW51bU1hcHBlcjxQb3dlclJhdGUsIEhvdXJzQnVuZGxlIHwgdW5kZWZpbmVkPihcclxuICBbXHJcbiAgICBbUG93ZXJSYXRlLlNJTkdMRSwgJ01vbm9yYXJpYSddLFxyXG4gICAgW1Bvd2VyUmF0ZS5CSV9IT1VSTFksICdCaW9yYXJpYSddLFxyXG4gIF0sXHJcbiAgUG93ZXJSYXRlLk5PVF9TRUxFQ1RFRCxcclxuICBudWxsXHJcbik7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy9jb250cmFjdC9oZWxwZXJzL29wdGlvbnMudHMifQ==