import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/BaseErrorBoundary.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/BaseErrorBoundary.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { useStore } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import __vite__cjsImport4_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const Component = __vite__cjsImport4_react["Component"];
import { ErrorContext } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/ErrorContextType.tsx";
import { clearError, isErrorClearable } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/errors.ts";
class BaseErrorBoundary extends Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false };
    this.catchingUnhandledPromisesRejection = false;
    this.retry = () => {
      if (this.state.error && isErrorClearable(this.state.error)) {
        clearError(this.state.error, this.props.store);
      } else {
        console.log("cannot clear this.state.error");
      }
      this.setState({ hasError: false });
    };
    this.promiseRejectionHandler = (event) => {
      console.warn("CATCHED UNHANDLED PROMISE REJECTION IN ErrorBoundary.");
      this.setState({
        hasError: true,
        error: event.reason
      });
    };
    this.contextValue = {
      reportError: (error) => {
        this.setState({
          hasError: true,
          error
        });
      }
    };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
  }
  componentDidUpdate(prevProps) {
    if (prevProps.catchUnhandledPromisesRejection !== this.props.catchUnhandledPromisesRejection) {
      throw Error("prop catchUnhandledPromisesRejection must not change!");
    }
  }
  componentDidMount() {
    if (this.props.catchUnhandledPromisesRejection) {
      this.catchingUnhandledPromisesRejection = true;
      window.addEventListener(
        "unhandledrejection",
        this.promiseRejectionHandler
      );
    }
  }
  componentWillUnmount() {
    if (this.catchingUnhandledPromisesRejection) {
      window.removeEventListener(
        "unhandledrejection",
        this.promiseRejectionHandler
      );
    }
  }
  render() {
    if (this.state.hasError) {
      return this.props.renderFallback({
        error: this.state.error,
        retry: this.retry,
        retryable: !!(this.state.error && isErrorClearable(this.state.error))
      });
    }
    return /* @__PURE__ */ jsxDEV(ErrorContext.Provider, { value: this.contextValue, children: this.props.children }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/BaseErrorBoundary.tsx",
      lineNumber: 85,
      columnNumber: 7
    }, this);
  }
}
export default function BaseErrorBoundaryConnected(props) {
  _s();
  const store = useStore();
  return /* @__PURE__ */ jsxDEV(BaseErrorBoundary, { ...props, store }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/BaseErrorBoundary.tsx",
    lineNumber: 123,
    columnNumber: 10
  }, this);
}
_s(BaseErrorBoundaryConnected, "lacCqcEtsbxX3PAG/fPlTuRiPg0=", false, function() {
  return [useStore];
});
_c = BaseErrorBoundaryConnected;
var _c;
$RefreshReg$(_c, "BaseErrorBoundaryConnected");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/BaseErrorBoundary.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,