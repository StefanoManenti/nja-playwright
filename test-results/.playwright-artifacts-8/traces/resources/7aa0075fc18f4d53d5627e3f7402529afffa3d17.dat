globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { CheckDoubleNetPodError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { equals, OK, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
const url = `${API}/webOrderCommonServices/verificaPodDuereti`;
async function verificaPodDuereti(payload) {
  if (areCheckBypassed()) {
    return OK;
  }
  const logHash = generateOperationID();
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      ...payload,
      logHash
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  if (data.esito !== "OK") {
    throw new CheckDoubleNetPodError(data.esito, logHash, data);
  }
  return OK;
}
export const atomWithCheckPodDuereti = ({
  pod,
  supply
}) => {
  return atomWithErrorReset(async (get) => {
    const contract = get(currentContractInfoAtom);
    const idLead = contract.idLead;
    const plicoCode = await contract.plicoCode;
    const salesProcessForLog = await contract.salesProcessForLog;
    const operativeModeToCheck = [OperativeMode.SWITCH_IN, OperativeMode.SWITCH_IN_TRANSFER, OperativeMode.NEW_ACTIVATION];
    if (!equals(get(operativeModeAtom), ...operativeModeToCheck)) {
      return OK;
    }
    const address = await get(supply.account.supplyAddress);
    return verificaPodDuereti({
      idLead,
      plicoCode,
      salesProcessForLog,
      pod,
      codiceIstat: address.istatCode
    });
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLDhCQUE4QjtBQUN2QyxTQUFTQyxRQUFRQyxJQUFJQyxxQ0FBcUM7QUFDMUQsU0FBU0MsK0JBQStCO0FBRXhDLFNBQVNDLHlCQUF5QjtBQUNsQyxTQUFTQyxxQkFBcUI7QUFDOUIsU0FBU0MsS0FBS0MsMkJBQTJCO0FBQ3pDLFNBQVNDLDBCQUEwQjtBQUNuQyxTQUFTQyx3QkFBd0I7QUFFakMsTUFBTUMsTUFBTSxHQUFHSixHQUFHO0FBRWxCLGVBQWVLLG1CQUFtQkMsU0FNL0I7QUFDRCxNQUFJSCxpQkFBaUIsR0FBRztBQUN0QixXQUFPUjtBQUFBQSxFQUNUO0FBRUEsUUFBTVksVUFBVU4sb0JBQW9CO0FBRXBDLFFBQU1PLFdBQVcsTUFBTUMsTUFBTUwsS0FBSztBQUFBLElBQ2hDTSxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQUMsTUFBTUMsS0FBS0MsVUFBVTtBQUFBLE1BQUUsR0FBR1Q7QUFBQUEsTUFBU0M7QUFBQUEsSUFBUSxDQUFDO0FBQUEsRUFDOUMsQ0FBQztBQUVELE1BQUlDLFNBQVNRLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUlwQiw4QkFBOEJZLFNBQVNTLFlBQVlWLE9BQU87QUFBQSxFQUN0RTtBQUVBLFFBQU1XLE9BQU8sTUFBTVYsU0FBU1csS0FBSztBQUVqQyxNQUFJRCxLQUFLRSxVQUFVLE1BQU07QUFDdkIsVUFBTSxJQUFJM0IsdUJBQXVCeUIsS0FBS0UsT0FBT2IsU0FBU1csSUFBSTtBQUFBLEVBQzVEO0FBRUEsU0FBT3ZCO0FBQ1Q7QUFFTyxhQUFNMEIsMEJBQTBCQSxDQUFDO0FBQUEsRUFDdENDO0FBQUFBLEVBQ0FDO0FBSUYsTUFBTTtBQUNKLFNBQU9yQixtQkFBbUIsT0FBT3NCLFFBQVE7QUFDdkMsVUFBTUMsV0FBV0QsSUFBSTNCLHVCQUF1QjtBQUM1QyxVQUFNNkIsU0FBU0QsU0FBU0M7QUFDeEIsVUFBTUMsWUFBWSxNQUFNRixTQUFTRTtBQUNqQyxVQUFNQyxxQkFBcUIsTUFBTUgsU0FBU0c7QUFHMUMsVUFBTUMsdUJBQXVCLENBQzNCOUIsY0FBYytCLFdBQ2QvQixjQUFjZ0Msb0JBQ2RoQyxjQUFjaUMsY0FBYztBQUc5QixRQUFJLENBQUN0QyxPQUFPOEIsSUFBSTFCLGlCQUFpQixHQUFHLEdBQUcrQixvQkFBb0IsR0FBRztBQUM1RCxhQUFPbEM7QUFBQUEsSUFDVDtBQUVBLFVBQU1zQyxVQUFVLE1BQU1ULElBQUlELE9BQU9XLFFBQVFDLGFBQWE7QUFFdEQsV0FBTzlCLG1CQUFtQjtBQUFBLE1BQ3hCcUI7QUFBQUEsTUFDQUM7QUFBQUEsTUFDQUM7QUFBQUEsTUFDQU47QUFBQUEsTUFDQWMsYUFBYUgsUUFBU0k7QUFBQUEsSUFDeEIsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUNIIiwibmFtZXMiOlsiQ2hlY2tEb3VibGVOZXRQb2RFcnJvciIsImVxdWFscyIsIk9LIiwiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJjdXJyZW50Q29udHJhY3RJbmZvQXRvbSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwiT3BlcmF0aXZlTW9kZSIsIkFQSSIsImdlbmVyYXRlT3BlcmF0aW9uSUQiLCJhdG9tV2l0aEVycm9yUmVzZXQiLCJhcmVDaGVja0J5cGFzc2VkIiwidXJsIiwidmVyaWZpY2FQb2REdWVyZXRpIiwicGF5bG9hZCIsImxvZ0hhc2giLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiZXNpdG8iLCJhdG9tV2l0aENoZWNrUG9kRHVlcmV0aSIsInBvZCIsInN1cHBseSIsImdldCIsImNvbnRyYWN0IiwiaWRMZWFkIiwicGxpY29Db2RlIiwic2FsZXNQcm9jZXNzRm9yTG9nIiwib3BlcmF0aXZlTW9kZVRvQ2hlY2siLCJTV0lUQ0hfSU4iLCJTV0lUQ0hfSU5fVFJBTlNGRVIiLCJORVdfQUNUSVZBVElPTiIsImFkZHJlc3MiLCJhY2NvdW50Iiwic3VwcGx5QWRkcmVzcyIsImNvZGljZUlzdGF0IiwiaXN0YXRDb2RlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInZlcmlmaWNhUG9kRHVlcmV0aS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGVja0RvdWJsZU5ldFBvZEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcclxuaW1wb3J0IHsgZXF1YWxzLCBPSywgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBjdXJyZW50Q29udHJhY3RJbmZvQXRvbSB9IGZyb20gJy4uLy4uL2F0b21zL2N1cnJlbnQtY29udHJhY3QtaW5mby1hdG9tcyc7XHJcbmltcG9ydCB7IFBvd2VyU3VwcGx5IH0gZnJvbSAnLi4vLi4vYXRvbXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBvcGVyYXRpdmVNb2RlQXRvbSB9IGZyb20gJy4uLy4uL3Ryb3VibGVzaG9vdGluZy9hdG9tcyc7XHJcbmltcG9ydCB7IE9wZXJhdGl2ZU1vZGUgfSBmcm9tICcuLi8uLi90cm91Ymxlc2hvb3RpbmcvdHlwZXMnO1xyXG5pbXBvcnQgeyBBUEksIGdlbmVyYXRlT3BlcmF0aW9uSUQgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IGF0b21XaXRoRXJyb3JSZXNldCB9IGZyb20gJy4uLy4uL3V0aWxzL2F0b21XaXRoUmV0cnlhYmxlUXVlcnknO1xyXG5pbXBvcnQgeyBhcmVDaGVja0J5cGFzc2VkIH0gZnJvbSAnLi4vLi4vdXRpbHMvZmxhZ3MnO1xyXG5cclxuY29uc3QgdXJsID0gYCR7QVBJfS93ZWJPcmRlckNvbW1vblNlcnZpY2VzL3ZlcmlmaWNhUG9kRHVlcmV0aWA7XHJcblxyXG5hc3luYyBmdW5jdGlvbiB2ZXJpZmljYVBvZER1ZXJldGkocGF5bG9hZDoge1xyXG4gIGNvZGljZUlzdGF0OiBzdHJpbmc7XHJcbiAgcG9kOiBzdHJpbmc7XHJcbiAgaWRMZWFkOiBzdHJpbmc7XHJcbiAgcGxpY29Db2RlOiBzdHJpbmc7XHJcbiAgc2FsZXNQcm9jZXNzRm9yTG9nOiBzdHJpbmc7XHJcbn0pIHtcclxuICBpZiAoYXJlQ2hlY2tCeXBhc3NlZCgpKSB7XHJcbiAgICByZXR1cm4gT0s7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG5cclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgLi4ucGF5bG9hZCwgbG9nSGFzaCB9KSxcclxuICB9KTtcclxuXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICB0aHJvdyBuZXcgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgbG9nSGFzaCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICBpZiAoZGF0YS5lc2l0byAhPT0gJ09LJykge1xyXG4gICAgdGhyb3cgbmV3IENoZWNrRG91YmxlTmV0UG9kRXJyb3IoZGF0YS5lc2l0bywgbG9nSGFzaCwgZGF0YSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gT0s7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhdG9tV2l0aENoZWNrUG9kRHVlcmV0aSA9ICh7XHJcbiAgcG9kLFxyXG4gIHN1cHBseSxcclxufToge1xyXG4gIHBvZDogc3RyaW5nO1xyXG4gIHN1cHBseTogUG93ZXJTdXBwbHk7XHJcbn0pID0+IHtcclxuICByZXR1cm4gYXRvbVdpdGhFcnJvclJlc2V0KGFzeW5jIChnZXQpID0+IHtcclxuICAgIGNvbnN0IGNvbnRyYWN0ID0gZ2V0KGN1cnJlbnRDb250cmFjdEluZm9BdG9tKTtcclxuICAgIGNvbnN0IGlkTGVhZCA9IGNvbnRyYWN0LmlkTGVhZDtcclxuICAgIGNvbnN0IHBsaWNvQ29kZSA9IGF3YWl0IGNvbnRyYWN0LnBsaWNvQ29kZTtcclxuICAgIGNvbnN0IHNhbGVzUHJvY2Vzc0ZvckxvZyA9IGF3YWl0IGNvbnRyYWN0LnNhbGVzUHJvY2Vzc0ZvckxvZztcclxuXHJcbiAgICAvKiogTGlzdCBvZiBvcGVyYXRpdmUgbW9kZXMgd2hlcmUgdGhlIFBPRCBEdWVyZXRpIHNob3VsZCBiZSBjaGVja2VkICovXHJcbiAgICBjb25zdCBvcGVyYXRpdmVNb2RlVG9DaGVjayA9IFtcclxuICAgICAgT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU4sXHJcbiAgICAgIE9wZXJhdGl2ZU1vZGUuU1dJVENIX0lOX1RSQU5TRkVSLFxyXG4gICAgICBPcGVyYXRpdmVNb2RlLk5FV19BQ1RJVkFUSU9OLFxyXG4gICAgXTtcclxuXHJcbiAgICBpZiAoIWVxdWFscyhnZXQob3BlcmF0aXZlTW9kZUF0b20pLCAuLi5vcGVyYXRpdmVNb2RlVG9DaGVjaykpIHtcclxuICAgICAgcmV0dXJuIE9LO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCBnZXQoc3VwcGx5LmFjY291bnQuc3VwcGx5QWRkcmVzcyk7XHJcblxyXG4gICAgcmV0dXJuIHZlcmlmaWNhUG9kRHVlcmV0aSh7XHJcbiAgICAgIGlkTGVhZCxcclxuICAgICAgcGxpY29Db2RlLFxyXG4gICAgICBzYWxlc1Byb2Nlc3NGb3JMb2csXHJcbiAgICAgIHBvZCxcclxuICAgICAgY29kaWNlSXN0YXQ6IGFkZHJlc3MhLmlzdGF0Q29kZSxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3dlYm9yZGVyL3ZlcmlmaWNhUG9kRHVlcmV0aS50cyJ9