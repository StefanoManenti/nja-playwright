globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
const LOG_HASH_SESSION_SIZE = 9;
const LOG_HASH_SERVICE_SIZE = 4;
function generate(size) {
  return randomString(size, "aA");
}
const LOG_HASH_BASE = generate(LOG_HASH_SESSION_SIZE);
export function getLogHashQuery(logHash) {
  return `logHash=${logHash || generateOperationID()}`;
}
export function generateOperationID() {
  return `${LOG_HASH_BASE}${generate(LOG_HASH_SERVICE_SIZE)}`;
}
function randomString(length, chars) {
  let mask = "";
  if (chars.indexOf("a") > -1) mask += "abcdefghijklmnopqrstuvwxyz";
  if (chars.indexOf("A") > -1) mask += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (chars.indexOf("#") > -1) mask += "0123456789";
  if (chars.indexOf("!") > -1) mask += "~`!@#$%^&*()_+-={}[]:\";'<>?,./|\\";
  let result = "";
  for (let i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
  return result;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU1BLHdCQUF3QjtBQUM5QixNQUFNQyx3QkFBd0I7QUFFOUIsU0FBU0MsU0FBU0MsTUFBYztBQUM5QixTQUFPQyxhQUFhRCxNQUFNLElBQUk7QUFDaEM7QUFFQSxNQUFNRSxnQkFBZ0JILFNBQVNGLHFCQUFxQjtBQUU3QyxnQkFBU00sZ0JBQWdCQyxTQUFrQjtBQUNoRCxTQUFPLFdBQVdBLFdBQVdDLG9CQUFvQixDQUFDO0FBQ3BEO0FBS08sZ0JBQVNBLHNCQUFzQjtBQUNwQyxTQUFPLEdBQUdILGFBQWEsR0FBR0gsU0FBU0QscUJBQXFCLENBQUM7QUFDM0Q7QUFFQSxTQUFTRyxhQUFhSyxRQUFnQkMsT0FBZTtBQUNuRCxNQUFJQyxPQUFPO0FBQ1gsTUFBSUQsTUFBTUUsUUFBUSxHQUFHLElBQUksR0FBSUQsU0FBUTtBQUNyQyxNQUFJRCxNQUFNRSxRQUFRLEdBQUcsSUFBSSxHQUFJRCxTQUFRO0FBQ3JDLE1BQUlELE1BQU1FLFFBQVEsR0FBRyxJQUFJLEdBQUlELFNBQVE7QUFDckMsTUFBSUQsTUFBTUUsUUFBUSxHQUFHLElBQUksR0FBSUQsU0FBUTtBQUNyQyxNQUFJRSxTQUFTO0FBQ2IsV0FBU0MsSUFBSUwsUUFBUUssSUFBSSxHQUFHLEVBQUVBLEVBQzVCRCxXQUFVRixLQUFLSSxLQUFLQyxNQUFNRCxLQUFLRSxPQUFPLElBQUlOLEtBQUtGLE1BQU0sQ0FBQztBQUV4RCxTQUFPSTtBQUNUIiwibmFtZXMiOlsiTE9HX0hBU0hfU0VTU0lPTl9TSVpFIiwiTE9HX0hBU0hfU0VSVklDRV9TSVpFIiwiZ2VuZXJhdGUiLCJzaXplIiwicmFuZG9tU3RyaW5nIiwiTE9HX0hBU0hfQkFTRSIsImdldExvZ0hhc2hRdWVyeSIsImxvZ0hhc2giLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwibGVuZ3RoIiwiY2hhcnMiLCJtYXNrIiwiaW5kZXhPZiIsInJlc3VsdCIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsib3BlcmF0aW9uLWlkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IExPR19IQVNIX1NFU1NJT05fU0laRSA9IDk7XHJcbmNvbnN0IExPR19IQVNIX1NFUlZJQ0VfU0laRSA9IDQ7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZShzaXplOiBudW1iZXIpIHtcclxuICByZXR1cm4gcmFuZG9tU3RyaW5nKHNpemUsICdhQScpO1xyXG59XHJcblxyXG5jb25zdCBMT0dfSEFTSF9CQVNFID0gZ2VuZXJhdGUoTE9HX0hBU0hfU0VTU0lPTl9TSVpFKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dIYXNoUXVlcnkobG9nSGFzaD86IHN0cmluZykge1xyXG4gIHJldHVybiBgbG9nSGFzaD0ke2xvZ0hhc2ggfHwgZ2VuZXJhdGVPcGVyYXRpb25JRCgpfWA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmEgdW4gb3BlcmF0aW9uSWQvbG9nSGFzaCBwZXIgbGUgY2hpYW1hdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVPcGVyYXRpb25JRCgpIHtcclxuICByZXR1cm4gYCR7TE9HX0hBU0hfQkFTRX0ke2dlbmVyYXRlKExPR19IQVNIX1NFUlZJQ0VfU0laRSl9YDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKGxlbmd0aDogbnVtYmVyLCBjaGFyczogc3RyaW5nKSB7XHJcbiAgbGV0IG1hc2sgPSAnJztcclxuICBpZiAoY2hhcnMuaW5kZXhPZignYScpID4gLTEpIG1hc2sgKz0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcclxuICBpZiAoY2hhcnMuaW5kZXhPZignQScpID4gLTEpIG1hc2sgKz0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcclxuICBpZiAoY2hhcnMuaW5kZXhPZignIycpID4gLTEpIG1hc2sgKz0gJzAxMjM0NTY3ODknO1xyXG4gIGlmIChjaGFycy5pbmRleE9mKCchJykgPiAtMSkgbWFzayArPSAnfmAhQCMkJV4mKigpXystPXt9W106XCI7XFwnPD4/LC4vfFxcXFwnO1xyXG4gIGxldCByZXN1bHQgPSAnJztcclxuICBmb3IgKGxldCBpID0gbGVuZ3RoOyBpID4gMDsgLS1pKVxyXG4gICAgcmVzdWx0ICs9IG1hc2tbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWFzay5sZW5ndGgpXTtcclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvdXRpbHMvb3BlcmF0aW9uLWlkLnRzIn0=