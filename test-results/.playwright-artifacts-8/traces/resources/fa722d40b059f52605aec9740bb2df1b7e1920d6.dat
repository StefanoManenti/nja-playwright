globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { get } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react-hook-form.js?v=0189a8d1";
export const ERROR_FIELD_DEFAULT = "Questo campo è richiesto";
const ERROR_FIELD_EMAIL = "Inserisci un indirizzo email valido";
const ERROR_FIELD_GIVEN_NAME = "Inserisci il nome";
const ERROR_FIELD_BUSINESS_NAME = "Inserisci la ragione sociale";
const ERROR_FIELD_VAT_NUMBER = "Inserisci la partita IVA";
const ERROR_FIELD_TAX_ID__REQUIRED = "Inserisci il codice fiscale";
const ERROR_FIELD_TAX_OR_VAT_REQUIRED = "Inserisci il codice fiscale o la partita iva";
const ERROR_FIELD_FAMILY_NAME = "Inserisci il cognome";
const ERROR_FIELD_PREFIX_PHONE = "Inserisci il prefisso";
const ERROR_FIELD_PHONE = "Inserisci il telefono";
const ERROR_FIELD_MOBILE = "Inserisci il cellulare";
const ERROR_FIELD_VAT__PATTERN = "Inserisci una partita IVA valida";
const ERROR_FIELD_TAX_ID__PATTERN = "Inserisci un codice fiscale valido";
const ERROR_FIELD_TAX_OR_VAT__PATTERN = "Inserisci un codice fiscale valido o una partita IVA valida";
export const ERROR_FIELD_NUMERO_DOCUMENTO = "Inserisci il numero riportato sul documento";
export const ERROR_FIELD_DATE = "Inserire una data valida nel formato gg/mm/aaaa";
export const MIN_YEAR = 1900;
export const ERROR_FIELD_DATE_RANGE = `Inserire una data valida tra il 01/01/${MIN_YEAR} e oggi`;
export const ERROR_FIELD_ISSUED_BY = "Indica l’ente che ha emesso il documento";
export const ERROR_FIELD_OWNER_SHIP_BY = "Indica a chi appartiene l’immobile?";
const ERROR_FIELD_IBAN = "Inserisci il tuo codice IBAN";
const ERROR_FIELD_IBAN_HOLDER = "Indica il titolare del conto corrente";
const VAT_PATTERN = /^[0-9]{11}$/g;
const TAX_ID_PATTERN = /^(?:(?:[B-DF-HJ-NP-TV-Z]|[AEIOU])[AEIOU][AEIOUX]|[B-DF-HJ-NP-TV-Z]{2}[A-Z]){2}[\dLMNP-V]{2}(?:[A-EHLMPR-T](?:[04LQ][1-9MNP-V]|[1256LMRS][\dLMNP-V])|[DHPS][37PT][0L]|[ACELMRT][37PT][01LM])(?:[A-MZ][1-9MNP-V][\dLMNP-V]{2}|[A-M][0L](?:[1-9MNP-V][\dLMNP-V]|[0L][1-9MNP-V]))[A-Z]$/i;
const TAX_OR_VAT_PATTERN = /(^[0-9]{11}$)|(^(?:(?:[B-DF-HJ-NP-TV-Z]|[AEIOU])[AEIOU][AEIOUX]|[B-DF-HJ-NP-TV-Z]{2}[A-Z]){2}[\dLMNP-V]{2}(?:[A-EHLMPR-T](?:[04LQ][1-9MNP-V]|[1256LMRS][\dLMNP-V])|[DHPS][37PT][0L]|[ACELMRT][37PT][01LM])(?:[A-MZ][1-9MNP-V][\dLMNP-V]{2}|[A-M][0L](?:[1-9MNP-V][\dLMNP-V]|[0L][1-9MNP-V]))[A-Z]$)/i;
const EMAIL_PATTERN = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
const PHONE_PATTERN = /^\d*$/g;
const VAT_NUMBER_PATTERN = /^(\d{11}|[A-Z]{2}[A-Z0-9]{4,12})$/;
const POD_PATTERN = /^IT(?!000)\d{3}E\d{7}[\dA|][\dA-Z]?$/gi;
const PDR_PATTERN = /^(?!0000)[0-9]{14}$/g;
const SDI_PATTERN = /^[A-Za-z0-9]{12}$/;
const transformStringRegisterOptions = (setValueAs) => ({
  setValueAs,
  onBlur: (e) => {
    e.target.value = setValueAs(e.target.value);
  }
});
const podLength = {
  min: 14,
  max: 15
};
export const upperCaseRegisterOptions = transformStringRegisterOptions((value) => value.toUpperCase().trim());
export const lowerCaseRegisterOptions = transformStringRegisterOptions((value) => value.toLowerCase().trim());
export const phoneRegisterOptions = transformStringRegisterOptions((value) => value.replace(/[a-zA-Zàèéòùì[\]\\_!"£$%&/()=?^°<>{}ç*#¶@§;|.,:-]/gi, ""));
export const trimRegisterOptions = transformStringRegisterOptions((value) => value.trim());
export const taxIdRegisterOptions = {
  required: ERROR_FIELD_TAX_ID__REQUIRED,
  pattern: {
    value: TAX_ID_PATTERN,
    message: ERROR_FIELD_TAX_ID__PATTERN
  },
  ...upperCaseRegisterOptions
};
export const vatNumberRegisterOptions = {
  required: ERROR_FIELD_VAT_NUMBER,
  pattern: {
    value: VAT_NUMBER_PATTERN,
    message: ERROR_FIELD_VAT__PATTERN
  }
};
export const businessTaxIdRegisterOptions = {
  required: ERROR_FIELD_TAX_ID__REQUIRED,
  pattern: {
    value: VAT_PATTERN,
    message: ERROR_FIELD_TAX_ID__PATTERN
  }
};
export const taxOrVatRegisterOptions = {
  required: ERROR_FIELD_TAX_OR_VAT_REQUIRED,
  pattern: {
    value: TAX_OR_VAT_PATTERN,
    message: ERROR_FIELD_TAX_OR_VAT__PATTERN
  },
  ...upperCaseRegisterOptions
};
export const emailRegisterOptions = {
  required: ERROR_FIELD_EMAIL,
  pattern: {
    value: EMAIL_PATTERN,
    message: ERROR_FIELD_EMAIL
  },
  ...lowerCaseRegisterOptions
};
export const givenNameRegisterOptions = {
  required: ERROR_FIELD_GIVEN_NAME,
  ...upperCaseRegisterOptions
};
export const familyNameRegisterOptions = {
  required: ERROR_FIELD_FAMILY_NAME,
  ...upperCaseRegisterOptions
};
export const landlinePhoneRegisterOptions = {
  required: ERROR_FIELD_PHONE,
  pattern: PHONE_PATTERN,
  ...phoneRegisterOptions
};
export const mobilePhoneRegisterOptions = {
  required: ERROR_FIELD_MOBILE,
  pattern: PHONE_PATTERN,
  ...phoneRegisterOptions
  // TODO setup mobile keyboard accordingly
};
export const phoneCountryCodeRegisterOptions = {
  required: ERROR_FIELD_PREFIX_PHONE
  // TODO setup mobile keyboard accordingly
};
export const podRegisterOptions = {
  required: true,
  pattern: POD_PATTERN,
  ...upperCaseRegisterOptions
};
export const pdrRegisterOptions = {
  required: true,
  pattern: PDR_PATTERN
};
export const positiveIntegerRegisterOptions = {
  ...transformStringRegisterOptions((value) => value.replace(/[^0-9]/g, "")),
  required: true,
  pattern: /^[0-9]+$/g
};
export const sdiRegisterOptions = {
  required: true,
  pattern: SDI_PATTERN
};
export const ibanRegisterOptions = {
  required: ERROR_FIELD_IBAN,
  ...transformStringRegisterOptions((value) => value.toUpperCase().replace(/[^A-Z0-9]/g, ""))
};
export const registerGivenName = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      required: ERROR_FIELD_GIVEN_NAME,
      ...upperCaseRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Nome",
    autoComplete: "given-name",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerBusinessName = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      required: ERROR_FIELD_BUSINESS_NAME,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Ragione sociale",
    autoCapitalize: "characters"
  };
};
export const registerIntercomName = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      required: ERROR_FIELD_DEFAULT,
      ...upperCaseRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Nominativo sul citofono",
    placeholder: "Nome e cognome",
    autoComplete: "name",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerTaxId = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...taxIdRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Codice fiscale",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerEmail = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...emailRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    placeholder: "Inserisci qui la tua email",
    helperText: get(errors, name)?.message || "Riceverai a questo indirizzo il contratto della fornitura. Se hai già fatto la registrazione nell’Area Personale, usa la stessa email.",
    label: "Mail",
    autoComplete: "email",
    type: "email",
    style: {
      textTransform: "lowercase"
    },
    inputMode: "email"
  };
};
export const registerFamilyName = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...familyNameRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Cognome",
    autoComplete: "family-name",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerLandlinePhone = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...landlinePhoneRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Numero telefono",
    autoComplete: "home tel-national",
    type: "tel",
    size: 10,
    maxLength: 16,
    inputMode: "tel"
  };
};
export const registerMobilePhone = (methods, name, {
  countryCodeName,
  ...options
}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...mobilePhoneRegisterOptions,
      ...options,
      validate: (value, formValues) => {
        const phoneCountryCode = formValues[countryCodeName];
        if (phoneCountryCode === "+39" && value[0] !== "3") {
          return "Inserisci un numero di cellulare valido";
        }
      }
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Numero cellulare",
    autoComplete: "mobile tel-national",
    type: "tel",
    size: 10,
    maxLength: 16,
    inputMode: "tel"
  };
};
export const registerPhoneCountryCode = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...phoneCountryCodeRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Prefisso",
    size: 3,
    inputMode: "tel"
  };
};
export const registerPod = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...podRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message || "È il codice alfanumerico di 14 o 15 cifre che inizia sempre con IT",
    minLength: podLength.min,
    maxLength: podLength.max,
    label: "POD",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerPdr = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...pdrRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message || "Il codice PDR è composta da 14 cifre",
    label: "PDR",
    style: {
      textTransform: "uppercase"
    },
    inputMode: "numeric"
  };
};
export const registerEstimatedGasConsumption = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...positiveIntegerRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message || "È la somma dei consumi fatturati negli ultimi 12 mesi, solitamente indicata nella seconda pagina della bolletta",
    label: "Consumo annuo (Smc)",
    inputMode: "numeric"
  };
};
export const registerIban = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...ibanRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Inserisci il tuo codice IBAN",
    style: {
      textTransform: "uppercase"
    },
    autoCapitalize: "characters"
  };
};
export const registerBusinessTaxId = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...businessTaxIdRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Codice fiscale",
    style: {
      textTransform: "uppercase"
    },
    inputMode: "numeric"
  };
};
export const registerVatNumber = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...vatNumberRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "P.IVA",
    style: {
      textTransform: "uppercase"
    },
    inputMode: "numeric"
  };
};
export const registerTaxOrVat = (methods, name, options = {}) => {
  const {
    register,
    formState: {
      errors
    }
  } = methods;
  return {
    ...register(name, {
      ...taxOrVatRegisterOptions,
      ...options
    }),
    error: !!get(errors, name),
    helperText: get(errors, name)?.message,
    label: "Codice fiscale",
    style: {
      textTransform: "uppercase"
    },
    inputMode: "numeric"
  };
};

//# sourceMappingURL=data:application/json;base64,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QU8sQ0FBQyxDQUFDMUUsSUFBSXlFLFFBQVFKLElBQUk7QUFBQSxJQUN6Qk0sWUFBWTNFLElBQUl5RSxRQUFRSixJQUFJLEdBQUdqQjtBQUFBQSxJQUMvQndCLE9BQU87QUFBQSxJQUNQRSxPQUFPO0FBQUEsTUFBRUMsZUFBZTtBQUFBLElBQVk7QUFBQSxJQUNwQ1EsV0FBVztBQUFBLEVBQ2I7QUFDRiIsIm5hbWVzIjpbImdldCIsIkVSUk9SX0ZJRUxEX0RFRkFVTFQiLCJFUlJPUl9GSUVMRF9FTUFJTCIsIkVSUk9SX0ZJRUxEX0dJVkVOX05BTUUiLCJFUlJPUl9GSUVMRF9CVVNJTkVTU19OQU1FIiwiRVJST1JfRklFTERfVkFUX05VTUJFUiIsIkVSUk9SX0ZJRUxEX1RBWF9JRF9fUkVRVUlSRUQiLCJFUlJPUl9GSUVMRF9UQVhfT1JfVkFUX1JFUVVJUkVEIiwiRVJST1JfRklFTERfRkFNSUxZX05BTUUiLCJFUlJPUl9GSUVMRF9QUkVGSVhfUEhPTkUiLCJFUlJPUl9GSUVMRF9QSE9ORSIsIkVSUk9SX0ZJRUxEX01PQklMRSIsIkVSUk9SX0ZJRUxEX1ZBVF9fUEFUVEVSTiIsIkVSUk9SX0ZJRUxEX1RBWF9JRF9fUEFUVEVSTiIsIkVSUk9SX0ZJRUxEX1RBWF9PUl9WQVRfX1BBVFRFUk4iLCJFUlJPUl9GSUVMRF9OVU1FUk9fRE9DVU1FTlRPIiwiRVJST1JfRklFTERfREFURSIsIk1JTl9ZRUFSIiwiRVJST1JfRklFTERfREFURV9SQU5HRSIsIkVSUk9SX0ZJRUxEX0lTU1VFRF9CWSIsIkVSUk9SX0ZJRUxEX09XTkVSX1NISVBfQlkiLCJFUlJPUl9GSUVMRF9JQkFOIiwiRVJST1JfRklFTERfSUJBTl9IT0xERVIiLCJWQVRfUEFUVEVSTiIsIlRBWF9JRF9QQVRURVJOIiwiVEFYX09SX1ZBVF9QQVRURVJOIiwiRU1BSUxfUEFUVEVSTiIsIlBIT05FX1BBVFRFUk4iLCJWQVRfTlVNQkVSX1BBVFRFUk4iLCJQT0RfUEFUVEVSTiIsIlBEUl9QQVRURVJOIiwiU0RJX1BBVFRFUk4iLCJ0cmFuc2Zvcm1TdHJpbmdSZWdpc3Rlck9wdGlvbnMiLCJzZXRWYWx1ZUFzIiwib25CbHVyIiwiZSIsInRhcmdldCIsInZhbHVlIiwicG9kTGVuZ3RoIiwibWluIiwibWF4IiwidXBwZXJDYXNlUmVnaXN0ZXJPcHRpb25zIiwidG9VcHBlckNhc2UiLCJ0cmltIiwibG93ZXJDYXNlUmVnaXN0ZXJPcHRpb25zIiwidG9Mb3dlckNhc2UiLCJwaG9uZVJlZ2lzdGVyT3B0aW9ucyIsInJlcGxhY2UiLCJ0cmltUmVnaXN0ZXJPcHRpb25zIiwidGF4SWRSZWdpc3Rlck9wdGlvbnMiLCJyZXF1aXJlZCIsInBhdHRlcm4iLCJtZXNzYWdlIiwidmF0TnVtYmVyUmVnaXN0ZXJPcHRpb25zIiwiYnVzaW5lc3NUYXhJZFJlZ2lzdGVyT3B0aW9ucyIsInRheE9yVmF0UmVnaXN0ZXJPcHRpb25zIiwiZW1haWxSZWdpc3Rlck9wdGlvbnMiLCJnaXZlbk5hbWVSZWdpc3Rlck9wdGlvbnMiLCJmYW1pbHlOYW1lUmVnaXN0ZXJPcHRpb25zIiwibGFuZGxpbmVQaG9uZVJlZ2lzdGVyT3B0aW9ucyIsIm1vYmlsZVBob25lUmVnaXN0ZXJPcHRpb25zIiwicGhvbmVDb3VudHJ5Q29kZVJlZ2lzdGVyT3B0aW9ucyIsInBvZFJlZ2lzdGVyT3B0aW9ucyIsInBkclJlZ2lzdGVyT3B0aW9ucyIsInBvc2l0aXZlSW50ZWdlclJlZ2lzdGVyT3B0aW9ucyIsInNkaVJlZ2lzdGVyT3B0aW9ucyIsImliYW5SZWdpc3Rlck9wdGlvbnMiLCJyZWdpc3RlckdpdmVuTmFtZSIsIm1ldGhvZHMiLCJuYW1lIiwib3B0aW9ucyIsInJlZ2lzdGVyIiwiZm9ybVN0YXRlIiwiZXJyb3JzIiwiZXJyb3IiLCJoZWxwZXJUZXh0IiwibGFiZWwiLCJhdXRvQ29tcGxldGUiLCJzdHlsZSIsInRleHRUcmFuc2Zvcm0iLCJhdXRvQ2FwaXRhbGl6ZSIsInJlZ2lzdGVyQnVzaW5lc3NOYW1lIiwicmVnaXN0ZXJJbnRlcmNvbU5hbWUiLCJwbGFjZWhvbGRlciIsInJlZ2lzdGVyVGF4SWQiLCJyZWdpc3RlckVtYWlsIiwidHlwZSIsImlucHV0TW9kZSIsInJlZ2lzdGVyRmFtaWx5TmFtZSIsInJlZ2lzdGVyTGFuZGxpbmVQaG9uZSIsInNpemUiLCJtYXhMZW5ndGgiLCJyZWdpc3Rlck1vYmlsZVBob25lIiwiY291bnRyeUNvZGVOYW1lIiwidmFsaWRhdGUiLCJmb3JtVmFsdWVzIiwicGhvbmVDb3VudHJ5Q29kZSIsInJlZ2lzdGVyUGhvbmVDb3VudHJ5Q29kZSIsInJlZ2lzdGVyUG9kIiwibWluTGVuZ3RoIiwicmVnaXN0ZXJQZHIiLCJyZWdpc3RlckVzdGltYXRlZEdhc0NvbnN1bXB0aW9uIiwicmVnaXN0ZXJJYmFuIiwicmVnaXN0ZXJCdXNpbmVzc1RheElkIiwicmVnaXN0ZXJWYXROdW1iZXIiLCJyZWdpc3RlclRheE9yVmF0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInZhbGlkYXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAbngvZW5mb3JjZS1tb2R1bGUtYm91bmRhcmllc1xyXG5pbXBvcnQgdHlwZSB7IFRleHRGaWVsZFByb3BzIH0gZnJvbSAnQG5hai13by91aS1hdG9tcyc7XHJcbmltcG9ydCB7IGdldCB9IGZyb20gJ3JlYWN0LWhvb2stZm9ybSc7XHJcbmltcG9ydCB7IEZpZWxkVmFsdWVzIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtL2Rpc3QvdHlwZXMvZmllbGRzJztcclxuaW1wb3J0IHsgVXNlRm9ybVJldHVybiB9IGZyb20gJ3JlYWN0LWhvb2stZm9ybS9kaXN0L3R5cGVzL2Zvcm0nO1xyXG5pbXBvcnQgeyBGaWVsZFBhdGggfSBmcm9tICdyZWFjdC1ob29rLWZvcm0vZGlzdC90eXBlcy9wYXRoJztcclxuaW1wb3J0IHR5cGUgeyBSZWdpc3Rlck9wdGlvbnMgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0vZGlzdC90eXBlcy92YWxpZGF0b3InO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVSUk9SX0ZJRUxEX0RFRkFVTFQgPSAnUXVlc3RvIGNhbXBvIMOoIHJpY2hpZXN0byc7XHJcblxyXG5jb25zdCBFUlJPUl9GSUVMRF9FTUFJTCA9ICdJbnNlcmlzY2kgdW4gaW5kaXJpenpvIGVtYWlsIHZhbGlkbyc7XHJcbmNvbnN0IEVSUk9SX0ZJRUxEX0dJVkVOX05BTUUgPSAnSW5zZXJpc2NpIGlsIG5vbWUnO1xyXG5jb25zdCBFUlJPUl9GSUVMRF9CVVNJTkVTU19OQU1FID0gJ0luc2VyaXNjaSBsYSByYWdpb25lIHNvY2lhbGUnO1xyXG5jb25zdCBFUlJPUl9GSUVMRF9WQVRfTlVNQkVSID0gJ0luc2VyaXNjaSBsYSBwYXJ0aXRhIElWQSc7XHJcbmNvbnN0IEVSUk9SX0ZJRUxEX1RBWF9JRF9fUkVRVUlSRUQgPSAnSW5zZXJpc2NpIGlsIGNvZGljZSBmaXNjYWxlJztcclxuY29uc3QgRVJST1JfRklFTERfVEFYX09SX1ZBVF9SRVFVSVJFRCA9XHJcbiAgJ0luc2VyaXNjaSBpbCBjb2RpY2UgZmlzY2FsZSBvIGxhIHBhcnRpdGEgaXZhJztcclxuY29uc3QgRVJST1JfRklFTERfRkFNSUxZX05BTUUgPSAnSW5zZXJpc2NpIGlsIGNvZ25vbWUnO1xyXG5jb25zdCBFUlJPUl9GSUVMRF9QUkVGSVhfUEhPTkUgPSAnSW5zZXJpc2NpIGlsIHByZWZpc3NvJztcclxuY29uc3QgRVJST1JfRklFTERfUEhPTkUgPSAnSW5zZXJpc2NpIGlsIHRlbGVmb25vJztcclxuY29uc3QgRVJST1JfRklFTERfTU9CSUxFID0gJ0luc2VyaXNjaSBpbCBjZWxsdWxhcmUnO1xyXG5cclxuY29uc3QgRVJST1JfRklFTERfVkFUX19QQVRURVJOID0gJ0luc2VyaXNjaSB1bmEgcGFydGl0YSBJVkEgdmFsaWRhJztcclxuY29uc3QgRVJST1JfRklFTERfVEFYX0lEX19QQVRURVJOID0gJ0luc2VyaXNjaSB1biBjb2RpY2UgZmlzY2FsZSB2YWxpZG8nO1xyXG5jb25zdCBFUlJPUl9GSUVMRF9UQVhfT1JfVkFUX19QQVRURVJOID1cclxuICAnSW5zZXJpc2NpIHVuIGNvZGljZSBmaXNjYWxlIHZhbGlkbyBvIHVuYSBwYXJ0aXRhIElWQSB2YWxpZGEnO1xyXG5cclxuLy8gSWRlbnRpdHlcclxuZXhwb3J0IGNvbnN0IEVSUk9SX0ZJRUxEX05VTUVST19ET0NVTUVOVE8gPVxyXG4gICdJbnNlcmlzY2kgaWwgbnVtZXJvIHJpcG9ydGF0byBzdWwgZG9jdW1lbnRvJztcclxuZXhwb3J0IGNvbnN0IEVSUk9SX0ZJRUxEX0RBVEUgPVxyXG4gICdJbnNlcmlyZSB1bmEgZGF0YSB2YWxpZGEgbmVsIGZvcm1hdG8gZ2cvbW0vYWFhYSc7XHJcbmV4cG9ydCBjb25zdCBNSU5fWUVBUiA9IDE5MDA7XHJcbmV4cG9ydCBjb25zdCBFUlJPUl9GSUVMRF9EQVRFX1JBTkdFID0gYEluc2VyaXJlIHVuYSBkYXRhIHZhbGlkYSB0cmEgaWwgMDEvMDEvJHtNSU5fWUVBUn0gZSBvZ2dpYDtcclxuZXhwb3J0IGNvbnN0IEVSUk9SX0ZJRUxEX0lTU1VFRF9CWSA9ICdJbmRpY2EgbOKAmWVudGUgY2hlIGhhIGVtZXNzbyBpbCBkb2N1bWVudG8nO1xyXG5leHBvcnQgY29uc3QgRVJST1JfRklFTERfT1dORVJfU0hJUF9CWSA9ICdJbmRpY2EgYSBjaGkgYXBwYXJ0aWVuZSBs4oCZaW1tb2JpbGU/JztcclxuXHJcbi8vIEliYW5cclxuY29uc3QgRVJST1JfRklFTERfSUJBTiA9ICdJbnNlcmlzY2kgaWwgdHVvIGNvZGljZSBJQkFOJztcclxuY29uc3QgRVJST1JfRklFTERfSUJBTl9IT0xERVIgPSAnSW5kaWNhIGlsIHRpdG9sYXJlIGRlbCBjb250byBjb3JyZW50ZSc7XHJcblxyXG4vKipcclxuICogVmFsaWRhIHNlIHVuYSBwYXJ0aXRhIElWQSDDqCBjb3JyZXR0YVxyXG4gKi9cclxuY29uc3QgVkFUX1BBVFRFUk4gPSAvXlswLTldezExfSQvZztcclxuXHJcbi8vIFRha2VuIGZyb20gYXMtaXMgXCJlbmktd29cIiBwcm9qZWN0OlxyXG5jb25zdCBUQVhfSURfUEFUVEVSTiA9XHJcbiAgL14oPzooPzpbQi1ERi1ISi1OUC1UVi1aXXxbQUVJT1VdKVtBRUlPVV1bQUVJT1VYXXxbQi1ERi1ISi1OUC1UVi1aXXsyfVtBLVpdKXsyfVtcXGRMTU5QLVZdezJ9KD86W0EtRUhMTVBSLVRdKD86WzA0TFFdWzEtOU1OUC1WXXxbMTI1NkxNUlNdW1xcZExNTlAtVl0pfFtESFBTXVszN1BUXVswTF18W0FDRUxNUlRdWzM3UFRdWzAxTE1dKSg/OltBLU1aXVsxLTlNTlAtVl1bXFxkTE1OUC1WXXsyfXxbQS1NXVswTF0oPzpbMS05TU5QLVZdW1xcZExNTlAtVl18WzBMXVsxLTlNTlAtVl0pKVtBLVpdJC9pO1xyXG5cclxuLy8gVW5pb24gb2YgVkFUX1BBVFRFUk4gYW5kIFRBWF9JRF9QQVRURVJOLlxyXG5jb25zdCBUQVhfT1JfVkFUX1BBVFRFUk4gPVxyXG4gIC8oXlswLTldezExfSQpfCheKD86KD86W0ItREYtSEotTlAtVFYtWl18W0FFSU9VXSlbQUVJT1VdW0FFSU9VWF18W0ItREYtSEotTlAtVFYtWl17Mn1bQS1aXSl7Mn1bXFxkTE1OUC1WXXsyfSg/OltBLUVITE1QUi1UXSg/OlswNExRXVsxLTlNTlAtVl18WzEyNTZMTVJTXVtcXGRMTU5QLVZdKXxbREhQU11bMzdQVF1bMExdfFtBQ0VMTVJUXVszN1BUXVswMUxNXSkoPzpbQS1NWl1bMS05TU5QLVZdW1xcZExNTlAtVl17Mn18W0EtTV1bMExdKD86WzEtOU1OUC1WXVtcXGRMTU5QLVZdfFswTF1bMS05TU5QLVZdKSlbQS1aXSQpL2k7XHJcblxyXG4vLyBUYWtlbiBmcm9tIGFzLWlzIFwiZW5pLXdvXCIgcHJvamVjdDpcclxuY29uc3QgRU1BSUxfUEFUVEVSTiA9XHJcbiAgL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuXHJcbmNvbnN0IFBIT05FX1BBVFRFUk4gPSAvXlxcZCokL2c7XHJcblxyXG5jb25zdCBWQVRfTlVNQkVSX1BBVFRFUk4gPSAvXihcXGR7MTF9fFtBLVpdezJ9W0EtWjAtOV17NCwxMn0pJC87XHJcbi8qKlxyXG4gKiBWYWxpZGEgc2UgdW4gbnVtZXJvIMOoIHVuIFBPRCBjb3JyZXR0b1xyXG4gKiAtIEluaXppYSBjb24gSVRcclxuICogLSBDb2RpY2UgZGlzdHJpYnV0b3JlOiAzIGNpZnJlIChkaXZlcnNlIGRhIDAwMClcclxuICogLSBDb2RpY2UgZGkgc2Vydml6aW86IEUgKGVsZXR0cmljaXTDoClcclxuICogLSBQdW50byBkaSBwcmVsaWV2bzogOCBjaWZyZSAobyBBKSAobyBsYSBwaXBlPz8pXHJcbiAqIC0gQ2FyYXR0ZXJlIGRpIGNvbnRyb2xsbyBvcHppb25hbGUuXHJcbiAqL1xyXG5jb25zdCBQT0RfUEFUVEVSTiA9IC9eSVQoPyEwMDApXFxkezN9RVxcZHs3fVtcXGRBfF1bXFxkQS1aXT8kL2dpO1xyXG4vKipcclxuICogVmFsaWRhIHNlIHVuIG51bWVybyDDqCB1biBQRFIgY29ycmV0dG9cclxuICovXHJcbmNvbnN0IFBEUl9QQVRURVJOID0gL14oPyEwMDAwKVswLTldezE0fSQvZztcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGEgc2UgdW4gY29kaWNlIHNkaSDDqCBjb3JyZXR0by5cclxuICogU0RJIGRldmUgYXZlcmUgMTIgY2FyYXR0ZXJpLlxyXG4gKi9cclxuY29uc3QgU0RJX1BBVFRFUk4gPSAvXltBLVphLXowLTldezEyfSQvO1xyXG5cclxuY29uc3QgdHJhbnNmb3JtU3RyaW5nUmVnaXN0ZXJPcHRpb25zID0gKFxyXG4gIHNldFZhbHVlQXM6ICh2YWx1ZTogc3RyaW5nKSA9PiBzdHJpbmdcclxuKTogUGljazxSZWdpc3Rlck9wdGlvbnMsICdzZXRWYWx1ZUFzJyB8ICdvbkJsdXInPiA9PiAoe1xyXG4gIHNldFZhbHVlQXM6IHNldFZhbHVlQXMsXHJcbiAgb25CbHVyOiAoZSkgPT4ge1xyXG4gICAgZS50YXJnZXQudmFsdWUgPSBzZXRWYWx1ZUFzKGUudGFyZ2V0LnZhbHVlKTtcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IHBvZExlbmd0aCA9IHsgbWluOiAxNCwgbWF4OiAxNSB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVwcGVyQ2FzZVJlZ2lzdGVyT3B0aW9ucyA9IHRyYW5zZm9ybVN0cmluZ1JlZ2lzdGVyT3B0aW9ucyhcclxuICAodmFsdWUpID0+IHZhbHVlLnRvVXBwZXJDYXNlKCkudHJpbSgpXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgbG93ZXJDYXNlUmVnaXN0ZXJPcHRpb25zID0gdHJhbnNmb3JtU3RyaW5nUmVnaXN0ZXJPcHRpb25zKFxyXG4gICh2YWx1ZSkgPT4gdmFsdWUudG9Mb3dlckNhc2UoKS50cmltKClcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBwaG9uZVJlZ2lzdGVyT3B0aW9ucyA9IHRyYW5zZm9ybVN0cmluZ1JlZ2lzdGVyT3B0aW9ucygodmFsdWUpID0+XHJcbiAgdmFsdWUucmVwbGFjZSgvW2EtekEtWsOgw6jDqcOyw7nDrFtcXF1cXFxcXyFcIsKjJCUmLygpPT9ewrA8Pnt9w6cqI8K2QMKnO3wuLDotXS9naSwgJycpXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgdHJpbVJlZ2lzdGVyT3B0aW9ucyA9IHRyYW5zZm9ybVN0cmluZ1JlZ2lzdGVyT3B0aW9ucygodmFsdWUpID0+XHJcbiAgdmFsdWUudHJpbSgpXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgdGF4SWRSZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX1RBWF9JRF9fUkVRVUlSRUQsXHJcbiAgcGF0dGVybjoge1xyXG4gICAgdmFsdWU6IFRBWF9JRF9QQVRURVJOLFxyXG4gICAgbWVzc2FnZTogRVJST1JfRklFTERfVEFYX0lEX19QQVRURVJOLFxyXG4gIH0sXHJcbiAgLi4udXBwZXJDYXNlUmVnaXN0ZXJPcHRpb25zLFxyXG59IHNhdGlzZmllcyBQYXJ0aWFsPFJlZ2lzdGVyT3B0aW9ucz47XHJcblxyXG5leHBvcnQgY29uc3QgdmF0TnVtYmVyUmVnaXN0ZXJPcHRpb25zID0ge1xyXG4gIHJlcXVpcmVkOiBFUlJPUl9GSUVMRF9WQVRfTlVNQkVSLFxyXG4gIHBhdHRlcm46IHtcclxuICAgIHZhbHVlOiBWQVRfTlVNQkVSX1BBVFRFUk4sXHJcbiAgICBtZXNzYWdlOiBFUlJPUl9GSUVMRF9WQVRfX1BBVFRFUk4sXHJcbiAgfSxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1c2luZXNzVGF4SWRSZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX1RBWF9JRF9fUkVRVUlSRUQsXHJcbiAgcGF0dGVybjoge1xyXG4gICAgdmFsdWU6IFZBVF9QQVRURVJOLFxyXG4gICAgbWVzc2FnZTogRVJST1JfRklFTERfVEFYX0lEX19QQVRURVJOLFxyXG4gIH0sXHJcbn0gc2F0aXNmaWVzIFBhcnRpYWw8UmVnaXN0ZXJPcHRpb25zPjtcclxuXHJcbmV4cG9ydCBjb25zdCB0YXhPclZhdFJlZ2lzdGVyT3B0aW9ucyA9IHtcclxuICByZXF1aXJlZDogRVJST1JfRklFTERfVEFYX09SX1ZBVF9SRVFVSVJFRCxcclxuICBwYXR0ZXJuOiB7XHJcbiAgICB2YWx1ZTogVEFYX09SX1ZBVF9QQVRURVJOLFxyXG4gICAgbWVzc2FnZTogRVJST1JfRklFTERfVEFYX09SX1ZBVF9fUEFUVEVSTixcclxuICB9LFxyXG4gIC4uLnVwcGVyQ2FzZVJlZ2lzdGVyT3B0aW9ucyxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGVtYWlsUmVnaXN0ZXJPcHRpb25zID0ge1xyXG4gIHJlcXVpcmVkOiBFUlJPUl9GSUVMRF9FTUFJTCxcclxuICBwYXR0ZXJuOiB7XHJcbiAgICB2YWx1ZTogRU1BSUxfUEFUVEVSTixcclxuICAgIG1lc3NhZ2U6IEVSUk9SX0ZJRUxEX0VNQUlMLFxyXG4gIH0sXHJcbiAgLi4ubG93ZXJDYXNlUmVnaXN0ZXJPcHRpb25zLFxyXG59IHNhdGlzZmllcyBQYXJ0aWFsPFJlZ2lzdGVyT3B0aW9ucz47XHJcblxyXG5leHBvcnQgY29uc3QgZ2l2ZW5OYW1lUmVnaXN0ZXJPcHRpb25zID0ge1xyXG4gIHJlcXVpcmVkOiBFUlJPUl9GSUVMRF9HSVZFTl9OQU1FLFxyXG4gIC4uLnVwcGVyQ2FzZVJlZ2lzdGVyT3B0aW9ucyxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZhbWlseU5hbWVSZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX0ZBTUlMWV9OQU1FLFxyXG4gIC4uLnVwcGVyQ2FzZVJlZ2lzdGVyT3B0aW9ucyxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxhbmRsaW5lUGhvbmVSZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX1BIT05FLFxyXG4gIHBhdHRlcm46IFBIT05FX1BBVFRFUk4sXHJcbiAgLi4ucGhvbmVSZWdpc3Rlck9wdGlvbnMsXHJcbn0gc2F0aXNmaWVzIFBhcnRpYWw8UmVnaXN0ZXJPcHRpb25zPjtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2JpbGVQaG9uZVJlZ2lzdGVyT3B0aW9ucyA9IHtcclxuICByZXF1aXJlZDogRVJST1JfRklFTERfTU9CSUxFLFxyXG4gIHBhdHRlcm46IFBIT05FX1BBVFRFUk4sXHJcbiAgLi4ucGhvbmVSZWdpc3Rlck9wdGlvbnMsXHJcbiAgLy8gVE9ETyBzZXR1cCBtb2JpbGUga2V5Ym9hcmQgYWNjb3JkaW5nbHlcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBob25lQ291bnRyeUNvZGVSZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX1BSRUZJWF9QSE9ORSxcclxuICAvLyBUT0RPIHNldHVwIG1vYmlsZSBrZXlib2FyZCBhY2NvcmRpbmdseVxyXG59IHNhdGlzZmllcyBQYXJ0aWFsPFJlZ2lzdGVyT3B0aW9ucz47XHJcblxyXG5leHBvcnQgY29uc3QgcG9kUmVnaXN0ZXJPcHRpb25zID0ge1xyXG4gIHJlcXVpcmVkOiB0cnVlLFxyXG4gIHBhdHRlcm46IFBPRF9QQVRURVJOLFxyXG4gIC4uLnVwcGVyQ2FzZVJlZ2lzdGVyT3B0aW9ucyxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBkclJlZ2lzdGVyT3B0aW9ucyA9IHtcclxuICByZXF1aXJlZDogdHJ1ZSxcclxuICBwYXR0ZXJuOiBQRFJfUEFUVEVSTixcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvc2l0aXZlSW50ZWdlclJlZ2lzdGVyT3B0aW9ucyA9IHtcclxuICAuLi50cmFuc2Zvcm1TdHJpbmdSZWdpc3Rlck9wdGlvbnMoKHZhbHVlKSA9PiB2YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpKSxcclxuICByZXF1aXJlZDogdHJ1ZSxcclxuICBwYXR0ZXJuOiAvXlswLTldKyQvZyxcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNkaVJlZ2lzdGVyT3B0aW9ucyA9IHtcclxuICByZXF1aXJlZDogdHJ1ZSxcclxuICBwYXR0ZXJuOiBTRElfUEFUVEVSTixcclxufSBzYXRpc2ZpZXMgUGFydGlhbDxSZWdpc3Rlck9wdGlvbnM+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGliYW5SZWdpc3Rlck9wdGlvbnMgPSB7XHJcbiAgcmVxdWlyZWQ6IEVSUk9SX0ZJRUxEX0lCQU4sXHJcbiAgLi4udHJhbnNmb3JtU3RyaW5nUmVnaXN0ZXJPcHRpb25zKCh2YWx1ZSkgPT5cclxuICAgIHZhbHVlLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvW15BLVowLTldL2csICcnKVxyXG4gICksXHJcbn0gc2F0aXNmaWVzIFBhcnRpYWw8UmVnaXN0ZXJPcHRpb25zPjtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlckdpdmVuTmFtZSA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICByZXF1aXJlZDogRVJST1JfRklFTERfR0lWRU5fTkFNRSxcclxuICAgICAgLi4udXBwZXJDYXNlUmVnaXN0ZXJPcHRpb25zLFxyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgfSksXHJcbiAgICBlcnJvcjogISFnZXQoZXJyb3JzLCBuYW1lKSxcclxuICAgIGhlbHBlclRleHQ6IGdldChlcnJvcnMsIG5hbWUpPy5tZXNzYWdlLFxyXG4gICAgbGFiZWw6ICdOb21lJyxcclxuICAgIGF1dG9Db21wbGV0ZTogJ2dpdmVuLW5hbWUnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlckJ1c2luZXNzTmFtZSA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICByZXF1aXJlZDogRVJST1JfRklFTERfQlVTSU5FU1NfTkFNRSxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH0pLFxyXG4gICAgZXJyb3I6ICEhZ2V0KGVycm9ycywgbmFtZSksXHJcbiAgICBoZWxwZXJUZXh0OiBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSxcclxuICAgIGxhYmVsOiAnUmFnaW9uZSBzb2NpYWxlJyxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlckludGVyY29tTmFtZSA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICByZXF1aXJlZDogRVJST1JfRklFTERfREVGQVVMVCxcclxuICAgICAgLi4udXBwZXJDYXNlUmVnaXN0ZXJPcHRpb25zLFxyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgfSksXHJcbiAgICBlcnJvcjogISFnZXQoZXJyb3JzLCBuYW1lKSxcclxuICAgIGhlbHBlclRleHQ6IGdldChlcnJvcnMsIG5hbWUpPy5tZXNzYWdlLFxyXG4gICAgbGFiZWw6ICdOb21pbmF0aXZvIHN1bCBjaXRvZm9ubycsXHJcbiAgICBwbGFjZWhvbGRlcjogJ05vbWUgZSBjb2dub21lJyxcclxuICAgIGF1dG9Db21wbGV0ZTogJ25hbWUnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclRheElkID0gPFxyXG4gIFRGaWVsZFZhbHVlcyBleHRlbmRzIEZpZWxkVmFsdWVzLFxyXG4gIFRGaWVsZE5hbWUgZXh0ZW5kcyBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPiA9IEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+XHJcbj4oXHJcbiAgbWV0aG9kczogVXNlRm9ybVJldHVybjxURmllbGRWYWx1ZXM+LFxyXG4gIG5hbWU6IFRGaWVsZE5hbWUsXHJcbiAgb3B0aW9uczogT21pdDxcclxuICAgIFJlZ2lzdGVyT3B0aW9uczxURmllbGRWYWx1ZXMsIFRGaWVsZE5hbWU+LFxyXG4gICAgJ3ZhbHVlQXNEYXRlJyB8ICd2YWx1ZUFzTnVtYmVyJ1xyXG4gID4gPSB7fVxyXG4pOiBUZXh0RmllbGRQcm9wcyA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXHJcbiAgfSA9IG1ldGhvZHM7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZWdpc3RlcihuYW1lLCB7XHJcbiAgICAgIC4uLnRheElkUmVnaXN0ZXJPcHRpb25zLFxyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgfSksXHJcbiAgICBlcnJvcjogISFnZXQoZXJyb3JzLCBuYW1lKSxcclxuICAgIGhlbHBlclRleHQ6IGdldChlcnJvcnMsIG5hbWUpPy5tZXNzYWdlLFxyXG4gICAgbGFiZWw6ICdDb2RpY2UgZmlzY2FsZScsXHJcbiAgICBzdHlsZTogeyB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyB9LFxyXG4gICAgYXV0b0NhcGl0YWxpemU6ICdjaGFyYWN0ZXJzJyxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyRW1haWwgPSA8XHJcbiAgVEZpZWxkVmFsdWVzIGV4dGVuZHMgRmllbGRWYWx1ZXMsXHJcbiAgVEZpZWxkTmFtZSBleHRlbmRzIEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+ID0gRmllbGRQYXRoPFRGaWVsZFZhbHVlcz5cclxuPihcclxuICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuPFRGaWVsZFZhbHVlcz4sXHJcbiAgbmFtZTogVEZpZWxkTmFtZSxcclxuICBvcHRpb25zOiBPbWl0PFxyXG4gICAgUmVnaXN0ZXJPcHRpb25zPFRGaWVsZFZhbHVlcywgVEZpZWxkTmFtZT4sXHJcbiAgICAndmFsdWVBc0RhdGUnIHwgJ3ZhbHVlQXNOdW1iZXInXHJcbiAgPiA9IHt9XHJcbik6IFRleHRGaWVsZFByb3BzID0+IHtcclxuICBjb25zdCB7XHJcbiAgICByZWdpc3RlcixcclxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcclxuICB9ID0gbWV0aG9kcztcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLnJlZ2lzdGVyKG5hbWUsIHtcclxuICAgICAgLi4uZW1haWxSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgcGxhY2Vob2xkZXI6ICdJbnNlcmlzY2kgcXVpIGxhIHR1YSBlbWFpbCcsXHJcbiAgICBoZWxwZXJUZXh0OlxyXG4gICAgICBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSB8fFxyXG4gICAgICAnUmljZXZlcmFpIGEgcXVlc3RvIGluZGlyaXp6byBpbCBjb250cmF0dG8gZGVsbGEgZm9ybml0dXJhLiBTZSBoYWkgZ2nDoCBmYXR0byBsYSByZWdpc3RyYXppb25lIG5lbGzigJlBcmVhIFBlcnNvbmFsZSwgdXNhIGxhIHN0ZXNzYSBlbWFpbC4nLFxyXG4gICAgbGFiZWw6ICdNYWlsJyxcclxuICAgIGF1dG9Db21wbGV0ZTogJ2VtYWlsJyxcclxuICAgIHR5cGU6ICdlbWFpbCcsXHJcbiAgICBzdHlsZTogeyB0ZXh0VHJhbnNmb3JtOiAnbG93ZXJjYXNlJyB9LFxyXG4gICAgaW5wdXRNb2RlOiAnZW1haWwnLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJGYW1pbHlOYW1lID0gPFxyXG4gIFRGaWVsZFZhbHVlcyBleHRlbmRzIEZpZWxkVmFsdWVzLFxyXG4gIFRGaWVsZE5hbWUgZXh0ZW5kcyBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPiA9IEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+XHJcbj4oXHJcbiAgbWV0aG9kczogVXNlRm9ybVJldHVybjxURmllbGRWYWx1ZXM+LFxyXG4gIG5hbWU6IFRGaWVsZE5hbWUsXHJcbiAgb3B0aW9uczogT21pdDxcclxuICAgIFJlZ2lzdGVyT3B0aW9uczxURmllbGRWYWx1ZXMsIFRGaWVsZE5hbWU+LFxyXG4gICAgJ3ZhbHVlQXNEYXRlJyB8ICd2YWx1ZUFzTnVtYmVyJ1xyXG4gID4gPSB7fVxyXG4pOiBUZXh0RmllbGRQcm9wcyA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXHJcbiAgfSA9IG1ldGhvZHM7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZWdpc3RlcihuYW1lLCB7XHJcbiAgICAgIC4uLmZhbWlseU5hbWVSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDogZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UsXHJcbiAgICBsYWJlbDogJ0NvZ25vbWUnLFxyXG4gICAgYXV0b0NvbXBsZXRlOiAnZmFtaWx5LW5hbWUnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlckxhbmRsaW5lUGhvbmUgPSA8XHJcbiAgVEZpZWxkVmFsdWVzIGV4dGVuZHMgRmllbGRWYWx1ZXMsXHJcbiAgVEZpZWxkTmFtZSBleHRlbmRzIEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+ID0gRmllbGRQYXRoPFRGaWVsZFZhbHVlcz5cclxuPihcclxuICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuPFRGaWVsZFZhbHVlcz4sXHJcbiAgbmFtZTogVEZpZWxkTmFtZSxcclxuICBvcHRpb25zOiBPbWl0PFxyXG4gICAgUmVnaXN0ZXJPcHRpb25zPFRGaWVsZFZhbHVlcywgVEZpZWxkTmFtZT4sXHJcbiAgICAndmFsdWVBc0RhdGUnIHwgJ3ZhbHVlQXNOdW1iZXInXHJcbiAgPiA9IHt9XHJcbik6IFRleHRGaWVsZFByb3BzID0+IHtcclxuICBjb25zdCB7XHJcbiAgICByZWdpc3RlcixcclxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcclxuICB9ID0gbWV0aG9kcztcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLnJlZ2lzdGVyKG5hbWUsIHtcclxuICAgICAgLi4ubGFuZGxpbmVQaG9uZVJlZ2lzdGVyT3B0aW9ucyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH0pLFxyXG4gICAgZXJyb3I6ICEhZ2V0KGVycm9ycywgbmFtZSksXHJcbiAgICBoZWxwZXJUZXh0OiBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSxcclxuICAgIGxhYmVsOiAnTnVtZXJvIHRlbGVmb25vJyxcclxuICAgIGF1dG9Db21wbGV0ZTogJ2hvbWUgdGVsLW5hdGlvbmFsJyxcclxuICAgIHR5cGU6ICd0ZWwnLFxyXG4gICAgc2l6ZTogMTAsXHJcbiAgICBtYXhMZW5ndGg6IDE2LFxyXG4gICAgaW5wdXRNb2RlOiAndGVsJyxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyTW9iaWxlUGhvbmUgPSA8XHJcbiAgVEZpZWxkVmFsdWVzIGV4dGVuZHMgRmllbGRWYWx1ZXMsXHJcbiAgVEZpZWxkTmFtZSBleHRlbmRzIEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+ID0gRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4sXHJcbiAgVEZpZWxkTmFtZUNvdW50cnlDb2RlIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIHtcclxuICAgIGNvdW50cnlDb2RlTmFtZSxcclxuICAgIC4uLm9wdGlvbnNcclxuICB9OiBPbWl0PFxyXG4gICAgUmVnaXN0ZXJPcHRpb25zPFRGaWVsZFZhbHVlcywgVEZpZWxkTmFtZT4sXHJcbiAgICAndmFsdWVBc0RhdGUnIHwgJ3ZhbHVlQXNOdW1iZXInXHJcbiAgPiAmIHtcclxuICAgIGNvdW50cnlDb2RlTmFtZTogVEZpZWxkTmFtZUNvdW50cnlDb2RlO1xyXG4gIH1cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAuLi5tb2JpbGVQaG9uZVJlZ2lzdGVyT3B0aW9ucyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgdmFsaWRhdGU6ICh2YWx1ZSwgZm9ybVZhbHVlcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBob25lQ291bnRyeUNvZGUgPSBmb3JtVmFsdWVzW2NvdW50cnlDb2RlTmFtZV07XHJcbiAgICAgICAgaWYgKHBob25lQ291bnRyeUNvZGUgPT09ICcrMzknICYmIHZhbHVlWzBdICE9PSAnMycpIHtcclxuICAgICAgICAgIHJldHVybiAnSW5zZXJpc2NpIHVuIG51bWVybyBkaSBjZWxsdWxhcmUgdmFsaWRvJztcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDogZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UsXHJcbiAgICBsYWJlbDogJ051bWVybyBjZWxsdWxhcmUnLFxyXG4gICAgYXV0b0NvbXBsZXRlOiAnbW9iaWxlIHRlbC1uYXRpb25hbCcsXHJcbiAgICB0eXBlOiAndGVsJyxcclxuICAgIHNpemU6IDEwLFxyXG4gICAgbWF4TGVuZ3RoOiAxNixcclxuICAgIGlucHV0TW9kZTogJ3RlbCcsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclBob25lQ291bnRyeUNvZGUgPSA8XHJcbiAgVEZpZWxkVmFsdWVzIGV4dGVuZHMgRmllbGRWYWx1ZXMsXHJcbiAgVEZpZWxkTmFtZSBleHRlbmRzIEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+ID0gRmllbGRQYXRoPFRGaWVsZFZhbHVlcz5cclxuPihcclxuICBtZXRob2RzOiBVc2VGb3JtUmV0dXJuPFRGaWVsZFZhbHVlcz4sXHJcbiAgbmFtZTogVEZpZWxkTmFtZSxcclxuICBvcHRpb25zOiBPbWl0PFxyXG4gICAgUmVnaXN0ZXJPcHRpb25zPFRGaWVsZFZhbHVlcywgVEZpZWxkTmFtZT4sXHJcbiAgICAndmFsdWVBc0RhdGUnIHwgJ3ZhbHVlQXNOdW1iZXInXHJcbiAgPiA9IHt9XHJcbik6IFRleHRGaWVsZFByb3BzID0+IHtcclxuICBjb25zdCB7XHJcbiAgICByZWdpc3RlcixcclxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcclxuICB9ID0gbWV0aG9kcztcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLnJlZ2lzdGVyKG5hbWUsIHtcclxuICAgICAgLi4ucGhvbmVDb3VudHJ5Q29kZVJlZ2lzdGVyT3B0aW9ucyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH0pLFxyXG4gICAgZXJyb3I6ICEhZ2V0KGVycm9ycywgbmFtZSksXHJcbiAgICBoZWxwZXJUZXh0OiBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSxcclxuICAgIGxhYmVsOiAnUHJlZmlzc28nLFxyXG4gICAgc2l6ZTogMyxcclxuICAgIGlucHV0TW9kZTogJ3RlbCcsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclBvZCA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAuLi5wb2RSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDpcclxuICAgICAgZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UgfHxcclxuICAgICAgJ8OIIGlsIGNvZGljZSBhbGZhbnVtZXJpY28gZGkgMTQgbyAxNSBjaWZyZSBjaGUgaW5pemlhIHNlbXByZSBjb24gSVQnLFxyXG4gICAgbWluTGVuZ3RoOiBwb2RMZW5ndGgubWluLFxyXG4gICAgbWF4TGVuZ3RoOiBwb2RMZW5ndGgubWF4LFxyXG4gICAgbGFiZWw6ICdQT0QnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclBkciA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAuLi5wZHJSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDpcclxuICAgICAgZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UgfHwgJ0lsIGNvZGljZSBQRFIgw6ggY29tcG9zdGEgZGEgMTQgY2lmcmUnLFxyXG4gICAgbGFiZWw6ICdQRFInLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGlucHV0TW9kZTogJ251bWVyaWMnLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJFc3RpbWF0ZWRHYXNDb25zdW1wdGlvbiA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAuLi5wb3NpdGl2ZUludGVnZXJSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDpcclxuICAgICAgZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UgfHxcclxuICAgICAgJ8OIIGxhIHNvbW1hIGRlaSBjb25zdW1pIGZhdHR1cmF0aSBuZWdsaSB1bHRpbWkgMTIgbWVzaSwgc29saXRhbWVudGUgaW5kaWNhdGEgbmVsbGEgc2Vjb25kYSBwYWdpbmEgZGVsbGEgYm9sbGV0dGEnLFxyXG4gICAgbGFiZWw6ICdDb25zdW1vIGFubnVvIChTbWMpJyxcclxuICAgIGlucHV0TW9kZTogJ251bWVyaWMnLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJJYmFuID0gPFxyXG4gIFRGaWVsZFZhbHVlcyBleHRlbmRzIEZpZWxkVmFsdWVzLFxyXG4gIFRGaWVsZE5hbWUgZXh0ZW5kcyBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPiA9IEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+XHJcbj4oXHJcbiAgbWV0aG9kczogVXNlRm9ybVJldHVybjxURmllbGRWYWx1ZXM+LFxyXG4gIG5hbWU6IFRGaWVsZE5hbWUsXHJcbiAgb3B0aW9uczogT21pdDxcclxuICAgIFJlZ2lzdGVyT3B0aW9uczxURmllbGRWYWx1ZXMsIFRGaWVsZE5hbWU+LFxyXG4gICAgJ3ZhbHVlQXNEYXRlJyB8ICd2YWx1ZUFzTnVtYmVyJ1xyXG4gID4gPSB7fVxyXG4pOiBUZXh0RmllbGRQcm9wcyA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXHJcbiAgfSA9IG1ldGhvZHM7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZWdpc3RlcihuYW1lLCB7XHJcbiAgICAgIC4uLmliYW5SZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDogZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UsXHJcbiAgICBsYWJlbDogJ0luc2VyaXNjaSBpbCB0dW8gY29kaWNlIElCQU4nLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGF1dG9DYXBpdGFsaXplOiAnY2hhcmFjdGVycycsXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlciB0aGUgVGF4IElkIG9mIGEgYnVzaW5lc3MgKGhhcyB0aGUgc2FtZSBmb3JtIG9mIHRoZSBWQVQgSUQpXHJcbiAqIEBwYXJhbSBtZXRob2RzXHJcbiAqIEBwYXJhbSBuYW1lXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJCdXNpbmVzc1RheElkID0gPFxyXG4gIFRGaWVsZFZhbHVlcyBleHRlbmRzIEZpZWxkVmFsdWVzLFxyXG4gIFRGaWVsZE5hbWUgZXh0ZW5kcyBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPiA9IEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+XHJcbj4oXHJcbiAgbWV0aG9kczogVXNlRm9ybVJldHVybjxURmllbGRWYWx1ZXM+LFxyXG4gIG5hbWU6IFRGaWVsZE5hbWUsXHJcbiAgb3B0aW9uczogT21pdDxcclxuICAgIFJlZ2lzdGVyT3B0aW9uczxURmllbGRWYWx1ZXMsIFRGaWVsZE5hbWU+LFxyXG4gICAgJ3ZhbHVlQXNEYXRlJyB8ICd2YWx1ZUFzTnVtYmVyJ1xyXG4gID4gPSB7fVxyXG4pOiBUZXh0RmllbGRQcm9wcyA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXHJcbiAgfSA9IG1ldGhvZHM7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZWdpc3RlcihuYW1lLCB7XHJcbiAgICAgIC4uLmJ1c2luZXNzVGF4SWRSZWdpc3Rlck9wdGlvbnMsXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9KSxcclxuICAgIGVycm9yOiAhIWdldChlcnJvcnMsIG5hbWUpLFxyXG4gICAgaGVscGVyVGV4dDogZ2V0KGVycm9ycywgbmFtZSk/Lm1lc3NhZ2UsXHJcbiAgICBsYWJlbDogJ0NvZGljZSBmaXNjYWxlJyxcclxuICAgIHN0eWxlOiB7IHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnIH0sXHJcbiAgICBpbnB1dE1vZGU6ICdudW1lcmljJyxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyVmF0TnVtYmVyID0gPFxyXG4gIFRGaWVsZFZhbHVlcyBleHRlbmRzIEZpZWxkVmFsdWVzLFxyXG4gIFRGaWVsZE5hbWUgZXh0ZW5kcyBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPiA9IEZpZWxkUGF0aDxURmllbGRWYWx1ZXM+XHJcbj4oXHJcbiAgbWV0aG9kczogVXNlRm9ybVJldHVybjxURmllbGRWYWx1ZXM+LFxyXG4gIG5hbWU6IFRGaWVsZE5hbWUsXHJcbiAgb3B0aW9uczogT21pdDxcclxuICAgIFJlZ2lzdGVyT3B0aW9uczxURmllbGRWYWx1ZXMsIFRGaWVsZE5hbWU+LFxyXG4gICAgJ3ZhbHVlQXNEYXRlJyB8ICd2YWx1ZUFzTnVtYmVyJ1xyXG4gID4gPSB7fVxyXG4pOiBUZXh0RmllbGRQcm9wcyA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXHJcbiAgfSA9IG1ldGhvZHM7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZWdpc3RlcihuYW1lLCB7XHJcbiAgICAgIC4uLnZhdE51bWJlclJlZ2lzdGVyT3B0aW9ucyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH0pLFxyXG4gICAgZXJyb3I6ICEhZ2V0KGVycm9ycywgbmFtZSksXHJcbiAgICBoZWxwZXJUZXh0OiBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSxcclxuICAgIGxhYmVsOiAnUC5JVkEnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGlucHV0TW9kZTogJ251bWVyaWMnLFxyXG4gIH07XHJcbn07XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXIgdGhlIFRheCBJRCBvciBWQVQgTnVtYmVyLCBzdXBwb3J0aW5nIGluZGl2aWR1YWwgb3IgbGVnYWwgZW50aXRpZXMuXHJcbiAqIEBwYXJhbSBtZXRob2RzXHJcbiAqIEBwYXJhbSBuYW1lXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJUYXhPclZhdCA9IDxcclxuICBURmllbGRWYWx1ZXMgZXh0ZW5kcyBGaWVsZFZhbHVlcyxcclxuICBURmllbGROYW1lIGV4dGVuZHMgRmllbGRQYXRoPFRGaWVsZFZhbHVlcz4gPSBGaWVsZFBhdGg8VEZpZWxkVmFsdWVzPlxyXG4+KFxyXG4gIG1ldGhvZHM6IFVzZUZvcm1SZXR1cm48VEZpZWxkVmFsdWVzPixcclxuICBuYW1lOiBURmllbGROYW1lLFxyXG4gIG9wdGlvbnM6IE9taXQ8XHJcbiAgICBSZWdpc3Rlck9wdGlvbnM8VEZpZWxkVmFsdWVzLCBURmllbGROYW1lPixcclxuICAgICd2YWx1ZUFzRGF0ZScgfCAndmFsdWVBc051bWJlcidcclxuICA+ID0ge31cclxuKTogVGV4dEZpZWxkUHJvcHMgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHJlZ2lzdGVyLFxyXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxyXG4gIH0gPSBtZXRob2RzO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVnaXN0ZXIobmFtZSwge1xyXG4gICAgICAuLi50YXhPclZhdFJlZ2lzdGVyT3B0aW9ucyxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH0pLFxyXG4gICAgZXJyb3I6ICEhZ2V0KGVycm9ycywgbmFtZSksXHJcbiAgICBoZWxwZXJUZXh0OiBnZXQoZXJyb3JzLCBuYW1lKT8ubWVzc2FnZSxcclxuICAgIGxhYmVsOiAnQ29kaWNlIGZpc2NhbGUnLFxyXG4gICAgc3R5bGU6IHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSxcclxuICAgIGlucHV0TW9kZTogJ251bWVyaWMnLFxyXG4gIH07XHJcbn07XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvdWktZmllbGRzL3NyYy9saWIvdmFsaWRhdGlvbnMudHMifQ==