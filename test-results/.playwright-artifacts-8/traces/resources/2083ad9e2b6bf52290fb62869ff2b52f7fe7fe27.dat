globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  store,
  tsGasAtom,
  tsOperativeModeGasAtom,
  tsOperativeModePowerAtom,
  tsPowerAtom,
  workingProductAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class OperativeModeDual extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(2);
    this.WrapperComponent = StepErrorBoundary;
    this.skipIfDone = true;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/troubleshooting/DualStep.tsx");
  }
  toString() {
    return "OperativeModeDual";
  }
  depends() {
    return [StepDependencies.TS_POWER, StepDependencies.TS_GAS];
  }
  provides() {
    return [
      StepDependencies.OPERATIVE_MODE_POWER,
      StepDependencies.OPERATIVE_MODE_GAS
    ];
  }
  isInFlux() {
    const product = store.get(workingProductAtom);
    return !product || !!product.commodity;
  }
  isAvailable() {
    const todo = store.get(tsPowerAtom) && !store.get(tsOperativeModePowerAtom) || store.get(tsGasAtom) && !store.get(tsOperativeModeGasAtom);
    console.log(todo);
    return store.get(tsPowerAtom) || store.get(tsGasAtom);
  }
  toDo() {
    return store.get(tsPowerAtom) && !store.get(tsOperativeModePowerAtom) || store.get(tsGasAtom) && !store.get(tsOperativeModeGasAtom);
  }
}
export const operativeModeDual = new OperativeModeDual();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLDBCQUEwQkosS0FBSztBQUFBLEVBQXJDO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxDQUFDO0FBQzdCSyw0QkFBbUJKO0FBQ25CSyxzQkFBYTtBQUViQyxnQkFBT0EsTUFBTSxPQUFPLFlBQVk7QUFBQTtBQUFBLEVBRWhDQyxXQUFXO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTyxDQUFDUCxpQkFBaUJRLFVBQVVSLGlCQUFpQlMsTUFBTTtBQUFBLEVBQzVEO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU87QUFBQSxNQUNMVixpQkFBaUJXO0FBQUFBLE1BQ2pCWCxpQkFBaUJZO0FBQUFBLElBQWtCO0FBQUEsRUFFdkM7QUFBQSxFQUVVQyxXQUFXO0FBQ25CLFVBQU1DLFVBQVV2QixNQUFNd0IsSUFBSW5CLGtCQUFrQjtBQUM1QyxXQUFPLENBQUNrQixXQUFXLENBQUMsQ0FBQ0EsUUFBUUU7QUFBQUEsRUFDL0I7QUFBQSxFQUVVQyxjQUFjO0FBQ3RCLFVBQU1DLE9BQ0gzQixNQUFNd0IsSUFBSXBCLFdBQVcsS0FBSyxDQUFDSixNQUFNd0IsSUFBSXJCLHdCQUF3QixLQUM3REgsTUFBTXdCLElBQUl2QixTQUFTLEtBQUssQ0FBQ0QsTUFBTXdCLElBQUl0QixzQkFBc0I7QUFDNUQwQixZQUFRQyxJQUFJRixJQUFJO0FBRWhCLFdBQU8zQixNQUFNd0IsSUFBSXBCLFdBQVcsS0FBS0osTUFBTXdCLElBQUl2QixTQUFTO0FBQUEsRUFDdEQ7QUFBQSxFQUVVNkIsT0FBTztBQUNmLFdBQ0c5QixNQUFNd0IsSUFBSXBCLFdBQVcsS0FBSyxDQUFDSixNQUFNd0IsSUFBSXJCLHdCQUF3QixLQUM3REgsTUFBTXdCLElBQUl2QixTQUFTLEtBQUssQ0FBQ0QsTUFBTXdCLElBQUl0QixzQkFBc0I7QUFBQSxFQUU5RDtBQUNGO0FBRU8sYUFBTTZCLG9CQUFvQixJQUFJckIsa0JBQWtCIiwibmFtZXMiOlsic3RvcmUiLCJ0c0dhc0F0b20iLCJ0c09wZXJhdGl2ZU1vZGVHYXNBdG9tIiwidHNPcGVyYXRpdmVNb2RlUG93ZXJBdG9tIiwidHNQb3dlckF0b20iLCJ3b3JraW5nUHJvZHVjdEF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcEVycm9yQm91bmRhcnkiLCJTdGVwRGVwZW5kZW5jaWVzIiwiT3BlcmF0aXZlTW9kZUR1YWwiLCJwcmlvcml0eSIsIldyYXBwZXJDb21wb25lbnQiLCJza2lwSWZEb25lIiwibGF6eSIsInRvU3RyaW5nIiwiZGVwZW5kcyIsIlRTX1BPV0VSIiwiVFNfR0FTIiwicHJvdmlkZXMiLCJPUEVSQVRJVkVfTU9ERV9QT1dFUiIsIk9QRVJBVElWRV9NT0RFX0dBUyIsImlzSW5GbHV4IiwicHJvZHVjdCIsImdldCIsImNvbW1vZGl0eSIsImlzQXZhaWxhYmxlIiwidG9kbyIsImNvbnNvbGUiLCJsb2ciLCJ0b0RvIiwib3BlcmF0aXZlTW9kZUR1YWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsib3BlcmF0aXZlLWR1YWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgc3RvcmUsXHJcbiAgdHNHYXNBdG9tLFxyXG4gIHRzT3BlcmF0aXZlTW9kZUdhc0F0b20sXHJcbiAgdHNPcGVyYXRpdmVNb2RlUG93ZXJBdG9tLFxyXG4gIHRzUG93ZXJBdG9tLFxyXG4gIHdvcmtpbmdQcm9kdWN0QXRvbSxcclxufSBmcm9tICdAbmFqLXdvL2RhdGEtYWNjZXNzJztcclxuaW1wb3J0IHsgU3RlcCwgU3RlcFByaW9yaXR5IH0gZnJvbSAnQG5hai13by9lbmdpbmUnO1xyXG5pbXBvcnQgU3RlcEVycm9yQm91bmRhcnkgZnJvbSAnLi4vU3RlcEVycm9yQm91bmRhcnknO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcblxyXG5jbGFzcyBPcGVyYXRpdmVNb2RlRHVhbCBleHRlbmRzIFN0ZXAge1xyXG4gIHByaW9yaXR5ID0gbmV3IFN0ZXBQcmlvcml0eSgyKTtcclxuICBXcmFwcGVyQ29tcG9uZW50ID0gU3RlcEVycm9yQm91bmRhcnk7XHJcbiAgc2tpcElmRG9uZSA9IHRydWU7XHJcblxyXG4gIGxhenkgPSAoKSA9PiBpbXBvcnQoJy4vRHVhbFN0ZXAnKTtcclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJ09wZXJhdGl2ZU1vZGVEdWFsJztcclxuICB9XHJcblxyXG4gIGRlcGVuZHMoKSB7XHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuVFNfUE9XRVIsIFN0ZXBEZXBlbmRlbmNpZXMuVFNfR0FTXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgU3RlcERlcGVuZGVuY2llcy5PUEVSQVRJVkVfTU9ERV9QT1dFUixcclxuICAgICAgU3RlcERlcGVuZGVuY2llcy5PUEVSQVRJVkVfTU9ERV9HQVMsXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGlzSW5GbHV4KCkge1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IHN0b3JlLmdldCh3b3JraW5nUHJvZHVjdEF0b20pO1xyXG4gICAgcmV0dXJuICFwcm9kdWN0IHx8ICEhcHJvZHVjdC5jb21tb2RpdHk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgaXNBdmFpbGFibGUoKSB7XHJcbiAgICBjb25zdCB0b2RvID1cclxuICAgICAgKHN0b3JlLmdldCh0c1Bvd2VyQXRvbSkgJiYgIXN0b3JlLmdldCh0c09wZXJhdGl2ZU1vZGVQb3dlckF0b20pKSB8fFxyXG4gICAgICAoc3RvcmUuZ2V0KHRzR2FzQXRvbSkgJiYgIXN0b3JlLmdldCh0c09wZXJhdGl2ZU1vZGVHYXNBdG9tKSk7XHJcbiAgICBjb25zb2xlLmxvZyh0b2RvKTtcclxuXHJcbiAgICByZXR1cm4gc3RvcmUuZ2V0KHRzUG93ZXJBdG9tKSB8fCBzdG9yZS5nZXQodHNHYXNBdG9tKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCB0b0RvKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgKHN0b3JlLmdldCh0c1Bvd2VyQXRvbSkgJiYgIXN0b3JlLmdldCh0c09wZXJhdGl2ZU1vZGVQb3dlckF0b20pKSB8fFxyXG4gICAgICAoc3RvcmUuZ2V0KHRzR2FzQXRvbSkgJiYgIXN0b3JlLmdldCh0c09wZXJhdGl2ZU1vZGVHYXNBdG9tKSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgb3BlcmF0aXZlTW9kZUR1YWwgPSBuZXcgT3BlcmF0aXZlTW9kZUR1YWwoKTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9zdGVwcy9zcmMvbGliL3Ryb3VibGVzaG9vdGluZy9vcGVyYXRpdmUtZHVhbC50c3gifQ==