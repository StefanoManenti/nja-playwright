globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom, useSetAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithSuspenseQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai-tanstack-query.js?v=0189a8d1";
import { loadable } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useMemo = __vite__cjsImport3_react["useMemo"]; const useRef = __vite__cjsImport3_react["useRef"];
import { fetchPanelEstimateProduction } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/panel-adoption/index.ts";
import { virtualPanelOffer$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/products-collection/index.ts";
import { powerSupplySelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply-selected-power.ts";
export const panelsAvailableAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\panels-atoms.ts/panelsAvailableAtom", atom(async (get) => {
  const v = await get(virtualPanelOffer$);
  return v?.locations;
}));
panelsAvailableAtom.debugLabel = "panelsAvailableAtom";
export const panelsSelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\panels-atoms.ts/panelsSelectedAtom", atom([]));
panelsSelectedAtom.debugLabel = "panelsSelectedAtom";
const panelsDetailsAtom = (panelsSelectedAtom2) => atom(async (get) => {
  const panelsAvailable = await get(panelsAvailableAtom);
  const panelsSelected = get(panelsSelectedAtom2);
  function getLocationById(locationId) {
    return panelsAvailable?.find(({
      id
    }) => id === locationId);
  }
  function getSizeByProductId(location, productId) {
    return location?.sizes.find((size) => size.productId === productId);
  }
  return panelsSelected.map(({
    locationId,
    panelId
  }) => {
    const location = getLocationById(locationId);
    if (!location) {
      return null;
    }
    const size = getSizeByProductId(location, panelId);
    if (!size) {
      return null;
    }
    const panelsSelected2 = {
      location,
      size
    };
    return panelsSelected2;
  }).filter((x) => !!x);
});
export const panelsSelectedDetailsAtom = panelsDetailsAtom(panelsSelectedAtom);
const panelBestSizeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\panels-atoms.ts/panelBestSizeAtom", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  const panelBestSize = supply?.panelBestSize;
  if (!panelBestSize) return;
  return get(panelBestSize);
}));
panelBestSizeAtom.debugLabel = "panelBestSizeAtom";
export const panelLocationsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\panels-atoms.ts/panelLocationsAtom", atom(async (get) => {
  const locations = await get(panelsAvailableAtom);
  const panelBestSize = await get(panelBestSizeAtom);
  const l = locations?.map((location) => ({
    ...location,
    suggestedPanel: getSuggestedPanel(location, panelBestSize)?.productId
  })).map((location) => [location.id, location]);
  return new Map(l);
}));
panelLocationsAtom.debugLabel = "panelLocationsAtom";
function getSuggestedPanel(location, suggestedPower) {
  if (!suggestedPower) {
    return;
  }
  const bestPower = parseFloat(suggestedPower);
  const EPSILON = 0.01;
  const index = location.sizes.map((panel, i) => ({
    power: parseFloat(panel.power),
    i
  })).filter(({
    power
  }) => power < bestPower + EPSILON).sort((a, b) => b.power - a.power)[0]?.i;
  return index != null ? location.sizes[index] : location.sizes[0];
}
export function useEstimatedProductionAtom(panels) {
  const panelsAtom = useRef(atom([]));
  const set = useSetAtom(panelsAtom.current);
  const oldPanels = useRef();
  useEffect(() => {
    if (panels) {
      const current = JSON.stringify(panels);
      if (oldPanels.current !== current) {
        oldPanels.current = current;
        set([...panels]);
      }
    }
  });
  return useMemo(() => {
    const estimatedProductionAtom = atom(async (get) => {
      const panelsDetails = await get(panelsDetailsAtom(panelsAtom.current));
      return {
        powers: panelsDetails.map(({
          size
        }) => parseFloat(size.power)),
        estimatedProductions: panelsDetails.map(({
          location
        }) => atomWithSuspenseQuery(() => ({
          retry: 0,
          queryKey: ["location", location.lat, location.lng],
          queryFn: async () => {
            const production = await fetchPanelEstimateProduction({
              lat: location.lat,
              lng: location.lng
            });
            return parseFloat(production);
          }
        })))
      };
    });
    estimatedProductionAtom.debugLabel = "estimatedProductionAtom";
    return loadable(atom(async (get) => {
      const {
        powers,
        estimatedProductions
      } = await get(estimatedProductionAtom);
      const promises = estimatedProductions.map((a) => get(a));
      const data = await Promise.all(promises);
      let sum = 0;
      for (let i = 0; i < data.length; i++) {
        sum += data[i].data * powers[i];
      }
      return sum.toFixed(0);
    }));
  }, []);
}

//# sourceMappingURL=data:application/json;base64,