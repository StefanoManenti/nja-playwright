globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { accountSelectedAtom, supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { customerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { residentialAddressSameAsSupplyAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
import { isExistingGasSupply, isExistingPowerSupply } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply.ts";
import { estimatedYearGasConsumptionAtom, gasConsumptionTypeAtom, gasSupplySelectedAtom, pdrGasAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply-selected-gas.ts";
import { estimatedYearPowerConsumptionAtom, podPowerAtom, powerSupplySelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply-selected-power.ts";
export const bulkOrderSupply$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\supply.ts/bulkOrderSupply$", atom(async (get) => {
  const segment = await get(customerSegmentAtom);
  const supplyAddress = await get(supplyAddressSelectedAtom);
  const commodity = (await get(accountSelectedAtom))?.commodity;
  const resident = segment === Segment.RESID ? await get(residentialAddressSameAsSupplyAtom) : false;
  const power = commodity?.power ? await get(bulkOrderPowerSupply$) : void 0;
  const gas = commodity?.gas ? await get(bulkOrderGasSupply$) : void 0;
  return {
    ...supplyAddress?.asLeadFormat(),
    resident,
    accountCode: power?.accountCode || gas?.accountCode,
    power,
    gas
  };
}, async (get, set, args) => {
  if (args.power) {
    await set(bulkOrderPowerSupply$, args.power);
  }
  if (args.gas) {
    await set(bulkOrderGasSupply$, args.gas);
  }
}));
bulkOrderSupply$.debugLabel = "bulkOrderSupply$";
const bulkOrderPowerSupply$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\supply.ts/bulkOrderPowerSupply$", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  if (!supply) {
    return;
  }
  return {
    pod: await get(podPowerAtom),
    annualConsumption: await get(estimatedYearPowerConsumptionAtom),
    accountCode: supply.account.code,
    assetCode: isExistingPowerSupply(supply) ? supply.assetSiebel : get(supply.assetCode)
  };
}, async (_get, set, args) => {
  const pod = args?.pod;
  if (pod) {
    await set(podPowerAtom, pod);
  }
  const annualConsumption = args?.annualConsumption;
  if (annualConsumption) {
    await set(estimatedYearPowerConsumptionAtom, annualConsumption);
  }
}));
bulkOrderPowerSupply$.debugLabel = "bulkOrderPowerSupply$";
const bulkOrderGasSupply$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\supply.ts/bulkOrderGasSupply$", atom(async (get) => {
  const supply = await get(gasSupplySelectedAtom);
  if (!supply) {
    return;
  }
  const pdr = await get(pdrGasAtom);
  const consumption = await get(gasConsumptionTypeAtom);
  const annualConsumption = await get(estimatedYearGasConsumptionAtom);
  return {
    pdr,
    forCooking: consumption?.forCooking,
    forHeating: consumption?.forHeating,
    forHotWater: consumption?.forHotWater,
    annualConsumption,
    accountCode: supply.account.code,
    assetCode: isExistingGasSupply(supply) ? supply.assetSiebel : get(supply.assetCode)
  };
}, async (_get, set, args) => {
  const pdr = args?.pdr;
  if (pdr) {
    await set(pdrGasAtom, pdr);
  }
  if (args) {
    await set(gasConsumptionTypeAtom, {
      forCooking: args?.forCooking,
      forHeating: args?.forHeating,
      forHotWater: args?.forHotWater
    });
  }
  const annualConsumption = args?.annualConsumption;
  if (annualConsumption) {
    await set(estimatedYearGasConsumptionAtom, annualConsumption);
  }
}));
bulkOrderGasSupply$.debugLabel = "bulkOrderGasSupply$";

//# sourceMappingURL=data:application/json;base64,