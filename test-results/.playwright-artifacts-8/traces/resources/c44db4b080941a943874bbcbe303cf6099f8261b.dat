globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  powerAtom,
  Segment,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class PowerPod extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(20);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/supply/PowerPodStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "powerPod";
  }
  depends() {
    return [StepDependencies.SUPPLY_ADDRESS];
  }
  provides(get) {
    if (get(operativeModeAtom) === OperativeMode.TRANSFER) {
      return [];
    }
    return [StepDependencies.POD];
  }
  async isInFlux(get) {
    return !!(get(powerAtom) && get(operativeModeAtom) !== OperativeMode.CHANGE_OFFER && !get(workingOnPanelStandaloneAtom) && get(operativeModeEnabled$) && await get(customerSegmentAtom) === Segment.RESID);
  }
}
export const powerPod = new PowerPod();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBR2pDLE1BQU1DLGlCQUFpQkosS0FBSztBQUFBLEVBQTVCO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxFQUFFO0FBRTlCSyxnQkFBT0EsTUFBTSxPQUFPLGdCQUFnQjtBQUNwQ0MsNEJBQW1CTDtBQUFBQTtBQUFBQSxFQUVuQk0sV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsVUFBVTtBQUNSLFdBQU8sQ0FBQ04saUJBQWlCTyxjQUFjO0FBQUEsRUFDekM7QUFBQSxFQUVBQyxTQUFTQyxLQUFhO0FBQ3BCLFFBQUlBLElBQUlqQixpQkFBaUIsTUFBTUQsY0FBY21CLFVBQVU7QUFDckQsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPLENBQUNWLGlCQUFpQlcsR0FBRztBQUFBLEVBQzlCO0FBQUEsRUFFQSxNQUFnQkMsU0FBU0gsS0FBYTtBQUNwQyxXQUFPLENBQUMsRUFDTkEsSUFBSWYsU0FBUyxLQUNiZSxJQUFJakIsaUJBQWlCLE1BQU1ELGNBQWNzQixnQkFDekMsQ0FBQ0osSUFBSWIsNEJBQTRCLEtBQ2pDYSxJQUFJaEIscUJBQXFCLEtBQ3hCLE1BQU1nQixJQUFJbkIsbUJBQW1CLE1BQU9LLFFBQVFtQjtBQUFBQSxFQUVqRDtBQUNGO0FBRU8sYUFBTUMsV0FBVyxJQUFJZCxTQUFTIiwibmFtZXMiOlsiY3VzdG9tZXJTZWdtZW50QXRvbSIsIk9wZXJhdGl2ZU1vZGUiLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGVFbmFibGVkJCIsInBvd2VyQXRvbSIsIlNlZ21lbnQiLCJ3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tIiwiU3RlcCIsIlN0ZXBQcmlvcml0eSIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiU3RlcERlcGVuZGVuY2llcyIsIlBvd2VyUG9kIiwicHJpb3JpdHkiLCJsYXp5IiwiV3JhcHBlckNvbXBvbmVudCIsInRvU3RyaW5nIiwiZGVwZW5kcyIsIlNVUFBMWV9BRERSRVNTIiwicHJvdmlkZXMiLCJnZXQiLCJUUkFOU0ZFUiIsIlBPRCIsImlzSW5GbHV4IiwiQ0hBTkdFX09GRkVSIiwiUkVTSUQiLCJwb3dlclBvZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJwb3dlci1wb2QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgY3VzdG9tZXJTZWdtZW50QXRvbSxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICBwb3dlckF0b20sXHJcbiAgU2VnbWVudCxcclxuICB3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCBTdGVwRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9TdGVwRXJyb3JCb3VuZGFyeSc7XHJcbmltcG9ydCB7IFN0ZXBEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi9TdGVwRGVwZW5kZW5jaWVzJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5cclxuY2xhc3MgUG93ZXJQb2QgZXh0ZW5kcyBTdGVwIHtcclxuICBwcmlvcml0eSA9IG5ldyBTdGVwUHJpb3JpdHkoMjApO1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL1Bvd2VyUG9kU3RlcCcpO1xyXG4gIFdyYXBwZXJDb21wb25lbnQgPSBTdGVwRXJyb3JCb3VuZGFyeTtcclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJ3Bvd2VyUG9kJztcclxuICB9XHJcblxyXG4gIGRlcGVuZHMoKSB7XHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuU1VQUExZX0FERFJFU1NdO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZXMoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGlmIChnZXQob3BlcmF0aXZlTW9kZUF0b20pID09PSBPcGVyYXRpdmVNb2RlLlRSQU5TRkVSKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuUE9EXTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhc3luYyBpc0luRmx1eChnZXQ6IEdldHRlcikge1xyXG4gICAgcmV0dXJuICEhKFxyXG4gICAgICBnZXQocG93ZXJBdG9tKSAmJlxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUF0b20pICE9PSBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUiAmJlxyXG4gICAgICAhZ2V0KHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20pICYmXHJcbiAgICAgIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlJFU0lEXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBvd2VyUG9kID0gbmV3IFBvd2VyUG9kKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9zdXBwbHkvcG93ZXItcG9kLnRzeCJ9