import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const Fragment = __vite__cjsImport0_react_jsxDevRuntime["Fragment"]; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import clsx from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/clsx.js?v=0189a8d1";
import classes from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.module.less";
export function Switcher(props) {
  const {
    className,
    children,
    size = "default",
    disabled = false,
    ...otherProps
  } = props;
  return /* @__PURE__ */ jsxDEV(
    "fieldset",
    {
      className: clsx(classes.root, disabled && classes.disabled, className),
      ...otherProps,
      children
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx",
      lineNumber: 22,
      columnNumber: 5
    },
    this
  );
}
_c = Switcher;
export function SwitcherOption(props) {
  const { children, type = "radio", id, ...inputProps } = props;
  return /* @__PURE__ */ jsxDEV(Fragment, { children: [
    /* @__PURE__ */ jsxDEV("input", { className: classes.input, id, ...inputProps, type }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx",
      lineNumber: 40,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ jsxDEV("label", { className: clsx(classes.label), htmlFor: id, children }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx",
      lineNumber: 41,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx",
    lineNumber: 39,
    columnNumber: 5
  }, this);
}
_c2 = SwitcherOption;
var _c, _c2;
$RefreshReg$(_c, "Switcher");
$RefreshReg$(_c2, "SwitcherOption");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Switcher.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IkFBcUJJLFNBaUJBLFVBakJBOzs7OztnQkFyQkosT0FBVyxjQUFZO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRXZCLE9BQU9BLGFBQWE7QUFTYixnQkFBU0MsU0FBU0MsT0FBc0I7QUFDN0MsUUFBTTtBQUFBLElBQ0pDO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0FDLE9BQU87QUFBQSxJQUNQQyxXQUFXO0FBQUEsSUFDWCxHQUFHQztBQUFBQSxFQUNMLElBQUlMO0FBRUosU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0MsV0FBV00sS0FBS1IsUUFBUVMsTUFBTUgsWUFBWU4sUUFBUU0sVUFBVUgsU0FBUztBQUFBLE1BQ3JFLEdBQUlJO0FBQUFBLE1BRUhIO0FBQUFBO0FBQUFBLElBSkg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0E7QUFFSjtBQUFDTSxLQWpCZVQ7QUF1QlQsZ0JBQVNVLGVBQWVULE9BQTBCO0FBQ3ZELFFBQU0sRUFBRUUsVUFBVVEsT0FBTyxTQUFTQyxJQUFJLEdBQUdDLFdBQVcsSUFBSVo7QUFFeEQsU0FDRSxtQ0FDRTtBQUFBLDJCQUFDLFdBQU0sV0FBV0YsUUFBUWUsT0FBTyxJQUFRLEdBQUlELFlBQVksUUFBekQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFvRTtBQUFBLElBQ3BFLHVCQUFDLFdBQU0sV0FBV04sS0FBS1IsUUFBUWdCLEtBQUssR0FBRyxTQUFTSCxJQUM3Q1QsWUFESDtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBRUE7QUFBQSxPQUpGO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FLQTtBQUVKO0FBQUNhLE1BWGVOO0FBQWMsSUFBQUQsSUFBQU87QUFBQUMsYUFBQVIsSUFBQTtBQUFBUSxhQUFBRCxLQUFBIiwibmFtZXMiOlsiY2xhc3NlcyIsIlN3aXRjaGVyIiwicHJvcHMiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsInNpemUiLCJkaXNhYmxlZCIsIm90aGVyUHJvcHMiLCJjbHN4Iiwicm9vdCIsIl9jIiwiU3dpdGNoZXJPcHRpb24iLCJ0eXBlIiwiaWQiLCJpbnB1dFByb3BzIiwiaW5wdXQiLCJsYWJlbCIsIl9jMiIsIiRSZWZyZXNoUmVnJCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJTd2l0Y2hlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XHJcbmltcG9ydCB7IENvbXBvbmVudFByb3BzLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vU3dpdGNoZXIubW9kdWxlLmxlc3MnO1xyXG5cclxudHlwZSBTd2l0Y2hlclByb3BzID0ge1xyXG4gIHNpemU/OiAnZGVmYXVsdCcgfCAnbGFyZ2UnO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XHJcbn0gJiBDb21wb25lbnRQcm9wczwnZmllbGRzZXQnPjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTd2l0Y2hlcihwcm9wczogU3dpdGNoZXJQcm9wcykge1xyXG4gIGNvbnN0IHtcclxuICAgIGNsYXNzTmFtZSxcclxuICAgIGNoaWxkcmVuLFxyXG4gICAgc2l6ZSA9ICdkZWZhdWx0JyxcclxuICAgIGRpc2FibGVkID0gZmFsc2UsXHJcbiAgICAuLi5vdGhlclByb3BzXHJcbiAgfSA9IHByb3BzO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGZpZWxkc2V0XHJcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGNsYXNzTmFtZSl9XHJcbiAgICAgIHsuLi5vdGhlclByb3BzfVxyXG4gICAgPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2ZpZWxkc2V0PlxyXG4gICk7XHJcbn1cclxuXHJcbnR5cGUgU3dpdGNoZXJJdGVtUHJvcHMgPSB7XHJcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XHJcbn0gJiBDb21wb25lbnRQcm9wczwnaW5wdXQnPjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTd2l0Y2hlck9wdGlvbihwcm9wczogU3dpdGNoZXJJdGVtUHJvcHMpIHtcclxuICBjb25zdCB7IGNoaWxkcmVuLCB0eXBlID0gJ3JhZGlvJywgaWQsIC4uLmlucHV0UHJvcHMgfSA9IHByb3BzO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPGlucHV0IGNsYXNzTmFtZT17Y2xhc3Nlcy5pbnB1dH0gaWQ9e2lkfSB7Li4uaW5wdXRQcm9wc30gdHlwZT17dHlwZX0gLz5cclxuICAgICAgPGxhYmVsIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmxhYmVsKX0gaHRtbEZvcj17aWR9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9sYWJlbD5cclxuICAgIDwvPlxyXG4gICk7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy91aS1hdG9tcy9zcmMvbGliL1N3aXRjaGVyLnRzeCJ9