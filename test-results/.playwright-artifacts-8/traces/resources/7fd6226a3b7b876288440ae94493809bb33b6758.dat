globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { OtpNotValidError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { OK, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithMutation } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai-tanstack-query.js?v=0189a8d1";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
const URL = `${API}/webOrderCommonServices/updateBySecondaryToken`;
async function checkOtpSms(payload) {
  if (areCheckBypassed()) {
    return OK;
  }
  const logHash = generateOperationID();
  const response = await fetch(URL, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      businessObjectType: "phoneNumber",
      businessObjectId: payload.phone,
      secondaryToken: payload.secondaryToken,
      token: payload.token,
      confirmationChannel: "SMS",
      result: "OK",
      statusReason: "",
      logHash,
      idLead: payload.idLead,
      plicoCode: payload.plicoCode,
      salesProcessForLog: payload.salesProcessForLog
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  if (data.result !== "OK") {
    throw new OtpNotValidError(data.result, logHash);
  }
  return OK;
}
export const checkOtpSms$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\otp\\check-otp-sms.ts/checkOtpSms$", atom(async (get) => {
  const contract = get(currentContractInfoAtom);
  const idLead = contract.idLead;
  const plicoCode = await contract.plicoCode;
  const salesProcessForLog = await contract.salesProcessForLog;
  const mutation = atomWithMutation(() => {
    return {
      mutationKey: ["check-otp-sms"],
      mutationFn: (params) => checkOtpSms({
        phone: params.phone,
        secondaryToken: params.otp,
        token: params.token,
        idLead,
        plicoCode,
        salesProcessForLog
      })
    };
  });
  mutation.debugLabel = "mutation";
  mutation.debugLabel = "mutation";
  return get(mutation);
}));
checkOtpSms$.debugLabel = "checkOtpSms$";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHdCQUF3QjtBQUNqQyxTQUFTQyxJQUFJQyxxQ0FBcUM7QUFDbEQsU0FBU0MsWUFBWTtBQUNyQixTQUFTQyx3QkFBd0I7QUFDakMsU0FBU0MsK0JBQStCO0FBQ3hDLFNBQVNDLEtBQUtDLDJCQUEyQjtBQUN6QyxTQUFTQyx3QkFBd0I7QUFpQmpDLE1BQU1DLE1BQU0sR0FBR0gsR0FBRztBQUVsQixlQUFlSSxZQUFZQyxTQUFtQztBQUM1RCxNQUFJSCxpQkFBaUIsR0FBRztBQUN0QixXQUFPUDtBQUFBQSxFQUNUO0FBRUEsUUFBTVcsVUFBVUwsb0JBQW9CO0FBRXBDLFFBQU1NLFdBQVcsTUFBTUMsTUFBTUwsS0FBSztBQUFBLElBQ2hDTSxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQUMsTUFBTUMsS0FBS0MsVUFBVTtBQUFBLE1BQ25CQyxvQkFBb0I7QUFBQSxNQUNwQkMsa0JBQWtCWCxRQUFRWTtBQUFBQSxNQUMxQkMsZ0JBQWdCYixRQUFRYTtBQUFBQSxNQUN4QkMsT0FBT2QsUUFBUWM7QUFBQUEsTUFDZkMscUJBQXFCO0FBQUEsTUFDckJDLFFBQVE7QUFBQSxNQUNSQyxjQUFjO0FBQUEsTUFDZGhCO0FBQUFBLE1BQ0FpQixRQUFRbEIsUUFBUWtCO0FBQUFBLE1BQ2hCQyxXQUFXbkIsUUFBUW1CO0FBQUFBLE1BQ25CQyxvQkFBb0JwQixRQUFRb0I7QUFBQUEsSUFDOUIsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUVELE1BQUlsQixTQUFTbUIsV0FBVyxLQUFLO0FBQzNCLFVBQU0sSUFBSTlCLDhCQUE4QlcsU0FBU29CLFlBQVlyQixPQUFPO0FBQUEsRUFDdEU7QUFFQSxRQUFNc0IsT0FBUSxNQUFNckIsU0FBU3NCLEtBQUs7QUFFbEMsTUFBSUQsS0FBS1AsV0FBVyxNQUFNO0FBQ3hCLFVBQU0sSUFBSTNCLGlCQUFpQmtDLEtBQUtQLFFBQVFmLE9BQU87QUFBQSxFQUNqRDtBQUVBLFNBQU9YO0FBQ1Q7QUFVQSxhQUFBbUMsZUFBQUMsV0FBQUMsZUFBQUMsSUFBQSx1SEFBNEJwQyxLQUFLLE9BQU9vQyxRQUFRO0FBQzlDLFFBQU1DLFdBQVdELElBQUlsQyx1QkFBdUI7QUFDNUMsUUFBTXdCLFNBQVNXLFNBQVNYO0FBQ3hCLFFBQU1DLFlBQVksTUFBTVUsU0FBU1Y7QUFDakMsUUFBTUMscUJBQXFCLE1BQU1TLFNBQVNUO0FBRTFDLFFBQU1VLFdBQVdyQyxpQkFBaUIsTUFBTTtBQUN0QyxXQUFPO0FBQUEsTUFDTHNDLGFBQWEsQ0FBQyxlQUFlO0FBQUEsTUFDN0JDLFlBQVlBLENBQUNDLFdBQ1hsQyxZQUFZO0FBQUEsUUFDVmEsT0FBT3FCLE9BQU9yQjtBQUFBQSxRQUNkQyxnQkFBZ0JvQixPQUFPQztBQUFBQSxRQUN2QnBCLE9BQU9tQixPQUFPbkI7QUFBQUEsUUFDZEk7QUFBQUEsUUFDQUM7QUFBQUEsUUFDQUM7QUFBQUEsTUFDRixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0YsQ0FBQztBQUFFVSxXQUFBSyxhQUFBO0FBQUFMLFdBQUFLLGFBQUE7QUFFSCxTQUFPUCxJQUFJRSxRQUFRO0FBQ3JCLENBQUMsQ0FBQztBQUFDTCxhQUFBVSxhQUFBIiwibmFtZXMiOlsiT3RwTm90VmFsaWRFcnJvciIsIk9LIiwiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJhdG9tIiwiYXRvbVdpdGhNdXRhdGlvbiIsImN1cnJlbnRDb250cmFjdEluZm9BdG9tIiwiQVBJIiwiZ2VuZXJhdGVPcGVyYXRpb25JRCIsImFyZUNoZWNrQnlwYXNzZWQiLCJVUkwiLCJjaGVja090cFNtcyIsInBheWxvYWQiLCJsb2dIYXNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImJ1c2luZXNzT2JqZWN0VHlwZSIsImJ1c2luZXNzT2JqZWN0SWQiLCJwaG9uZSIsInNlY29uZGFyeVRva2VuIiwidG9rZW4iLCJjb25maXJtYXRpb25DaGFubmVsIiwicmVzdWx0Iiwic3RhdHVzUmVhc29uIiwiaWRMZWFkIiwicGxpY29Db2RlIiwic2FsZXNQcm9jZXNzRm9yTG9nIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiY2hlY2tPdHBTbXMkIiwiZ2xvYmFsVGhpcyIsImpvdGFpQXRvbUNhY2hlIiwiZ2V0IiwiY29udHJhY3QiLCJtdXRhdGlvbiIsIm11dGF0aW9uS2V5IiwibXV0YXRpb25GbiIsInBhcmFtcyIsIm90cCIsImRlYnVnTGFiZWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiY2hlY2stb3RwLXNtcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdHBOb3RWYWxpZEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcclxuaW1wb3J0IHsgT0ssIFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgYXRvbVdpdGhNdXRhdGlvbiB9IGZyb20gJ2pvdGFpLXRhbnN0YWNrLXF1ZXJ5JztcclxuaW1wb3J0IHsgY3VycmVudENvbnRyYWN0SW5mb0F0b20gfSBmcm9tICcuLi8uLi9hdG9tcy9jdXJyZW50LWNvbnRyYWN0LWluZm8tYXRvbXMnO1xyXG5pbXBvcnQgeyBBUEksIGdlbmVyYXRlT3BlcmF0aW9uSUQgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IGFyZUNoZWNrQnlwYXNzZWQgfSBmcm9tICcuLi8uLi91dGlscy9mbGFncyc7XHJcblxyXG5pbnRlcmZhY2UgV1NPdXRwdXQge1xyXG4gIHJlc3VsdDogJ0tPJyB8ICdPSyc7XHJcbiAgcmVzdWx0TWVzc2FnZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgV1NJbnB1dCB7XHJcbiAgcGhvbmU6IHN0cmluZztcclxuICBzZWNvbmRhcnlUb2tlbjogc3RyaW5nO1xyXG4gIHRva2VuOiBzdHJpbmc7XHJcbiAgbG9nSGFzaDogc3RyaW5nO1xyXG4gIGlkTGVhZDogc3RyaW5nO1xyXG4gIHBsaWNvQ29kZTogc3RyaW5nO1xyXG4gIHNhbGVzUHJvY2Vzc0ZvckxvZzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBVUkwgPSBgJHtBUEl9L3dlYk9yZGVyQ29tbW9uU2VydmljZXMvdXBkYXRlQnlTZWNvbmRhcnlUb2tlbmA7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjaGVja090cFNtcyhwYXlsb2FkOiBPbWl0PFdTSW5wdXQsICdsb2dIYXNoJz4pIHtcclxuICBpZiAoYXJlQ2hlY2tCeXBhc3NlZCgpKSB7XHJcbiAgICByZXR1cm4gT0s7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG5cclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFVSTCwge1xyXG4gICAgbWV0aG9kOiAnUFVUJyxcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICBidXNpbmVzc09iamVjdFR5cGU6ICdwaG9uZU51bWJlcicsXHJcbiAgICAgIGJ1c2luZXNzT2JqZWN0SWQ6IHBheWxvYWQucGhvbmUsXHJcbiAgICAgIHNlY29uZGFyeVRva2VuOiBwYXlsb2FkLnNlY29uZGFyeVRva2VuLFxyXG4gICAgICB0b2tlbjogcGF5bG9hZC50b2tlbixcclxuICAgICAgY29uZmlybWF0aW9uQ2hhbm5lbDogJ1NNUycsXHJcbiAgICAgIHJlc3VsdDogJ09LJyxcclxuICAgICAgc3RhdHVzUmVhc29uOiAnJyxcclxuICAgICAgbG9nSGFzaDogbG9nSGFzaCxcclxuICAgICAgaWRMZWFkOiBwYXlsb2FkLmlkTGVhZCxcclxuICAgICAgcGxpY29Db2RlOiBwYXlsb2FkLnBsaWNvQ29kZSxcclxuICAgICAgc2FsZXNQcm9jZXNzRm9yTG9nOiBwYXlsb2FkLnNhbGVzUHJvY2Vzc0ZvckxvZyxcclxuICAgIH0pLFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0LCBsb2dIYXNoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBXU091dHB1dDtcclxuXHJcbiAgaWYgKGRhdGEucmVzdWx0ICE9PSAnT0snKSB7XHJcbiAgICB0aHJvdyBuZXcgT3RwTm90VmFsaWRFcnJvcihkYXRhLnJlc3VsdCwgbG9nSGFzaCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gT0s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBhd2FpdCBnZXQoY2hlY2tPdHBTbXMkKS5tdXRhdGVBc3luYyh7XHJcbiAqICAgcGhvbmU6ICcnLFxyXG4gKiAgIG90cDogJycsXHJcbiAqICAgdG9rZW46ICcnLFxyXG4gKiB9KTtcclxuICovXHJcbmV4cG9ydCBjb25zdCBjaGVja090cFNtcyQgPSBhdG9tKGFzeW5jIChnZXQpID0+IHtcclxuICBjb25zdCBjb250cmFjdCA9IGdldChjdXJyZW50Q29udHJhY3RJbmZvQXRvbSk7XHJcbiAgY29uc3QgaWRMZWFkID0gY29udHJhY3QuaWRMZWFkO1xyXG4gIGNvbnN0IHBsaWNvQ29kZSA9IGF3YWl0IGNvbnRyYWN0LnBsaWNvQ29kZTtcclxuICBjb25zdCBzYWxlc1Byb2Nlc3NGb3JMb2cgPSBhd2FpdCBjb250cmFjdC5zYWxlc1Byb2Nlc3NGb3JMb2c7XHJcblxyXG4gIGNvbnN0IG11dGF0aW9uID0gYXRvbVdpdGhNdXRhdGlvbigoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtdXRhdGlvbktleTogWydjaGVjay1vdHAtc21zJ10sXHJcbiAgICAgIG11dGF0aW9uRm46IChwYXJhbXM6IHsgcGhvbmU6IHN0cmluZzsgb3RwOiBzdHJpbmc7IHRva2VuOiBzdHJpbmcgfSkgPT5cclxuICAgICAgICBjaGVja090cFNtcyh7XHJcbiAgICAgICAgICBwaG9uZTogcGFyYW1zLnBob25lLFxyXG4gICAgICAgICAgc2Vjb25kYXJ5VG9rZW46IHBhcmFtcy5vdHAsXHJcbiAgICAgICAgICB0b2tlbjogcGFyYW1zLnRva2VuLFxyXG4gICAgICAgICAgaWRMZWFkLFxyXG4gICAgICAgICAgcGxpY29Db2RlLFxyXG4gICAgICAgICAgc2FsZXNQcm9jZXNzRm9yTG9nLFxyXG4gICAgICAgIH0pLFxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGdldChtdXRhdGlvbik7XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL290cC9jaGVjay1vdHAtc21zLnRzIn0=