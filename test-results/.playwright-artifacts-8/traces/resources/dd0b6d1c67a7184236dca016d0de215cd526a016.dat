globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atomAction, createOptimisticAtom, PreconditionFailedError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithCheckIban } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkIban.ts";
import { checkModelloAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkModello.ts";
import { atomWithCheckTaxIdWithName } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkTaxIdWithName.ts";
import { isSamePaymentHolder } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithPaymentHolder.ts";
import { isExistingAccount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/ExistingAccount.ts";
import { NewAccount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/NewAccount.ts";
import { TransferAccount } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/TransferAccount.ts";
import { gasAtom, powerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { Bill, Payment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { customerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { atomWithNested, atomWithNestedReadable } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/utils/atom-with-nested.ts";
export const NEW_ACCOUNT = Symbol("NEW_ACCOUNT");
export const accountCodeSelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/accountCodeSelectedAtom", atom(NEW_ACCOUNT));
accountCodeSelectedAtom.debugLabel = "accountCodeSelectedAtom";
export const optimisticAccountCodeSelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/optimisticAccountCodeSelectedAtom", createOptimisticAtom(accountCodeSelectedAtom));
optimisticAccountCodeSelectedAtom.debugLabel = "optimisticAccountCodeSelectedAtom";
export const accountSelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/accountSelectedAtom", atom(async (get) => {
  const code = get(optimisticAccountCodeSelectedAtom);
  if (!code) return;
  if (typeof code === "object") {
    return code;
  }
  if (code === NEW_ACCOUNT) {
    const power = get(powerAtom);
    const gas = get(gasAtom);
    return new NewAccount(customerAtom, !!power, !!gas);
  }
  const customer = await get(customerAtom);
  const accounts = await get(customer.accounts);
  return accounts?.get(code);
}));
accountSelectedAtom.debugLabel = "accountSelectedAtom";
export const updateAccountForTransfer$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/updateAccountForTransfer$", atomAction(async (get, set, args) => {
  const account = await set(TransferAccount.new$, args);
  set(accountCodeSelectedAtom, account);
}));
updateAccountForTransfer$.debugLabel = "updateAccountForTransfer$";
function isTransferAccount(account) {
  return account instanceof TransferAccount;
}
export const accountTransferSelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/accountTransferSelectedAtom", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  return isTransferAccount(account) ? account : void 0;
}));
accountTransferSelectedAtom.debugLabel = "accountTransferSelectedAtom";
export const oldCustomerForTransferAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/oldCustomerForTransferAtom", atom(async (get) => {
  const transferAccount = await get(accountTransferSelectedAtom);
  return transferAccount?.oldCustomer;
}));
oldCustomerForTransferAtom.debugLabel = "oldCustomerForTransferAtom";
export const accountCodeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/accountCodeAtom", atom(async (get) => (await get(accountSelectedAtom))?.code));
accountCodeAtom.debugLabel = "accountCodeAtom";
export const supplyAddressSelectedAtom = atomWithNested(accountSelectedAtom, "supplyAddress");
export const supplyAddressAsStringAtom = atomWithNestedReadable(accountSelectedAtom, "supplyAddressAsString");
export const shippingAddressSelectedAtom = atomWithNested(accountSelectedAtom, "shippingAddress");
export const shippingAddressSameAsSupplyAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/shippingAddressSameAsSupplyAtom", atom(async (get) => {
  const addressSupply = await get(supplyAddressSelectedAtom);
  const addressShipping = await get(shippingAddressSelectedAtom);
  return addressShipping?.egonCodeNumber === addressSupply?.egonCodeNumber;
}));
shippingAddressSameAsSupplyAtom.debugLabel = "shippingAddressSameAsSupplyAtom";
export const shippingAddressAsStringAtom = atomWithNestedReadable(accountSelectedAtom, "shippingAddressAsString");
export const paymentToolSelected$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/paymentToolSelected$", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (!account) {
    throw new PreconditionFailedError("!account");
  }
  const paymentType = await get(account.paymentType$);
  if (paymentType !== Payment.DOMICILIATION) return;
  if (!account.paymentTool$) return;
  return get(account.paymentTool$);
}, async (get, set, tool) => {
  const account = await get(accountSelectedAtom);
  if (!account) {
    throw new PreconditionFailedError("!account");
  }
  const paymentType = await get(account.paymentType$);
  if (paymentType !== Payment.DOMICILIATION) {
    throw new PreconditionFailedError("account?.paymentType !== Payment.DIRECT");
  }
  const {
    ibanSeda
  } = await get(atomWithCheckIban(tool));
  if (tool.intestatario.type === "individual" && !await isSamePaymentHolder(get, account, tool.intestatario)) {
    await get(atomWithCheckTaxIdWithName(tool.intestatario));
  }
  if (tool.subscriber) {
    await get(atomWithCheckTaxIdWithName(tool.subscriber));
  }
  set(account.paymentTool$, {
    ...tool,
    ibanSeda
  });
}));
paymentToolSelected$.debugLabel = "paymentToolSelected$";
export const samePaymentHolderAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/samePaymentHolderAtom", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (!account) {
    throw new PreconditionFailedError("!account");
  }
  return get(account.samePaymentHolderAtom);
}));
samePaymentHolderAtom.debugLabel = "samePaymentHolderAtom";
export const checkCreditForCurrentPayment$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/checkCreditForCurrentPayment$", atom(async (get) => {
  const currentPayment = await get(accountSelectedAtom);
  const transferAccount = await get(accountTransferSelectedAtom);
  if (currentPayment == null) {
    throw new PreconditionFailedError("currentPayment is null");
  }
  if (currentPayment.checkCredit$ == null) {
    throw new PreconditionFailedError("cannot check currentPayment");
  }
  const {
    customerInWhitelist
  } = await get(currentPayment.checkCredit$);
  if (!customerInWhitelist && transferAccount) {
    await get(checkModelloAtom);
  }
}));
checkCreditForCurrentPayment$.debugLabel = "checkCreditForCurrentPayment$";
export const existingDomiciliation$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/existingDomiciliation$", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (account && isExistingAccount(account)) {
    const p = await get(account.paymentTypeFromService$);
    return p === Payment.DOMICILIATION;
  }
}));
existingDomiciliation$.debugLabel = "existingDomiciliation$";
export const existingDigitalBill$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/existingDigitalBill$", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (account && isExistingAccount(account)) {
    const p = await get(account.billTypeFromService$);
    return p === Bill.DIGITAL;
  }
}));
existingDigitalBill$.debugLabel = "existingDigitalBill$";
export const accountCommodity$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\account-selected-atoms.ts/accountCommodity$", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (!account) {
    return;
  }
  return account.commodity;
}));
accountCommodity$.debugLabel = "accountCommodity$";

//# sourceMappingURL=data:application/json;base64,