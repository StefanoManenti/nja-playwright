globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { tipoTroubleshooting$, tipoTroubleshootingCalcolato$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/tipo-troubleshooting.ts";
import { misuratoreMap, salesProcessBulkOrderMap, salesProcessMap } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/maps.ts";
import { NewActivationSalesProcess, TipoTroubleshooting } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/types.ts";
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
const _salesProcess$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/_salesProcess$", atom(async (get) => {
  const ts = await get(tipoTroubleshootingCalcolato$);
  if (ts == null) return;
  return salesProcessMap[ts];
}));
_salesProcess$.debugLabel = "_salesProcess$";
export const salesProcessBulkOrder$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/salesProcessBulkOrder$", atom(async (get) => {
  const s = await get(_salesProcess$);
  if (s == null) return;
  return salesProcessBulkOrderMap[s];
}));
salesProcessBulkOrder$.debugLabel = "salesProcessBulkOrder$";
export const misuratorePresente$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/misuratorePresente$", atom(async (get) => {
  const ts = await get(tipoTroubleshootingCalcolato$);
  if (ts == null) return;
  return misuratoreMap[ts];
}));
misuratorePresente$.debugLabel = "misuratorePresente$";
export const recapitiFooter$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/recapitiFooter$", atom(async (get) => {
  if (get(operativeModeAtom) !== OperativeMode.NEW_ACTIVATION) {
    return;
  }
  const tipologia = await get(_salesProcess$);
  if (tipologia == null) return;
  return equals(tipologia, NewActivationSalesProcess.PowerA01, NewActivationSalesProcess.PowerN02, NewActivationSalesProcess.GasA40, NewActivationSalesProcess.GasPN1);
}));
recapitiFooter$.debugLabel = "recapitiFooter$";
export const showPdfField$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/showPdfField$", atom((get) => {
  if (get(operativeModeAtom) !== OperativeMode.NEW_ACTIVATION) {
    return true;
  }
  const tipologia = get(tipoTroubleshooting$);
  if (tipologia == null) return;
  return equals(tipologia, TipoTroubleshooting.PowerS01, TipoTroubleshooting.PowerA01, TipoTroubleshooting.GasA01_c, TipoTroubleshooting.GasA01_n, TipoTroubleshooting.GasA40_c, TipoTroubleshooting.GasA40_n);
}));
showPdfField$.debugLabel = "showPdfField$";
export const hasStepDataAttivazione$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/hasStepDataAttivazione$", atom(async (get) => {
  if (get(operativeModeAtom) !== OperativeMode.NEW_ACTIVATION) {
    return "";
  }
  const tipologia = await get(_salesProcess$);
  switch (tipologia) {
    case NewActivationSalesProcess.PowerS01:
    case NewActivationSalesProcess.GasA01:
    case NewActivationSalesProcess.GasA40:
      return "semplice";
    case NewActivationSalesProcess.GasPN1:
      return "sopralluogo";
    default:
      return "";
  }
}));
hasStepDataAttivazione$.debugLabel = "hasStepDataAttivazione$";
export const hasStepSceltaDecorrenza$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/hasStepSceltaDecorrenza$", atom(async (get) => {
  const stepDataAttivazione = await get(hasStepDataAttivazione$);
  return !stepDataAttivazione;
}));
hasStepSceltaDecorrenza$.debugLabel = "hasStepSceltaDecorrenza$";
export const debugActivations = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\sales-process.ts/debugActivations", atom(async (get) => {
  return {
    salesProcess: await get(_salesProcess$),
    salesProcessBulkOrder: await get(salesProcessBulkOrder$),
    misuratorePresente: await get(misuratorePresente$),
    recapitiFooter: await get(recapitiFooter$),
    showPdfField: await get(showPdfField$),
    hasStepDataAttivazione: await get(hasStepDataAttivazione$)
  };
}));
debugActivations.debugLabel = "debugActivations";

//# sourceMappingURL=data:application/json;base64,