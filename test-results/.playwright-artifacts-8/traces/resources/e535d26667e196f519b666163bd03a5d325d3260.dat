globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { DependenciesGraph } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/lib/DependenciesGraph.ts";
export class StepsGraph extends DependenciesGraph {
  /**
   * Returns steps sorted by priorities (adjusted with dependencies)
   */
  getSortedSteps() {
    this.overrideStepsPriorities();
    return [...this.steps].sort((a, b) => a.priority.compare(b.priority));
  }
  overrideStepsPriorities() {
    for (const step of this.steps) {
      step.priority.reset();
    }
    console.groupCollapsed("Priorities");
    const stepVisitati = /* @__PURE__ */ new Set();
    const stepDaVisitare = [...this.getStepsConZeroDipendenti()];
    console.groupCollapsed("Controlli");
    let s = stepDaVisitare.pop();
    while (s) {
      console.debug(`Controllo step "${s}"`);
      if (stepVisitati.has(s)) {
        throw Error(`Rilevato ciclo di dipendenze allo step ${s}`);
      }
      const dipendenze = this.getDipendenze(s);
      for (const dipendenza of dipendenze) {
        if (dipendenza.priority.compare(s.priority) >= 0) {
          let message = `Sovrascritta priority allo step "${dipendenza}" causato dallo step "${s}" che dipende da esso.
Vecchia: ${dipendenza.priority}.`;
          dipendenza.priority.override(s.priority);
          message += `
Nuova: ${dipendenza.priority}.`;
          console.debug(message);
        }
        stepDaVisitare.push(dipendenza);
      }
      s = stepDaVisitare.pop();
    }
    console.groupEnd();
    const sortedSteps = [...this.steps].sort((a, b) => a.priority.compare(b.priority));
    for (const step of sortedSteps) {
      console.log(`[${step.priority}] ${step}`);
    }
    console.groupEnd();
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLFNBQVNBLHlCQUF5QjtBQUczQixhQUFNQyxtQkFBbUJELGtCQUk5QjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSUFFLGlCQUFpQjtBQUNmLFNBQUtDLHdCQUF3QjtBQUM3QixXQUFPLENBQUMsR0FBRyxLQUFLQyxLQUFLLEVBQUVDLEtBQUssQ0FBQ0MsR0FBR0MsTUFBTUQsRUFBRUUsU0FBU0MsUUFBUUYsRUFBRUMsUUFBUSxDQUFDO0FBQUEsRUFDdEU7QUFBQSxFQUVRTCwwQkFBMEI7QUFDaEMsZUFBV08sUUFBUSxLQUFLTixPQUFPO0FBQzdCTSxXQUFLRixTQUFTRyxNQUFNO0FBQUEsSUFDdEI7QUFFQUMsWUFBUUMsZUFBZSxZQUFZO0FBQ25DLFVBQU1DLGVBQWUsb0JBQUlDLElBQVU7QUFDbkMsVUFBTUMsaUJBQWlCLENBQUMsR0FBRyxLQUFLQywwQkFBMEIsQ0FBQztBQUUzREwsWUFBUUMsZUFBZSxXQUFXO0FBQ2xDLFFBQUlLLElBQUlGLGVBQWVHLElBQUk7QUFDM0IsV0FBT0QsR0FBRztBQUNSTixjQUFRUSxNQUFNLG1CQUFtQkYsQ0FBQyxHQUFHO0FBQ3JDLFVBQUlKLGFBQWFPLElBQUlILENBQUMsR0FBRztBQUN2QixjQUFNSSxNQUFNLDBDQUEwQ0osQ0FBQyxFQUFFO0FBQUEsTUFDM0Q7QUFFQSxZQUFNSyxhQUFhLEtBQUtDLGNBQWNOLENBQUM7QUFDdkMsaUJBQVdPLGNBQWNGLFlBQVk7QUFDbkMsWUFBSUUsV0FBV2pCLFNBQVNDLFFBQVFTLEVBQUVWLFFBQVEsS0FBSyxHQUFHO0FBQ2hELGNBQUlrQixVQUNGLG9DQUFvQ0QsVUFBVSx5QkFBeUJQLENBQUM7QUFBQSxXQUMxRE8sV0FBV2pCLFFBQVE7QUFDbkNpQixxQkFBV2pCLFNBQVNtQixTQUFTVCxFQUFFVixRQUFRO0FBQ3ZDa0IscUJBQVc7QUFBQSxTQUFZRCxXQUFXakIsUUFBUTtBQUMxQ0ksa0JBQVFRLE1BQU1NLE9BQU87QUFBQSxRQUN2QjtBQUNBVix1QkFBZVksS0FBS0gsVUFBVTtBQUFBLE1BQ2hDO0FBQ0FQLFVBQUlGLGVBQWVHLElBQUk7QUFBQSxJQUN6QjtBQUNBUCxZQUFRaUIsU0FBUztBQUVqQixVQUFNQyxjQUFjLENBQUMsR0FBRyxLQUFLMUIsS0FBSyxFQUFFQyxLQUFLLENBQUNDLEdBQUdDLE1BQzNDRCxFQUFFRSxTQUFTQyxRQUFRRixFQUFFQyxRQUFRLENBQy9CO0FBQ0EsZUFBV0UsUUFBUW9CLGFBQWE7QUFDOUJsQixjQUFRbUIsSUFBSSxJQUFJckIsS0FBS0YsUUFBUSxLQUFLRSxJQUFJLEVBQUU7QUFBQSxJQUMxQztBQUVBRSxZQUFRaUIsU0FBUztBQUFBLEVBQ25CO0FBQ0YiLCJuYW1lcyI6WyJEZXBlbmRlbmNpZXNHcmFwaCIsIlN0ZXBzR3JhcGgiLCJnZXRTb3J0ZWRTdGVwcyIsIm92ZXJyaWRlU3RlcHNQcmlvcml0aWVzIiwic3RlcHMiLCJzb3J0IiwiYSIsImIiLCJwcmlvcml0eSIsImNvbXBhcmUiLCJzdGVwIiwicmVzZXQiLCJjb25zb2xlIiwiZ3JvdXBDb2xsYXBzZWQiLCJzdGVwVmlzaXRhdGkiLCJTZXQiLCJzdGVwRGFWaXNpdGFyZSIsImdldFN0ZXBzQ29uWmVyb0RpcGVuZGVudGkiLCJzIiwicG9wIiwiZGVidWciLCJoYXMiLCJFcnJvciIsImRpcGVuZGVuemUiLCJnZXREaXBlbmRlbnplIiwiZGlwZW5kZW56YSIsIm1lc3NhZ2UiLCJvdmVycmlkZSIsInB1c2giLCJncm91cEVuZCIsInNvcnRlZFN0ZXBzIiwibG9nIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIlN0ZXBzR3JhcGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YUtleSwgU3RlcCB9IGZyb20gJy4vU3RlcCc7XHJcbmltcG9ydCB7IERlcGVuZGVuY2llc0dyYXBoIH0gZnJvbSAnLi9EZXBlbmRlbmNpZXNHcmFwaCc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGVwc0dyYXBoIGV4dGVuZHMgRGVwZW5kZW5jaWVzR3JhcGg8XHJcbiAgRGF0YUtleSxcclxuICBTdGVwLFxyXG4gIFtnZXQ6IEdldHRlcl1cclxuPiB7XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBzdGVwcyBzb3J0ZWQgYnkgcHJpb3JpdGllcyAoYWRqdXN0ZWQgd2l0aCBkZXBlbmRlbmNpZXMpXHJcbiAgICovXHJcbiAgZ2V0U29ydGVkU3RlcHMoKSB7XHJcbiAgICB0aGlzLm92ZXJyaWRlU3RlcHNQcmlvcml0aWVzKCk7XHJcbiAgICByZXR1cm4gWy4uLnRoaXMuc3RlcHNdLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkuY29tcGFyZShiLnByaW9yaXR5KSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG92ZXJyaWRlU3RlcHNQcmlvcml0aWVzKCkge1xyXG4gICAgZm9yIChjb25zdCBzdGVwIG9mIHRoaXMuc3RlcHMpIHtcclxuICAgICAgc3RlcC5wcmlvcml0eS5yZXNldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoJ1ByaW9yaXRpZXMnKTtcclxuICAgIGNvbnN0IHN0ZXBWaXNpdGF0aSA9IG5ldyBTZXQ8U3RlcD4oKTtcclxuICAgIGNvbnN0IHN0ZXBEYVZpc2l0YXJlID0gWy4uLnRoaXMuZ2V0U3RlcHNDb25aZXJvRGlwZW5kZW50aSgpXTtcclxuXHJcbiAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKCdDb250cm9sbGknKTtcclxuICAgIGxldCBzID0gc3RlcERhVmlzaXRhcmUucG9wKCk7XHJcbiAgICB3aGlsZSAocykge1xyXG4gICAgICBjb25zb2xlLmRlYnVnKGBDb250cm9sbG8gc3RlcCBcIiR7c31cImApO1xyXG4gICAgICBpZiAoc3RlcFZpc2l0YXRpLmhhcyhzKSkge1xyXG4gICAgICAgIHRocm93IEVycm9yKGBSaWxldmF0byBjaWNsbyBkaSBkaXBlbmRlbnplIGFsbG8gc3RlcCAke3N9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRpcGVuZGVuemUgPSB0aGlzLmdldERpcGVuZGVuemUocykhO1xyXG4gICAgICBmb3IgKGNvbnN0IGRpcGVuZGVuemEgb2YgZGlwZW5kZW56ZSkge1xyXG4gICAgICAgIGlmIChkaXBlbmRlbnphLnByaW9yaXR5LmNvbXBhcmUocy5wcmlvcml0eSkgPj0gMCkge1xyXG4gICAgICAgICAgbGV0IG1lc3NhZ2UgPVxyXG4gICAgICAgICAgICBgU292cmFzY3JpdHRhIHByaW9yaXR5IGFsbG8gc3RlcCBcIiR7ZGlwZW5kZW56YX1cIiBjYXVzYXRvIGRhbGxvIHN0ZXAgXCIke3N9XCIgY2hlIGRpcGVuZGUgZGEgZXNzby5gICtcclxuICAgICAgICAgICAgYFxcblZlY2NoaWE6ICR7ZGlwZW5kZW56YS5wcmlvcml0eX0uYDtcclxuICAgICAgICAgIGRpcGVuZGVuemEucHJpb3JpdHkub3ZlcnJpZGUocy5wcmlvcml0eSk7XHJcbiAgICAgICAgICBtZXNzYWdlICs9IGBcXG5OdW92YTogJHtkaXBlbmRlbnphLnByaW9yaXR5fS5gO1xyXG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyhtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RlcERhVmlzaXRhcmUucHVzaChkaXBlbmRlbnphKTtcclxuICAgICAgfVxyXG4gICAgICBzID0gc3RlcERhVmlzaXRhcmUucG9wKCk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XHJcblxyXG4gICAgY29uc3Qgc29ydGVkU3RlcHMgPSBbLi4udGhpcy5zdGVwc10uc29ydCgoYSwgYikgPT5cclxuICAgICAgYS5wcmlvcml0eS5jb21wYXJlKGIucHJpb3JpdHkpXHJcbiAgICApO1xyXG4gICAgZm9yIChjb25zdCBzdGVwIG9mIHNvcnRlZFN0ZXBzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtzdGVwLnByaW9yaXR5fV0gJHtzdGVwfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcclxuICB9XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9lbmdpbmUvc3JjL2xpYi9TdGVwc0dyYXBoLnRzIn0=