globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
class Questions {
  constructor(answers) {
    this.answers = answers;
    this.set = /* @__PURE__ */ new Set();
    this.array = [];
  }
  push(q) {
    this.array.push(q);
    this.set.add(q.id);
  }
  has(id) {
    return this.set.has(id);
  }
  getAnswer(id) {
    if (this.has(id)) {
      return this.answers[id];
    }
  }
}
export function getActivationQuestionsPower(answers) {
  const questions = new Questions(answers);
  questions.push({
    id: "contatorePresente",
    question: "Per iniziare, possiedi un contatore della luce?",
    answers: [
      { id: "yes", text: "Sì, è installato" },
      { id: "no", text: "No, non ho il contatore" }
    ]
  });
  switch (questions.getAnswer("contatorePresente")) {
    case "yes":
      questions.push({
        id: "aperto",
        question: "La fornitura è attiva?",
        answers: [
          { id: "yes", text: "Sì, è attiva" },
          { id: "no", text: "No, non lo è mai stata" },
          { id: "past", text: "Lo è stata in passato" }
        ]
      });
      break;
    case "no":
      questions.push({
        id: "predisposizioneImpianto",
        question: "C’è l’attacco del contatore?",
        answers: [
          { id: "yes", text: "Sì, c’è" },
          { id: "no", text: "No, non c’è" }
        ]
      });
      break;
  }
  switch (questions.getAnswer("aperto")) {
    case "yes":
      questions.push({
        id: "plenitudeCustomer",
        question: "Sei già cliente Plenitude?",
        answers: [
          { id: "yes", text: "Sì, sono già cliente" },
          { id: "no", text: "No, non sono cliente" }
        ]
      });
      break;
  }
  return questions.array;
}
export function getActivationQuestionsGas(answers) {
  const questions = new Questions(answers);
  questions.push({
    id: "contatorePresente",
    question: "Per iniziare, possiedi il contatore del gas?",
    answers: [
      { id: "yes", text: "Sì, è installato" },
      { id: "no", text: "No, non ho il contatore" }
    ]
  });
  switch (questions.getAnswer("contatorePresente")) {
    case "yes":
      questions.push({
        id: "aperto",
        question: "La fornitura è attiva?",
        answers: [
          { id: "yes", text: "Sì, è attiva" },
          { id: "no", text: "No, non è attiva" }
        ]
      });
      break;
    case "no":
      questions.push({
        id: "attaccoContatore",
        question: "C’è l’attacco del contatore?",
        answers: [
          { id: "yesPdr", text: "Sì, con PDR" },
          { id: "yes", text: "Sì, senza PDR" },
          { id: "no", text: "No" }
        ]
      });
      break;
  }
  if (questions.getAnswer("aperto") === "no" || questions.getAnswer("attaccoContatore") === "yesPdr") {
    questions.push({
      id: "impiantoModificato",
      question: "Hai fatto dei lavori sull’impianto?",
      answers: [
        { id: "yes", text: "Sì" },
        { id: "no", text: "No" },
        { id: "idk", text: "Non lo so" }
      ]
    });
  }
  return questions.array;
}
export function getQuerystringFromAnswersPower(answers) {
  const params = new URLSearchParams();
  params.set("attaccoPresente", "null");
  params.set("pdrPresente", "null");
  params.set("impiantoModificato", "null");
  if (answers.contatorePresente === "yes") {
    params.set("contatorePresente", "true");
    if (answers.aperto === "yes") {
      params.set("aperto", "true");
      if (answers.plenitudeCustomer === "yes") {
        throw Error("VOLTURA");
      } else if (answers.plenitudeCustomer === "no") {
        throw Error("VOLTURA + SWITCH");
      }
    } else if (answers.aperto === "no") {
      params.set("aperto", "null");
      params.set("predisposizioneImpianto", "true");
    } else if (answers.aperto === "past") {
      params.set("aperto", "false");
      params.set("predisposizioneImpianto", "null");
    }
  } else if (answers.contatorePresente === "no") {
    params.set("contatorePresente", "false");
    params.set("aperto", "null");
    if (answers.predisposizioneImpianto === "yes") {
      params.set("predisposizioneImpianto", "true");
    } else if (answers.predisposizioneImpianto === "no") {
      params.set("predisposizioneImpianto", "null");
    }
  }
  return params;
}
export function getQuerystringFromAnswersGas(answers) {
  const params = new URLSearchParams();
  params.set("predisposizioneImpianto", "null");
  if (answers.contatorePresente === "yes") {
    params.set("contatorePresente", "true");
    params.set("attaccoPresente", "null");
    if (answers.aperto === "yes") {
      throw Error("VOLTURA");
    } else if (answers.aperto === "no") {
      params.set("aperto", "false");
      params.set("pdrPresente", "null");
      if (answers.impiantoModificato === "yes") {
        params.set("impiantoModificato", "true");
      } else if (answers.impiantoModificato === "no" || answers.impiantoModificato === "idk") {
        params.set("impiantoModificato", "false");
      }
    }
  } else if (answers.contatorePresente === "no") {
    params.set("contatorePresente", "false");
    params.set("aperto", "null");
    if (answers.attaccoContatore === "yesPdr") {
      params.set("attaccoPresente", "true");
      params.set("pdrPresente", "true");
      if (answers.impiantoModificato === "yes") {
        params.set("impiantoModificato", "true");
      } else if (answers.impiantoModificato === "no" || answers.impiantoModificato === "idk") {
        params.set("impiantoModificato", "false");
      }
    } else if (answers.attaccoContatore === "yes" || answers.attaccoContatore === "no") {
      params.set("attaccoPresente", "false");
      params.set("pdrPresente", "null");
      params.set("impiantoModificato", "null");
    }
  }
  return params;
}
export function getActivationTypePower(answers) {
  if (answers.contatorePresente === "yes") {
    if (answers.aperto === "yes") {
      if (answers.plenitudeCustomer === "yes") {
        return "Voltura luce";
      } else if (answers.plenitudeCustomer === "no") {
        return "Attivare un’offerta con voltura";
      }
    } else if (answers.aperto === "no") {
      return "Prima attivazione del contatore";
    } else if (answers.aperto === "past") {
      return "Subentro";
    }
  } else if (answers.contatorePresente === "no") {
    if (answers.predisposizioneImpianto === "yes") {
      return "Posa e attivazione del contatore";
    } else if (answers.predisposizioneImpianto === "no") {
      return "Allaccio, posa e attivazione del contatore";
    }
  }
}
export function getActivationTypeGas(answers) {
  if (answers.contatorePresente === "yes") {
    if (answers.aperto === "yes") {
      return "Voltura gas";
    } else if (answers.aperto === "no") {
      if (answers.impiantoModificato === "yes") {
        return "Subentro";
      } else if (answers.impiantoModificato === "no" || answers.impiantoModificato === "idk") {
        return "Subentro semplice";
      }
    }
  } else if (answers.contatorePresente === "no") {
    if (answers.attaccoContatore === "yesPdr") {
      return "Posa e attivazione del contatore";
    } else if (answers.attaccoContatore === "yes" || answers.attaccoContatore === "no") {
      return "Allaccio, posa e attivazione del contatore";
    }
  }
}

//# sourceMappingURL=data:application/json;base64,