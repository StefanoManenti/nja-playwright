globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { checkModalitaOperativa } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/offers/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { corrispettiviCommodityAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi-commodity-atom.ts";
export class PromoObj {
  constructor(promo) {
    this.promo = promo;
    this.title = this.promo.title;
    this.text = this.promo.text;
    this.imageUrl = this.promo.imageUrl;
  }
  isPromoValid(operativeMode, commodity) {
    if (equals(operativeMode, OperativeMode.CHANGE_OFFER)) {
      return false;
    }
    return (!this.promo.operativeModes || checkModalitaOperativa(this.promo.operativeModes, operativeMode)) && this.promo.commodities.includes(commodity);
  }
}
const offerPromosAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\promo-atoms.ts/offerPromosAtom", atom(async (get) => {
  const corrispettiviCommodity = await get(corrispettiviCommodityAtom);
  const promo = corrispettiviCommodity?.promo || [];
  return promo.map((promo2) => new PromoObj(promo2));
}));
offerPromosAtom.debugLabel = "offerPromosAtom";
export const currentPromosAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\promo-atoms.ts/currentPromosAtom", atom(async (get) => {
  const wp = get(workingProductAtom);
  const operativeMode = wp?.operativeMode;
  const commodity = wp?.commodity?.toString();
  if (!commodity || !operativeMode) {
    return [];
  }
  if (equals(operativeMode, OperativeMode.CHANGE_OFFER)) {
    return [];
  }
  const promo = await get(offerPromosAtom);
  return promo.filter((p) => p.isPromoValid(operativeMode, commodity));
}));
currentPromosAtom.debugLabel = "currentPromosAtom";
export const getDiscountPrezziBarratiAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\promo-atoms.ts/getDiscountPrezziBarratiAtom", atom(async (get) => {
  const corrispettiviCommodity = await get(corrispettiviCommodityAtom);
  const prezziBarrati = corrispettiviCommodity.sconti.prezziBarrati;
  return {
    badge: prezziBarrati?.badge,
    isOperativeModeEnabled: (operativeMode) => checkModalitaOperativa(prezziBarrati?.operativeModes, operativeMode)
  };
}));
getDiscountPrezziBarratiAtom.debugLabel = "getDiscountPrezziBarratiAtom";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFCQUFxQjtBQUM5QixTQUFTQyxjQUFjO0FBQ3ZCLFNBQVNDLDhCQUE4QjtBQUV2QyxTQUFTQyxZQUFZO0FBQ3JCLFNBQVNDLDBCQUEwQjtBQUNuQyxTQUFTQyxrQ0FBa0M7QUFJcEMsYUFBTUMsU0FBUztBQUFBLEVBQ3BCQyxZQUE0QkMsT0FBYztBQUFkQTtBQUU1QixTQUFnQkMsUUFBUSxLQUFLRCxNQUFNQztBQUNuQyxTQUFnQkMsT0FBTyxLQUFLRixNQUFNRTtBQUNsQyxTQUFnQkMsV0FBVyxLQUFLSCxNQUFNRztBQUFBQSxFQUpLO0FBQUEsRUFNM0NDLGFBQ0VDLGVBQ0FDLFdBQ1M7QUFDVCxRQUFJYixPQUFPWSxlQUFlYixjQUFjZSxZQUFZLEdBQUc7QUFDckQsYUFBTztBQUFBLElBQ1Q7QUFFQSxZQUNHLENBQUMsS0FBS1AsTUFBTVEsa0JBQ1hkLHVCQUF1QixLQUFLTSxNQUFNUSxnQkFBZ0JILGFBQWEsTUFDakUsS0FBS0wsTUFBTVMsWUFBWUMsU0FBU0osU0FBUztBQUFBLEVBRTdDO0FBQ0Y7QUFBQyxNQUFBSyxrQkFBQUMsV0FBQUMsZUFBQUMsSUFBQSx1SEFFdUJuQixLQUFLLE9BQU9tQixRQUFRO0FBQzFDLFFBQU1DLHlCQUF5QixNQUFNRCxJQUFJakIsMEJBQTBCO0FBQ25FLFFBQU1HLFFBQWlCZSx3QkFBd0JmLFNBQVM7QUFDeEQsU0FBT0EsTUFBTWdCLElBQUtoQixZQUFVLElBQUlGLFNBQVNFLE1BQUssQ0FBQztBQUNqRCxDQUFDLENBQUM7QUFBQVcsZ0JBQUFNLGFBQUE7QUFFRixhQUFBQyxvQkFBQU4sV0FBQUMsZUFBQUMsSUFBQSx5SEFBaUNuQixLQUEwQixPQUFPbUIsUUFBUTtBQUN4RSxRQUFNSyxLQUFLTCxJQUFJbEIsa0JBQWtCO0FBQ2pDLFFBQU1TLGdCQUFnQmMsSUFBSWQ7QUFDMUIsUUFBTUMsWUFBWWEsSUFBSWIsV0FBV2MsU0FBUztBQUUxQyxNQUFJLENBQUNkLGFBQWEsQ0FBQ0QsZUFBZTtBQUNoQyxXQUFPO0FBQUEsRUFDVDtBQUVBLE1BQUlaLE9BQU9ZLGVBQWViLGNBQWNlLFlBQVksR0FBRztBQUNyRCxXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU1QLFFBQVEsTUFBTWMsSUFBSUgsZUFBZTtBQUN2QyxTQUFPWCxNQUFNcUIsT0FBUUMsT0FBTUEsRUFBRWxCLGFBQWFDLGVBQWVDLFNBQVMsQ0FBQztBQUNyRSxDQUFDLENBQUM7QUFFRlksa0JBQUFELGFBQUE7QUFXQSxhQUFBTSwrQkFBQVgsV0FBQUMsZUFBQUMsSUFBQSxvSUFBNENuQixLQUFLLE9BQU9tQixRQUFRO0FBQzlELFFBQU1DLHlCQUF5QixNQUFNRCxJQUFJakIsMEJBQTBCO0FBQ25FLFFBQU0yQixnQkFBZ0JULHVCQUF1QlUsT0FBT0Q7QUFFcEQsU0FBTztBQUFBLElBQ0xFLE9BQU9GLGVBQWVFO0FBQUFBLElBQ3RCQyx3QkFBd0JBLENBQUN0QixrQkFDdkJYLHVCQUF1QjhCLGVBQWVoQixnQkFBZ0JILGFBQWE7QUFBQSxFQUN2RTtBQUNGLENBQUMsQ0FBQztBQUFDa0IsNkJBQUFOLGFBQUEiLCJuYW1lcyI6WyJPcGVyYXRpdmVNb2RlIiwiZXF1YWxzIiwiY2hlY2tNb2RhbGl0YU9wZXJhdGl2YSIsImF0b20iLCJ3b3JraW5nUHJvZHVjdEF0b20iLCJjb3JyaXNwZXR0aXZpQ29tbW9kaXR5QXRvbSIsIlByb21vT2JqIiwiY29uc3RydWN0b3IiLCJwcm9tbyIsInRpdGxlIiwidGV4dCIsImltYWdlVXJsIiwiaXNQcm9tb1ZhbGlkIiwib3BlcmF0aXZlTW9kZSIsImNvbW1vZGl0eSIsIkNIQU5HRV9PRkZFUiIsIm9wZXJhdGl2ZU1vZGVzIiwiY29tbW9kaXRpZXMiLCJpbmNsdWRlcyIsIm9mZmVyUHJvbW9zQXRvbSIsImdsb2JhbFRoaXMiLCJqb3RhaUF0b21DYWNoZSIsImdldCIsImNvcnJpc3BldHRpdmlDb21tb2RpdHkiLCJtYXAiLCJkZWJ1Z0xhYmVsIiwiY3VycmVudFByb21vc0F0b20iLCJ3cCIsInRvU3RyaW5nIiwiZmlsdGVyIiwicCIsImdldERpc2NvdW50UHJlenppQmFycmF0aUF0b20iLCJwcmV6emlCYXJyYXRpIiwic2NvbnRpIiwiYmFkZ2UiLCJpc09wZXJhdGl2ZU1vZGVFbmFibGVkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInByb21vLWF0b21zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wZXJhdGl2ZU1vZGUgfSBmcm9tICcuLi90cm91Ymxlc2hvb3RpbmcvdHlwZXMnO1xyXG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBjaGVja01vZGFsaXRhT3BlcmF0aXZhIH0gZnJvbSAnLi4vYXBpL29mZmVycyc7XHJcbmltcG9ydCB7IE9mZmVydGFTdGF0ZUZvckNvcnJpc3BldHRpdmkgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgd29ya2luZ1Byb2R1Y3RBdG9tIH0gZnJvbSAnLi4vdHJvdWJsZXNob290aW5nL3Ryb3VibGVzaG9vdGluZyc7XHJcbmltcG9ydCB7IGNvcnJpc3BldHRpdmlDb21tb2RpdHlBdG9tIH0gZnJvbSAnLi9jb3JyaXNwZXR0aXZpLWNvbW1vZGl0eS1hdG9tJztcclxuXHJcbmV4cG9ydCB0eXBlIFByb21vID0gT2ZmZXJ0YVN0YXRlRm9yQ29ycmlzcGV0dGl2aVsncHJvbW8nXVtudW1iZXJdO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb21vT2JqIHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcHJvbW86IFByb21vKSB7fVxyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgdGl0bGUgPSB0aGlzLnByb21vLnRpdGxlO1xyXG4gIHB1YmxpYyByZWFkb25seSB0ZXh0ID0gdGhpcy5wcm9tby50ZXh0O1xyXG4gIHB1YmxpYyByZWFkb25seSBpbWFnZVVybCA9IHRoaXMucHJvbW8uaW1hZ2VVcmw7XHJcblxyXG4gIGlzUHJvbW9WYWxpZChcclxuICAgIG9wZXJhdGl2ZU1vZGU6IE9wZXJhdGl2ZU1vZGUsXHJcbiAgICBjb21tb2RpdHk6ICdQT1dFUicgfCAnR0FTJyB8ICdEVUFMJ1xyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGVxdWFscyhvcGVyYXRpdmVNb2RlLCBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUikpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICghdGhpcy5wcm9tby5vcGVyYXRpdmVNb2RlcyB8fFxyXG4gICAgICAgIGNoZWNrTW9kYWxpdGFPcGVyYXRpdmEodGhpcy5wcm9tby5vcGVyYXRpdmVNb2Rlcywgb3BlcmF0aXZlTW9kZSkpICYmXHJcbiAgICAgIHRoaXMucHJvbW8uY29tbW9kaXRpZXMuaW5jbHVkZXMoY29tbW9kaXR5KVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG9mZmVyUHJvbW9zQXRvbSA9IGF0b20oYXN5bmMgKGdldCkgPT4ge1xyXG4gIGNvbnN0IGNvcnJpc3BldHRpdmlDb21tb2RpdHkgPSBhd2FpdCBnZXQoY29ycmlzcGV0dGl2aUNvbW1vZGl0eUF0b20pO1xyXG4gIGNvbnN0IHByb21vOiBQcm9tb1tdID0gY29ycmlzcGV0dGl2aUNvbW1vZGl0eT8ucHJvbW8gfHwgW107XHJcbiAgcmV0dXJuIHByb21vLm1hcCgocHJvbW8pID0+IG5ldyBQcm9tb09iaihwcm9tbykpO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjdXJyZW50UHJvbW9zQXRvbSA9IGF0b208UHJvbWlzZTxQcm9tb09ialtdPj4oYXN5bmMgKGdldCkgPT4ge1xyXG4gIGNvbnN0IHdwID0gZ2V0KHdvcmtpbmdQcm9kdWN0QXRvbSk7XHJcbiAgY29uc3Qgb3BlcmF0aXZlTW9kZSA9IHdwPy5vcGVyYXRpdmVNb2RlO1xyXG4gIGNvbnN0IGNvbW1vZGl0eSA9IHdwPy5jb21tb2RpdHk/LnRvU3RyaW5nKCk7XHJcblxyXG4gIGlmICghY29tbW9kaXR5IHx8ICFvcGVyYXRpdmVNb2RlKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBpZiAoZXF1YWxzKG9wZXJhdGl2ZU1vZGUsIE9wZXJhdGl2ZU1vZGUuQ0hBTkdFX09GRkVSKSkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcHJvbW8gPSBhd2FpdCBnZXQob2ZmZXJQcm9tb3NBdG9tKTtcclxuICByZXR1cm4gcHJvbW8uZmlsdGVyKChwKSA9PiBwLmlzUHJvbW9WYWxpZChvcGVyYXRpdmVNb2RlLCBjb21tb2RpdHkpKTtcclxufSk7XHJcblxyXG4vKipcclxuICogR2V0IGRldGFpbHMgYWJvdXQgZGlzY291bnRlZCBjcm9zc2VkIHByaWNlcy5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBmZXRjaGVzIHRoZSByZWxldmFudCBkYXRhIGZvciBkaXNjb3VudGVkIGNyb3NzZWQgcHJpY2VzLCB3aGljaCBpbmNsdWRlcyBhIGJhZGdlXHJcbiAqIGFuZCBhIG1ldGhvZCB0byBjaGVjayBpZiBhIGNlcnRhaW4gb3BlcmF0aXZlIG1vZGUgaXMgZW5hYmxlZC5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmc6XHJcbiAqIC0gYGJhZGdlYCAoc3RyaW5nIHwgdW5kZWZpbmVkKTogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBiYWRnZSBhc3NvY2lhdGVkIHdpdGggdGhlIGRpc2NvdW50ZWQgY3Jvc3NlZCBwcmljZXMuXHJcbiAqIC0gYGlzT3BlcmF0aXZlTW9kZUVuYWJsZWRgIChmdW5jdGlvbik6IEEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFuIGBPcGVyYXRpdmVNb2RlYCBhbmQgcmV0dXJucyBhIGJvb2xlYW5cclxuICogICBpbmRpY2F0aW5nIHdoZXRoZXIgYSBzcGVjaWZpZWQgb3BlcmF0aXZlIG1vZGUgaXMgZW5hYmxlZCBiYXNlZCBvbiB0aGUgYXNzb2NpYXRlZCBtb2Rlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXREaXNjb3VudFByZXp6aUJhcnJhdGlBdG9tID0gYXRvbShhc3luYyAoZ2V0KSA9PiB7XHJcbiAgY29uc3QgY29ycmlzcGV0dGl2aUNvbW1vZGl0eSA9IGF3YWl0IGdldChjb3JyaXNwZXR0aXZpQ29tbW9kaXR5QXRvbSk7XHJcbiAgY29uc3QgcHJlenppQmFycmF0aSA9IGNvcnJpc3BldHRpdmlDb21tb2RpdHkuc2NvbnRpLnByZXp6aUJhcnJhdGk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBiYWRnZTogcHJlenppQmFycmF0aT8uYmFkZ2UsXHJcbiAgICBpc09wZXJhdGl2ZU1vZGVFbmFibGVkOiAob3BlcmF0aXZlTW9kZTogT3BlcmF0aXZlTW9kZSkgPT5cclxuICAgICAgY2hlY2tNb2RhbGl0YU9wZXJhdGl2YShwcmV6emlCYXJyYXRpPy5vcGVyYXRpdmVNb2Rlcywgb3BlcmF0aXZlTW9kZSksXHJcbiAgfTtcclxufSk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9vZmZlcnRhL3Byb21vLWF0b21zLnRzIn0=