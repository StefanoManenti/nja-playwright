globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
export async function extractTelephoneCountryCode(telephone) {
  if (!telephone) return;
  if (telephone.startsWith("+")) {
    const country = await getCountryFromTelephone(telephone);
    if (country) {
      return {
        country,
        telephone: telephone.slice(country.phone.length),
        full: telephone
      };
    }
  }
  return {
    country: itCountry,
    telephone,
    full: itCountry.phone + telephone
  };
}
async function getCountryFromTelephone(telephone) {
  const cachedCountries = [itCountry];
  return cachedCountries.find(({
    phone
  }) => telephone.startsWith(phone)) || (await fetchTelephoneCountryCodes()).find(({
    phone
  }) => telephone.startsWith(phone));
}
const itCountry = {
  code: "IT",
  label: "Italia",
  phone: "+39"
};
export async function fetchTelephoneCountryCodes() {
  const {
    countries
  } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/tel-country-codes/data.ts");
  return countries;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVNBLHNCQUFzQkEsNEJBQ3BCQyxXQUNxQztBQUNyQyxNQUFJLENBQUNBLFVBQVc7QUFFaEIsTUFBSUEsVUFBVUMsV0FBVyxHQUFHLEdBQUc7QUFDN0IsVUFBTUMsVUFBVSxNQUFNQyx3QkFBd0JILFNBQVM7QUFFdkQsUUFBSUUsU0FBUztBQUNYLGFBQU87QUFBQSxRQUNMQTtBQUFBQSxRQUNBRixXQUFXQSxVQUFVSSxNQUFNRixRQUFRRyxNQUFNQyxNQUFNO0FBQUEsUUFDL0NDLE1BQU1QO0FBQUFBLE1BQ1I7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLFNBQU87QUFBQSxJQUNMRSxTQUFTTTtBQUFBQSxJQUNUUjtBQUFBQSxJQUNBTyxNQUFNQyxVQUFVSCxRQUFRTDtBQUFBQSxFQUMxQjtBQUNGO0FBRUEsZUFBZUcsd0JBQXdCSCxXQUFtQjtBQUN4RCxRQUFNUyxrQkFBa0IsQ0FBQ0QsU0FBUztBQUVsQyxTQUNFQyxnQkFBZ0JDLEtBQUssQ0FBQztBQUFBLElBQUVMO0FBQUFBLEVBQU0sTUFBTUwsVUFBVUMsV0FBV0ksS0FBSyxDQUFDLE1BQzlELE1BQU1NLDJCQUEyQixHQUFHRCxLQUFLLENBQUM7QUFBQSxJQUFFTDtBQUFBQSxFQUFNLE1BQ2pETCxVQUFVQyxXQUFXSSxLQUFLLENBQzVCO0FBRUo7QUFFQSxNQUFNRyxZQUF5QjtBQUFBLEVBQUVJLE1BQU07QUFBQSxFQUFNQyxPQUFPO0FBQUEsRUFBVVIsT0FBTztBQUFNO0FBRTNFLHNCQUFzQk0sNkJBQTZCO0FBQ2pELFFBQU07QUFBQSxJQUFFRztBQUFBQSxFQUFVLElBQUksTUFBTSxPQUFPLFFBQVE7QUFDM0MsU0FBT0E7QUFDVCIsIm5hbWVzIjpbImV4dHJhY3RUZWxlcGhvbmVDb3VudHJ5Q29kZSIsInRlbGVwaG9uZSIsInN0YXJ0c1dpdGgiLCJjb3VudHJ5IiwiZ2V0Q291bnRyeUZyb21UZWxlcGhvbmUiLCJzbGljZSIsInBob25lIiwibGVuZ3RoIiwiZnVsbCIsIml0Q291bnRyeSIsImNhY2hlZENvdW50cmllcyIsImZpbmQiLCJmZXRjaFRlbGVwaG9uZUNvdW50cnlDb2RlcyIsImNvZGUiLCJsYWJlbCIsImNvdW50cmllcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJzcGxpdC10ZWxlcGhvbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb3VudHJ5VHlwZSwgUGhvbmVFeHRyYWN0ZWQgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VGVsZXBob25lQ291bnRyeUNvZGUoXHJcbiAgdGVsZXBob25lOiBzdHJpbmdcclxuKTogUHJvbWlzZTxQaG9uZUV4dHJhY3RlZD47XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHRyYWN0VGVsZXBob25lQ291bnRyeUNvZGUoXHJcbiAgdGVsZXBob25lOiBzdHJpbmcgfCB1bmRlZmluZWRcclxuKTogUHJvbWlzZTxQaG9uZUV4dHJhY3RlZCB8IHVuZGVmaW5lZD47XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXh0cmFjdFRlbGVwaG9uZUNvdW50cnlDb2RlKFxyXG4gIHRlbGVwaG9uZTogc3RyaW5nIHwgdW5kZWZpbmVkXHJcbik6IFByb21pc2U8UGhvbmVFeHRyYWN0ZWQgfCB1bmRlZmluZWQ+IHtcclxuICBpZiAoIXRlbGVwaG9uZSkgcmV0dXJuO1xyXG5cclxuICBpZiAodGVsZXBob25lLnN0YXJ0c1dpdGgoJysnKSkge1xyXG4gICAgY29uc3QgY291bnRyeSA9IGF3YWl0IGdldENvdW50cnlGcm9tVGVsZXBob25lKHRlbGVwaG9uZSk7XHJcblxyXG4gICAgaWYgKGNvdW50cnkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjb3VudHJ5LFxyXG4gICAgICAgIHRlbGVwaG9uZTogdGVsZXBob25lLnNsaWNlKGNvdW50cnkucGhvbmUubGVuZ3RoKSxcclxuICAgICAgICBmdWxsOiB0ZWxlcGhvbmUsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY291bnRyeTogaXRDb3VudHJ5LFxyXG4gICAgdGVsZXBob25lOiB0ZWxlcGhvbmUsXHJcbiAgICBmdWxsOiBpdENvdW50cnkucGhvbmUgKyB0ZWxlcGhvbmUsXHJcbiAgfTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21UZWxlcGhvbmUodGVsZXBob25lOiBzdHJpbmcpIHtcclxuICBjb25zdCBjYWNoZWRDb3VudHJpZXMgPSBbaXRDb3VudHJ5XTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIGNhY2hlZENvdW50cmllcy5maW5kKCh7IHBob25lIH0pID0+IHRlbGVwaG9uZS5zdGFydHNXaXRoKHBob25lKSkgfHxcclxuICAgIChhd2FpdCBmZXRjaFRlbGVwaG9uZUNvdW50cnlDb2RlcygpKS5maW5kKCh7IHBob25lIH0pID0+XHJcbiAgICAgIHRlbGVwaG9uZS5zdGFydHNXaXRoKHBob25lKVxyXG4gICAgKVxyXG4gICk7XHJcbn1cclxuXHJcbmNvbnN0IGl0Q291bnRyeTogQ291bnRyeVR5cGUgPSB7IGNvZGU6ICdJVCcsIGxhYmVsOiAnSXRhbGlhJywgcGhvbmU6ICcrMzknIH07XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hUZWxlcGhvbmVDb3VudHJ5Q29kZXMoKSB7XHJcbiAgY29uc3QgeyBjb3VudHJpZXMgfSA9IGF3YWl0IGltcG9ydCgnLi9kYXRhJyk7XHJcbiAgcmV0dXJuIGNvdW50cmllcztcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL3V0aWwvc3JjL2xpYi90ZWwtY291bnRyeS1jb2Rlcy9zcGxpdC10ZWxlcGhvbmUudHMifQ==