globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
import { getPrivateAreaCommonQuerystring } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
import { accountSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { isExistingGasSupply, isExistingPowerSupply } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply.ts";
import { offerIdAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
async function prodottiVendibili(params) {
  if (areCheckBypassed()) {
    return true;
  }
  const logHash = generateOperationID();
  const qs = getPrivateAreaCommonQuerystring(logHash);
  const body = JSON.stringify({
    commodity: params.commodity,
    codiceCanale: params.codiceCanale,
    assetIdPower: params.assetIdPower,
    assetIdGas: params.assetIdGas,
    segmento: params.segmento === Segment.SMALL ? "Microbusiness" : "RESIDENZIALE",
    logHash
  });
  const response = await fetch(`${API}/cambio-prodotto-services/${params.codiceConto}/prodottiVendibili?${qs}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  if (data.esito !== "OK") {
    throw new ServiceUnhandledResponseError(data.esito, logHash, data);
  }
  return data.prodotti.some((prodotto) => prodotto === params.prodotto);
}
export const checkChangeOffer = atomWithErrorReset(async (get) => {
  const account = await get(accountSelectedAtom);
  if (!account) {
    return;
  }
  const power = await get(account.powerSupply);
  const assetIdPower = power && isExistingPowerSupply(power) ? power?.assetSiebel : void 0;
  const gas = await get(account.gasSupply);
  const assetIdGas = gas && isExistingGasSupply(gas) ? gas?.assetSiebel : void 0;
  const prodotto = get(offerIdAtom).code;
  const customer = await get(account.customer$);
  return await prodottiVendibili({
    assetIdPower,
    assetIdGas,
    codiceConto: account.code,
    commodity: account.commodity.toString(),
    prodotto,
    segmento: await get(customer.segment),
    codiceCanale: get(offerIdAtom).channel
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFDQUFxQztBQUM5QyxTQUFTQyxLQUFLQywyQkFBMkI7QUFDekMsU0FBU0Msd0JBQXdCO0FBQ2pDLFNBQVNDLHVDQUF1QztBQUNoRCxTQUFTQywyQkFBMkI7QUFDcEMsU0FBU0MsMEJBQTBCO0FBQ25DLFNBQVNDLHFCQUFxQkMsNkJBQTZCO0FBQzNELFNBQVNDLG1CQUFtQjtBQUU1QixTQUFTQyxlQUFlO0FBRXhCLGVBQWVDLGtCQUFrQkMsUUFhOUI7QUFDRCxNQUFJVCxpQkFBaUIsR0FBRztBQUN0QixXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU1VLFVBQVVYLG9CQUFvQjtBQUNwQyxRQUFNWSxLQUFLVixnQ0FBZ0NTLE9BQU87QUFDbEQsUUFBTUUsT0FBT0MsS0FBS0MsVUFBVTtBQUFBLElBQzFCQyxXQUFXTixPQUFPTTtBQUFBQSxJQUNsQkMsY0FBY1AsT0FBT087QUFBQUEsSUFDckJDLGNBQWNSLE9BQU9RO0FBQUFBLElBQ3JCQyxZQUFZVCxPQUFPUztBQUFBQSxJQUNuQkMsVUFDRVYsT0FBT1UsYUFBYVosUUFBUWEsUUFBUSxrQkFBa0I7QUFBQSxJQUN4RFY7QUFBQUEsRUFDRixDQUFDO0FBRUQsUUFBTVcsV0FBVyxNQUFNQyxNQUNyQixHQUFHeEIsR0FBRyw2QkFBNkJXLE9BQU9jLFdBQVcsc0JBQXNCWixFQUFFLElBQzdFO0FBQUEsSUFDRWEsUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQLGdCQUFnQjtBQUFBLE1BQ2hCQyxRQUFRO0FBQUEsSUFDVjtBQUFBLElBQ0FkO0FBQUFBLEVBQ0YsQ0FDRjtBQUVBLE1BQUlTLFNBQVNNLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUk5Qiw4QkFDUndCLFNBQVNPLFlBQ1RsQixTQUNBVyxRQUNGO0FBQUEsRUFDRjtBQUVBLFFBQU1RLE9BQVEsTUFBTVIsU0FBU1MsS0FBSztBQVFsQyxNQUFJRCxLQUFLRSxVQUFVLE1BQU07QUFDdkIsVUFBTSxJQUFJbEMsOEJBQThCZ0MsS0FBS0UsT0FBT3JCLFNBQVNtQixJQUFJO0FBQUEsRUFDbkU7QUFFQSxTQUFPQSxLQUFLRyxTQUFTQyxLQUFNQyxjQUFhQSxhQUFhekIsT0FBT3lCLFFBQVE7QUFDdEU7QUFFTyxhQUFNQyxtQkFBbUJoQyxtQkFBbUIsT0FBT2lDLFFBQVE7QUFDaEUsUUFBTUMsVUFBVSxNQUFNRCxJQUFJbEMsbUJBQW1CO0FBQzdDLE1BQUksQ0FBQ21DLFNBQVM7QUFDWjtBQUFBLEVBQ0Y7QUFFQSxRQUFNQyxRQUFRLE1BQU1GLElBQUlDLFFBQVFFLFdBQVc7QUFDM0MsUUFBTXRCLGVBQ0pxQixTQUFTakMsc0JBQXNCaUMsS0FBSyxJQUFJQSxPQUFPRSxjQUFjQztBQUMvRCxRQUFNQyxNQUFNLE1BQU1OLElBQUlDLFFBQVFNLFNBQVM7QUFDdkMsUUFBTXpCLGFBQ0p3QixPQUFPdEMsb0JBQW9Cc0MsR0FBRyxJQUFJQSxLQUFLRixjQUFjQztBQUV2RCxRQUFNUCxXQUFXRSxJQUFJOUIsV0FBVyxFQUFFc0M7QUFDbEMsUUFBTUMsV0FBVyxNQUFNVCxJQUFJQyxRQUFRUyxTQUFTO0FBRTVDLFNBQU8sTUFBTXRDLGtCQUFrQjtBQUFBLElBQzdCUztBQUFBQSxJQUNBQztBQUFBQSxJQUNBSyxhQUFhYyxRQUFRTztBQUFBQSxJQUNyQjdCLFdBQVdzQixRQUFRdEIsVUFBVWdDLFNBQVM7QUFBQSxJQUN0Q2I7QUFBQUEsSUFDQWYsVUFBVSxNQUFNaUIsSUFBSVMsU0FBU0csT0FBTztBQUFBLElBQ3BDaEMsY0FBY29CLElBQUk5QixXQUFXLEVBQUUyQztBQUFBQSxFQUNqQyxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbIlNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIiwiQVBJIiwiZ2VuZXJhdGVPcGVyYXRpb25JRCIsImFyZUNoZWNrQnlwYXNzZWQiLCJnZXRQcml2YXRlQXJlYUNvbW1vblF1ZXJ5c3RyaW5nIiwiYWNjb3VudFNlbGVjdGVkQXRvbSIsImF0b21XaXRoRXJyb3JSZXNldCIsImlzRXhpc3RpbmdHYXNTdXBwbHkiLCJpc0V4aXN0aW5nUG93ZXJTdXBwbHkiLCJvZmZlcklkQXRvbSIsIlNlZ21lbnQiLCJwcm9kb3R0aVZlbmRpYmlsaSIsInBhcmFtcyIsImxvZ0hhc2giLCJxcyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tbW9kaXR5IiwiY29kaWNlQ2FuYWxlIiwiYXNzZXRJZFBvd2VyIiwiYXNzZXRJZEdhcyIsInNlZ21lbnRvIiwiU01BTEwiLCJyZXNwb25zZSIsImZldGNoIiwiY29kaWNlQ29udG8iLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiZXNpdG8iLCJwcm9kb3R0aSIsInNvbWUiLCJwcm9kb3R0byIsImNoZWNrQ2hhbmdlT2ZmZXIiLCJnZXQiLCJhY2NvdW50IiwicG93ZXIiLCJwb3dlclN1cHBseSIsImFzc2V0U2llYmVsIiwidW5kZWZpbmVkIiwiZ2FzIiwiZ2FzU3VwcGx5IiwiY29kZSIsImN1c3RvbWVyIiwiY3VzdG9tZXIkIiwidG9TdHJpbmciLCJzZWdtZW50IiwiY2hhbm5lbCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJwcm9kb3R0aVZlbmRpYmlsaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvciB9IGZyb20gJ0BuYWotd28vdXRpbCc7XHJcbmltcG9ydCB7IEFQSSwgZ2VuZXJhdGVPcGVyYXRpb25JRCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgYXJlQ2hlY2tCeXBhc3NlZCB9IGZyb20gJy4uLy4uL3V0aWxzL2ZsYWdzJztcclxuaW1wb3J0IHsgZ2V0UHJpdmF0ZUFyZWFDb21tb25RdWVyeXN0cmluZyB9IGZyb20gJy4uL3ByaXZhdGUtYXJlYS91dGlscyc7XHJcbmltcG9ydCB7IGFjY291bnRTZWxlY3RlZEF0b20gfSBmcm9tICcuLi8uLi9hdG9tcy9hY2NvdW50LXNlbGVjdGVkLWF0b21zJztcclxuaW1wb3J0IHsgYXRvbVdpdGhFcnJvclJlc2V0IH0gZnJvbSAnLi4vLi4vdXRpbHMvYXRvbVdpdGhSZXRyeWFibGVRdWVyeSc7XHJcbmltcG9ydCB7IGlzRXhpc3RpbmdHYXNTdXBwbHksIGlzRXhpc3RpbmdQb3dlclN1cHBseSB9IGZyb20gJy4uLy4uL2F0b21zL3N1cHBseSc7XHJcbmltcG9ydCB7IG9mZmVySWRBdG9tIH0gZnJvbSAnLi4vLi4vdHJvdWJsZXNob290aW5nL2F0b21zJztcclxuXHJcbmltcG9ydCB7IFNlZ21lbnQgfSBmcm9tICcuLi8uLi9hdG9tcy9lbnVtcyc7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBwcm9kb3R0aVZlbmRpYmlsaShwYXJhbXM6IHtcclxuICBjb2RpY2VDb250bz86IHN0cmluZztcclxuICBzZWdtZW50bz86IFNlZ21lbnQ7XHJcbiAgLyoqXHJcbiAgICogc2UgcXVlc3RvIGNhbXBvIMOoIHZhbG9yaXp6YXRvLCBs4oCZZWxlbmNvIGRlaSBwcm9kb3R0aSB2aWVuZSBmaWx0cmF0byBhbmNoZSByaXNwZXR0byBhbCBjYW5hbGUgaW4gaW5wdXRcclxuICAgKiAoY2hlIMOoIGBcIkNXRUIzRUdQXCJgLCBvc3NpYSBpbCBjYW5hbGUgcHViYmxpY28sIHNlIG5vbiBzcGVjaWZpY2F0byksIGluIG1vZG8gZGEgZXNjbHVkZXJlIGkgcHJvZG90dGkgbm9uIGFiaWxpdGF0aVxyXG4gICAqIHN1IHF1ZWwgY2FuYWxlLlxyXG4gICAqL1xyXG4gIGNvZGljZUNhbmFsZT86IHN0cmluZztcclxuICBjb21tb2RpdHk/OiBhbnk7XHJcbiAgYXNzZXRJZFBvd2VyPzogc3RyaW5nO1xyXG4gIGFzc2V0SWRHYXM/OiBzdHJpbmc7XHJcbiAgcHJvZG90dG86IHN0cmluZztcclxufSkge1xyXG4gIGlmIChhcmVDaGVja0J5cGFzc2VkKCkpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbG9nSGFzaCA9IGdlbmVyYXRlT3BlcmF0aW9uSUQoKTtcclxuICBjb25zdCBxcyA9IGdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcobG9nSGFzaCk7XHJcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIGNvbW1vZGl0eTogcGFyYW1zLmNvbW1vZGl0eSxcclxuICAgIGNvZGljZUNhbmFsZTogcGFyYW1zLmNvZGljZUNhbmFsZSxcclxuICAgIGFzc2V0SWRQb3dlcjogcGFyYW1zLmFzc2V0SWRQb3dlcixcclxuICAgIGFzc2V0SWRHYXM6IHBhcmFtcy5hc3NldElkR2FzLFxyXG4gICAgc2VnbWVudG86XHJcbiAgICAgIHBhcmFtcy5zZWdtZW50byA9PT0gU2VnbWVudC5TTUFMTCA/ICdNaWNyb2J1c2luZXNzJyA6ICdSRVNJREVOWklBTEUnLFxyXG4gICAgbG9nSGFzaDogbG9nSGFzaCxcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke0FQSX0vY2FtYmlvLXByb2RvdHRvLXNlcnZpY2VzLyR7cGFyYW1zLmNvZGljZUNvbnRvfS9wcm9kb3R0aVZlbmRpYmlsaT8ke3FzfWAsXHJcbiAgICB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogYm9keSxcclxuICAgIH1cclxuICApO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihcclxuICAgICAgcmVzcG9uc2Uuc3RhdHVzVGV4dCxcclxuICAgICAgbG9nSGFzaCxcclxuICAgICAgcmVzcG9uc2VcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBkYXRhID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMge1xyXG4gICAgZXNpdG86ICdPSyc7XHJcbiAgICBlcnJvckNvZGU6IG51bGw7XHJcbiAgICBkZXNjcml6aW9uZTogbnVsbDtcclxuICAgIC8qKiBAZXhhbXBsZSBbXCJCQVNFX0xGSVhBVFNWLUdGSVhBVFNWXCJdICovXHJcbiAgICBwcm9kb3R0aTogc3RyaW5nW107XHJcbiAgfTtcclxuXHJcbiAgaWYgKGRhdGEuZXNpdG8gIT09ICdPSycpIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihkYXRhLmVzaXRvLCBsb2dIYXNoLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhLnByb2RvdHRpLnNvbWUoKHByb2RvdHRvKSA9PiBwcm9kb3R0byA9PT0gcGFyYW1zLnByb2RvdHRvKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrQ2hhbmdlT2ZmZXIgPSBhdG9tV2l0aEVycm9yUmVzZXQoYXN5bmMgKGdldCkgPT4ge1xyXG4gIGNvbnN0IGFjY291bnQgPSBhd2FpdCBnZXQoYWNjb3VudFNlbGVjdGVkQXRvbSk7XHJcbiAgaWYgKCFhY2NvdW50KSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBwb3dlciA9IGF3YWl0IGdldChhY2NvdW50LnBvd2VyU3VwcGx5KTtcclxuICBjb25zdCBhc3NldElkUG93ZXIgPVxyXG4gICAgcG93ZXIgJiYgaXNFeGlzdGluZ1Bvd2VyU3VwcGx5KHBvd2VyKSA/IHBvd2VyPy5hc3NldFNpZWJlbCA6IHVuZGVmaW5lZDtcclxuICBjb25zdCBnYXMgPSBhd2FpdCBnZXQoYWNjb3VudC5nYXNTdXBwbHkpO1xyXG4gIGNvbnN0IGFzc2V0SWRHYXMgPVxyXG4gICAgZ2FzICYmIGlzRXhpc3RpbmdHYXNTdXBwbHkoZ2FzKSA/IGdhcz8uYXNzZXRTaWViZWwgOiB1bmRlZmluZWQ7XHJcblxyXG4gIGNvbnN0IHByb2RvdHRvID0gZ2V0KG9mZmVySWRBdG9tKS5jb2RlO1xyXG4gIGNvbnN0IGN1c3RvbWVyID0gYXdhaXQgZ2V0KGFjY291bnQuY3VzdG9tZXIkKTtcclxuXHJcbiAgcmV0dXJuIGF3YWl0IHByb2RvdHRpVmVuZGliaWxpKHtcclxuICAgIGFzc2V0SWRQb3dlcjogYXNzZXRJZFBvd2VyLFxyXG4gICAgYXNzZXRJZEdhczogYXNzZXRJZEdhcyxcclxuICAgIGNvZGljZUNvbnRvOiBhY2NvdW50LmNvZGUsXHJcbiAgICBjb21tb2RpdHk6IGFjY291bnQuY29tbW9kaXR5LnRvU3RyaW5nKCksXHJcbiAgICBwcm9kb3R0bzogcHJvZG90dG8sXHJcbiAgICBzZWdtZW50bzogYXdhaXQgZ2V0KGN1c3RvbWVyLnNlZ21lbnQpLFxyXG4gICAgY29kaWNlQ2FuYWxlOiBnZXQob2ZmZXJJZEF0b20pLmNoYW5uZWwsXHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL2NhbWJpby1wcm9kb3R0by9wcm9kb3R0aVZlbmRpYmlsaS50cyJ9