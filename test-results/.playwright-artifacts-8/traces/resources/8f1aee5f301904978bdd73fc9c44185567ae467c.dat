globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { toLocalizedYesNo } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { gasAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { customerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { isOfferForVulnerableUsers } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/offer-atoms.ts";
import { atomWithNested, atomWithNestedReadable } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/utils/atom-with-nested.ts";
import { vulnerabilitySelfCertificationFlags$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/vulnerability/vulnerability.ts";
export const profile$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/profile$", atom(async (get) => {
  const customer = await get(customerAtom);
  return customer.profile;
}));
profile$.debugLabel = "profile$";
export const givenNameAtom = atomWithNested(profile$, "givenName$");
export const familyNameAtom = atomWithNested(profile$, "familyName$");
export const telephoneAtom = atomWithNested(profile$, "telephone$");
export const emailAtom = atomWithNested(profile$, "email$");
export const emailCryptAtom = atomWithNested(profile$, "emailCrypt$");
export const taxIdAtom = atomWithNested(profile$, "taxId$");
export const legalFormAtom = atomWithNested(profile$, "legalForm$");
export const businessNameAtom = atomWithNested(profile$, "businessName$");
export const legalRepresentativeAtom = atomWithNested(profile$, "legalRepresentative$");
export const vatNumberAtom = atomWithNested(profile$, "vatNumber$");
export const taxIdOrVatNumberAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/taxIdOrVatNumberAtom", atom(async (get) => {
  return await get(vatNumberAtom) || await get(taxIdAtom);
}));
taxIdOrVatNumberAtom.debugLabel = "taxIdOrVatNumberAtom";
export const privacyAtom = atomWithNested(profile$, "privacy$");
export const customerVulnerableAtom = atomWithNested(profile$, "vulnerable$");
export const addressAtom = atomWithNested(profile$, "address$");
export const addressAsStringAtom = atomWithNestedReadable(profile$, "addressAsString$");
export const residentialAddressSameAsSupplyAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/residentialAddressSameAsSupplyAtom", atom(async (get) => {
  const addressSupply = await get(supplyAddressSelectedAtom);
  const addressResidential = await get(addressAtom);
  return addressResidential?.egonCodeNumber === addressSupply?.egonCodeNumber;
}));
residentialAddressSameAsSupplyAtom.debugLabel = "residentialAddressSameAsSupplyAtom";
export const residentialAddressSameAsSupplyYesNoAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/residentialAddressSameAsSupplyYesNoAtom", atom(async (get) => {
  return toLocalizedYesNo(await get(residentialAddressSameAsSupplyAtom));
}));
residentialAddressSameAsSupplyYesNoAtom.debugLabel = "residentialAddressSameAsSupplyYesNoAtom";
export const fullNameAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/fullNameAtom", atom(async (get) => {
  const givenName = await get(givenNameAtom);
  const familyName = await get(familyNameAtom);
  return [givenName, familyName].filter(Boolean).join(" ");
}));
fullNameAtom.debugLabel = "fullNameAtom";
export const consentPhoneContactAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/consentPhoneContactAtom", atom());
consentPhoneContactAtom.debugLabel = "consentPhoneContactAtom";
export var VulnerableCheck = /* @__PURE__ */ ((VulnerableCheck2) => {
  VulnerableCheck2[VulnerableCheck2["UNKNOWN"] = 0] = "UNKNOWN";
  VulnerableCheck2[VulnerableCheck2["OK"] = 1] = "OK";
  VulnerableCheck2[VulnerableCheck2["WARN_USER_IS_VULNERABLE"] = 2] = "WARN_USER_IS_VULNERABLE";
  VulnerableCheck2[VulnerableCheck2["KO_USER_NOT_VULNERABLE"] = 3] = "KO_USER_NOT_VULNERABLE";
  VulnerableCheck2[VulnerableCheck2["OK_SELF_CERTIFICATION"] = 4] = "OK_SELF_CERTIFICATION";
  return VulnerableCheck2;
})(VulnerableCheck || {});
export const vulnerableCheck = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/vulnerableCheck", atom(async (get) => {
  const offerVulnerable = get(isOfferForVulnerableUsers);
  const customerVulnerable = await get(customerVulnerableAtom);
  if (offerVulnerable) {
    if (!customerVulnerable) {
      return get(vulnerabilitySelfCertificationFlags$) ? 4 /* OK_SELF_CERTIFICATION */ : 3 /* KO_USER_NOT_VULNERABLE */;
    }
  } else if (customerVulnerable) {
    const hasGas = get(gasAtom);
    return hasGas ? 2 /* WARN_USER_IS_VULNERABLE */ : 1 /* OK */;
  }
  return 1 /* OK */;
}));
vulnerableCheck.debugLabel = "vulnerableCheck";
export const customerIdentityAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/customerIdentityAtom", atom());
customerIdentityAtom.debugLabel = "customerIdentityAtom";
export const ownershipTypeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\profile-atoms.ts/ownershipTypeAtom", atom());
ownershipTypeAtom.debugLabel = "ownershipTypeAtom";

//# sourceMappingURL=data:application/json;base64,