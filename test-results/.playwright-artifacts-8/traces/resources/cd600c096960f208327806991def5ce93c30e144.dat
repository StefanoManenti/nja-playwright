globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atomAction } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/lib/atoms-utils/index.ts";
export class CustomError extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, new.target.prototype);
  }
}
const ERROR_CLEAR_SYMBOL = Symbol("clear");
export function addClearMethodToError(error, atom) {
  if (error instanceof CustomError && !(error instanceof NotRecoverableError)) {
    error[ERROR_CLEAR_SYMBOL] = atomAction((_, set) => {
      set(atom, (x) => x + 1);
    });
  } else {
    console.warn("Error is not instance of CustomError");
  }
}
export function isErrorClearable(error) {
  return !!(error instanceof CustomError && error[ERROR_CLEAR_SYMBOL]);
}
export function clearError(error, store) {
  store.set(error[ERROR_CLEAR_SYMBOL]);
}
export const tryToClearError = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\util\\src\\lib\\errors.ts/tryToClearError", atomAction((_, set, error) => {
  if (isErrorClearable(error)) {
    set(error[ERROR_CLEAR_SYMBOL]);
  }
}));
tryToClearError.debugLabel = "tryToClearError";
export class NotRecoverableError extends CustomError {
}
export class NotLoggedError extends NotRecoverableError {
  constructor() {
    super("NOT LOGGED");
  }
}
export class NotImplementedError extends CustomError {
  constructor(reason) {
    super(`Not implemented.${reason ? ` ${reason}` : ""}`);
  }
}
export class BadInputError extends CustomError {
}
export class PreconditionFailedError extends CustomError {
}
export class ServiceError extends CustomError {
  constructor(message, logHash, response) {
    super(message);
    this.logHash = logHash;
    this.response = response;
  }
}
export class ServiceBadInputError extends ServiceError {
}
export class ServiceUnhandledResponseError extends ServiceError {
}
export class ServiceExternalBadOutputError extends ServiceError {
}
export class ServiceValidationKoError extends ServiceError {
}
export class MaxOperationError extends NotRecoverableError {
  constructor() {
    super("MAXIMUM NUMBER OF CONTRACTS REACHED");
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLFNBQVNBLGtCQUFrQjtBQUVwQixhQUFNQyxvQkFBb0JDLE1BQU07QUFBQSxFQUNyQ0MsWUFBWUMsU0FBaUI7QUFDM0IsVUFBTUEsT0FBTztBQUNiQyxXQUFPQyxlQUFlLE1BQU1DLFdBQVdDLFNBQVM7QUFBQSxFQUNsRDtBQUNGO0FBRUEsTUFBTUMscUJBQXFCQyxPQUFPLE9BQU87QUFFbEMsZ0JBQVNDLHNCQUNkQyxPQUNBQyxNQUNBO0FBQ0EsTUFBSUQsaUJBQWlCWCxlQUFlLEVBQUVXLGlCQUFpQkUsc0JBQXNCO0FBRTNFRixVQUFNSCxrQkFBa0IsSUFBSVQsV0FBVyxDQUFDZSxHQUFHQyxRQUFRO0FBQ2pEQSxVQUFJSCxNQUFPSSxPQUFNQSxJQUFJLENBQUM7QUFBQSxJQUN4QixDQUFDO0FBQUEsRUFDSCxPQUFPO0FBQ0xDLFlBQVFDLEtBQUssc0NBQXNDO0FBQUEsRUFDckQ7QUFDRjtBQUVPLGdCQUFTQyxpQkFBaUJSLE9BQTBDO0FBRXpFLFNBQU8sQ0FBQyxFQUFFQSxpQkFBaUJYLGVBQWVXLE1BQU1ILGtCQUFrQjtBQUNwRTtBQUVPLGdCQUFTWSxXQUNkVCxPQUNBVSxPQUNBO0FBQ0FBLFFBQU1OLElBQUlKLE1BQU1ILGtCQUFrQixDQUFDO0FBQ3JDO0FBRUEsYUFBQWMsa0JBQUFDLFdBQUFDLGVBQUFDLElBQUEsa0dBQStCMUIsV0FBVyxDQUFDZSxHQUFHQyxLQUFLSixVQUFtQjtBQUNwRSxNQUFJUSxpQkFBaUJSLEtBQUssR0FBRztBQUMzQkksUUFBSUosTUFBTUgsa0JBQWtCLENBQUM7QUFBQSxFQUMvQjtBQUNGLENBQUMsQ0FBQztBQUFDYyxnQkFBQUksYUFBQTtBQU1JLGFBQU1iLDRCQUE0QmIsWUFBWTtBQUFBO0FBRTlDLGFBQU0yQix1QkFBdUJkLG9CQUFvQjtBQUFBLEVBQ3REWCxjQUFjO0FBQ1osVUFBTSxZQUFZO0FBQUEsRUFDcEI7QUFDRjtBQUVPLGFBQU0wQiw0QkFBNEI1QixZQUFZO0FBQUEsRUFDbkRFLFlBQVkyQixRQUFpQjtBQUMzQixVQUFNLG1CQUFtQkEsU0FBUyxJQUFJQSxNQUFNLEtBQUssRUFBRSxFQUFFO0FBQUEsRUFDdkQ7QUFDRjtBQUtPLGFBQU1DLHNCQUFzQjlCLFlBQVk7QUFBQTtBQUt4QyxhQUFNK0IsZ0NBQWdDL0IsWUFBWTtBQUFBO0FBRWxELGFBQU1nQyxxQkFBcUJoQyxZQUFZO0FBQUEsRUFDNUNFLFlBQ0VDLFNBQ2dCOEIsU0FDQUMsVUFDaEI7QUFDQSxVQUFNL0IsT0FBTztBQUhHOEI7QUFDQUM7QUFBQUEsRUFHbEI7QUFDRjtBQUtPLGFBQU1DLDZCQUE2QkgsYUFBYTtBQUFBO0FBS2hELGFBQU1JLHNDQUFzQ0osYUFBYTtBQUFBO0FBS3pELGFBQU1LLHNDQUFzQ0wsYUFBYTtBQUFBO0FBS3pELGFBQU1NLGlDQUFpQ04sYUFBYTtBQUFBO0FBRXBELGFBQU1PLDBCQUEwQjFCLG9CQUFvQjtBQUFBLEVBQ3pEWCxjQUFjO0FBQ1osVUFBTSxxQ0FBcUM7QUFBQSxFQUM3QztBQUNGIiwibmFtZXMiOlsiYXRvbUFjdGlvbiIsIkN1c3RvbUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIm5ldyIsInByb3RvdHlwZSIsIkVSUk9SX0NMRUFSX1NZTUJPTCIsIlN5bWJvbCIsImFkZENsZWFyTWV0aG9kVG9FcnJvciIsImVycm9yIiwiYXRvbSIsIk5vdFJlY292ZXJhYmxlRXJyb3IiLCJfIiwic2V0IiwieCIsImNvbnNvbGUiLCJ3YXJuIiwiaXNFcnJvckNsZWFyYWJsZSIsImNsZWFyRXJyb3IiLCJzdG9yZSIsInRyeVRvQ2xlYXJFcnJvciIsImdsb2JhbFRoaXMiLCJqb3RhaUF0b21DYWNoZSIsImdldCIsImRlYnVnTGFiZWwiLCJOb3RMb2dnZWRFcnJvciIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJyZWFzb24iLCJCYWRJbnB1dEVycm9yIiwiUHJlY29uZGl0aW9uRmFpbGVkRXJyb3IiLCJTZXJ2aWNlRXJyb3IiLCJsb2dIYXNoIiwicmVzcG9uc2UiLCJTZXJ2aWNlQmFkSW5wdXRFcnJvciIsIlNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIiwiU2VydmljZUV4dGVybmFsQmFkT3V0cHV0RXJyb3IiLCJTZXJ2aWNlVmFsaWRhdGlvbktvRXJyb3IiLCJNYXhPcGVyYXRpb25FcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJlcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIFByaW1pdGl2ZUF0b20sIFdyaXRhYmxlQXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgYXRvbUFjdGlvbiB9IGZyb20gJy4vYXRvbXMtdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1c3RvbUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpOyAvLyByZXN0b3JlIHByb3RvdHlwZSBjaGFpblxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgRVJST1JfQ0xFQVJfU1lNQk9MID0gU3ltYm9sKCdjbGVhcicpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENsZWFyTWV0aG9kVG9FcnJvcihcclxuICBlcnJvcjogdW5rbm93bixcclxuICBhdG9tOiBQcmltaXRpdmVBdG9tPG51bWJlcj5cclxuKSB7XHJcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ3VzdG9tRXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIE5vdFJlY292ZXJhYmxlRXJyb3IpKSB7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGhvdyBjYW4gd2Ugd3JpdGUgdGhpcyBpbiB0eXBlc2NyaXB0P1xyXG4gICAgZXJyb3JbRVJST1JfQ0xFQVJfU1lNQk9MXSA9IGF0b21BY3Rpb24oKF8sIHNldCkgPT4ge1xyXG4gICAgICBzZXQoYXRvbSwgKHgpID0+IHggKyAxKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGlzIG5vdCBpbnN0YW5jZSBvZiBDdXN0b21FcnJvcicpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3JDbGVhcmFibGUoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBJUmV0cnlhYmxlRXJyb3Ige1xyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaG93IGNhbiB3ZSB3cml0ZSB0aGlzIGluIHR5cGVzY3JpcHQ/XHJcbiAgcmV0dXJuICEhKGVycm9yIGluc3RhbmNlb2YgQ3VzdG9tRXJyb3IgJiYgZXJyb3JbRVJST1JfQ0xFQVJfU1lNQk9MXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckVycm9yKFxyXG4gIGVycm9yOiBJUmV0cnlhYmxlRXJyb3IsXHJcbiAgc3RvcmU6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVN0b3JlPlxyXG4pIHtcclxuICBzdG9yZS5zZXQoZXJyb3JbRVJST1JfQ0xFQVJfU1lNQk9MXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0cnlUb0NsZWFyRXJyb3IgPSBhdG9tQWN0aW9uKChfLCBzZXQsIGVycm9yOiB1bmtub3duKSA9PiB7XHJcbiAgaWYgKGlzRXJyb3JDbGVhcmFibGUoZXJyb3IpKSB7XHJcbiAgICBzZXQoZXJyb3JbRVJST1JfQ0xFQVJfU1lNQk9MXSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJldHJ5YWJsZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIFtFUlJPUl9DTEVBUl9TWU1CT0xdOiBXcml0YWJsZUF0b208bnVsbCwgW10sIHZvaWQ+O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm90UmVjb3ZlcmFibGVFcnJvciBleHRlbmRzIEN1c3RvbUVycm9yIHt9XHJcblxyXG5leHBvcnQgY2xhc3MgTm90TG9nZ2VkRXJyb3IgZXh0ZW5kcyBOb3RSZWNvdmVyYWJsZUVycm9yIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdOT1QgTE9HR0VEJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEN1c3RvbUVycm9yIHtcclxuICBjb25zdHJ1Y3RvcihyZWFzb24/OiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKGBOb3QgaW1wbGVtZW50ZWQuJHtyZWFzb24gPyBgICR7cmVhc29ufWAgOiAnJ31gKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY2FsbGVyIGhhcyBwYXNzZWQgYmFkIGlucHV0IGFzIHBhcmFtZXRlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCYWRJbnB1dEVycm9yIGV4dGVuZHMgQ3VzdG9tRXJyb3Ige31cclxuXHJcbi8qKlxyXG4gKiBUaGUgZnVuY3Rpb24gaGFzIGZvdW5kIHNvbWUgc3RhdGUgdGhhdCBpcyB1bmV4cGVjdGVkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUHJlY29uZGl0aW9uRmFpbGVkRXJyb3IgZXh0ZW5kcyBDdXN0b21FcnJvciB7fVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZpY2VFcnJvciBleHRlbmRzIEN1c3RvbUVycm9yIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIG1lc3NhZ2U6IHN0cmluZyxcclxuICAgIHB1YmxpYyByZWFkb25seSBsb2dIYXNoOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVzcG9uc2U/OiBhbnlcclxuICApIHtcclxuICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBjYWxsZXIgaGFzIHNlbnQgYW4gaW5wdXQgdGhhdCBpcyBtYWxmb3JtZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VydmljZUJhZElucHV0RXJyb3IgZXh0ZW5kcyBTZXJ2aWNlRXJyb3Ige31cclxuXHJcbi8qKlxyXG4gKiBXZSByZWNlaXZlZCBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZpY2UgdGhhdCB3ZSBhcmUgdW5hYmxlIHRvIGhhbmRsZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvciBleHRlbmRzIFNlcnZpY2VFcnJvciB7fVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzZXJ2aWNlIHJlY2VpdmVkIGFuIGludmFsaWQgcmVzcG9uc2UgZnJvbSB0aGUgZXh0ZXJuYWwgc2VydmljZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlRXh0ZXJuYWxCYWRPdXRwdXRFcnJvciBleHRlbmRzIFNlcnZpY2VFcnJvciB7fVxyXG5cclxuLyoqXHJcbiAqIFRoZSBzZXJ2aWNlIGhhcyB2YWxpZGF0ZWQgdGhlIGRhdGEgYW5kIHRlbGxzIHVzIHRoYXQgd2UgY2Fubm90IGNvbnRpbnVlIHdpdGggdGhlIGN1cnJlbnQgZGF0YS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVmFsaWRhdGlvbktvRXJyb3IgZXh0ZW5kcyBTZXJ2aWNlRXJyb3Ige31cclxuXHJcbmV4cG9ydCBjbGFzcyBNYXhPcGVyYXRpb25FcnJvciBleHRlbmRzIE5vdFJlY292ZXJhYmxlRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ01BWElNVU0gTlVNQkVSIE9GIENPTlRSQUNUUyBSRUFDSEVEJyk7XHJcbiAgfVxyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvdXRpbC9zcmMvbGliL2Vycm9ycy50cyJ9