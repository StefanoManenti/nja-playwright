globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithPhone } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/phone-atoms.ts";
import { writableAtomFromService } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/writableAtomFromService.ts";
import { atomWithAddressAsString } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithAddressAsString.ts";
export function createExistingProfile(profile$) {
  function atomWithProfile(key) {
    return writableAtomFromService(profile$, (data) => data[key] ?? void 0);
  }
  const residentialAddress = atom();
  residentialAddress.debugLabel = "residentialAddress";
  const givenName$ = atomWithProfile("nome");
  const familyName$ = atomWithProfile("cognome");
  const telephone$ = atomWithProfile("cellulare");
  const email$ = atomWithProfile("email");
  const taxId$ = atomWithProfile("codiceFiscale");
  const legalForm$ = atomWithProfile("formaGiuridica");
  const vatNumber$ = atomWithProfile("piva");
  return {
    givenName$,
    familyName$,
    telephone$,
    telephoneWithCountryCode$: atomWithPhone({
      email$,
      familyName$,
      givenName$,
      telephone$
    }),
    email$,
    emailCrypt$: atom(),
    taxId$,
    legalForm$,
    businessName$: familyName$,
    vatNumber$,
    legalRepresentative$: atom(void 0),
    privacy$: writableAtomFromService(profile$, (data) => ({
      promoPlenitude: data.permessiENotifiche.iniziativeCommercaliEni,
      marketResearch: data.permessiENotifiche.analisiERicercheMercato,
      promoThirdParties: data.permessiENotifiche.futureIniziativeTerzeParti
    })),
    address$: residentialAddress,
    addressAsString$: atomWithAddressAsString(residentialAddress),
    vulnerable$: writableAtomFromService(profile$, (data) => data.vulnerability || false),
    hasActiveCommodities$: atom()
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQWVBLFlBQVk7QUFFM0IsU0FBU0MscUJBQXFCO0FBRTlCLFNBQVNDLCtCQUErQjtBQUN4QyxTQUFTQywrQkFBK0I7QUFFakMsZ0JBQVNDLHNCQUNkQyxVQUNTO0FBQ1QsV0FBU0MsZ0JBQ1BDLEtBQ0E7QUFDQSxXQUFPTCx3QkFBd0JHLFVBQVdHLFVBQVNBLEtBQUtELEdBQUcsS0FBS0UsTUFBUztBQUFBLEVBQzNFO0FBRUEsUUFBTUMscUJBQTBDVixLQUFLO0FBQUVVLHFCQUFBQyxhQUFBO0FBRXZELFFBQU1DLGFBQWFOLGdCQUFnQixNQUFNO0FBQ3pDLFFBQU1PLGNBQWNQLGdCQUFnQixTQUFTO0FBQzdDLFFBQU1RLGFBQWFSLGdCQUFnQixXQUFXO0FBQzlDLFFBQU1TLFNBQVNULGdCQUFnQixPQUFPO0FBQ3RDLFFBQU1VLFNBQVNWLGdCQUFnQixlQUFlO0FBQzlDLFFBQU1XLGFBQWFYLGdCQUFnQixnQkFBZ0I7QUFDbkQsUUFBTVksYUFBYVosZ0JBQWdCLE1BQU07QUFFekMsU0FBTztBQUFBLElBQ0xNO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0FLLDJCQUEyQmxCLGNBQWM7QUFBQSxNQUN2Q2M7QUFBQUEsTUFDQUY7QUFBQUEsTUFDQUQ7QUFBQUEsTUFDQUU7QUFBQUEsSUFDRixDQUFDO0FBQUEsSUFDREM7QUFBQUEsSUFDQUssYUFBYXBCLEtBQUs7QUFBQSxJQUNsQmdCO0FBQUFBLElBQ0FDO0FBQUFBLElBQ0FJLGVBQWVSO0FBQUFBLElBQ2ZLO0FBQUFBLElBQ0FJLHNCQUFzQnRCLEtBQTZCUyxNQUFTO0FBQUEsSUFDNURjLFVBQVVyQix3QkFBd0JHLFVBQVdHLFdBQVU7QUFBQSxNQUNyRGdCLGdCQUFnQmhCLEtBQUtpQixtQkFBbUJDO0FBQUFBLE1BQ3hDQyxnQkFBZ0JuQixLQUFLaUIsbUJBQW1CRztBQUFBQSxNQUN4Q0MsbUJBQW1CckIsS0FBS2lCLG1CQUFtQks7QUFBQUEsSUFDN0MsRUFBRTtBQUFBLElBRUZDLFVBQVVyQjtBQUFBQSxJQUNWc0Isa0JBQWtCN0Isd0JBQXdCTyxrQkFBa0I7QUFBQSxJQUU1RHVCLGFBQWEvQix3QkFDWEcsVUFDQ0csVUFBU0EsS0FBSzBCLGlCQUFpQixLQUNsQztBQUFBLElBRUFDLHVCQUF1Qm5DLEtBQUs7QUFBQSxFQUM5QjtBQUNGIiwibmFtZXMiOlsiYXRvbSIsImF0b21XaXRoUGhvbmUiLCJ3cml0YWJsZUF0b21Gcm9tU2VydmljZSIsImF0b21XaXRoQWRkcmVzc0FzU3RyaW5nIiwiY3JlYXRlRXhpc3RpbmdQcm9maWxlIiwicHJvZmlsZSQiLCJhdG9tV2l0aFByb2ZpbGUiLCJrZXkiLCJkYXRhIiwidW5kZWZpbmVkIiwicmVzaWRlbnRpYWxBZGRyZXNzIiwiZGVidWdMYWJlbCIsImdpdmVuTmFtZSQiLCJmYW1pbHlOYW1lJCIsInRlbGVwaG9uZSQiLCJlbWFpbCQiLCJ0YXhJZCQiLCJsZWdhbEZvcm0kIiwidmF0TnVtYmVyJCIsInRlbGVwaG9uZVdpdGhDb3VudHJ5Q29kZSQiLCJlbWFpbENyeXB0JCIsImJ1c2luZXNzTmFtZSQiLCJsZWdhbFJlcHJlc2VudGF0aXZlJCIsInByaXZhY3kkIiwicHJvbW9QbGVuaXR1ZGUiLCJwZXJtZXNzaUVOb3RpZmljaGUiLCJpbml6aWF0aXZlQ29tbWVyY2FsaUVuaSIsIm1hcmtldFJlc2VhcmNoIiwiYW5hbGlzaUVSaWNlcmNoZU1lcmNhdG8iLCJwcm9tb1RoaXJkUGFydGllcyIsImZ1dHVyZUluaXppYXRpdmVUZXJ6ZVBhcnRpIiwiYWRkcmVzcyQiLCJhZGRyZXNzQXNTdHJpbmckIiwidnVsbmVyYWJsZSQiLCJ2dWxuZXJhYmlsaXR5IiwiaGFzQWN0aXZlQ29tbW9kaXRpZXMkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInByb2ZpbGUtZXhpc3RpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXRvbSwgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgUmVjdXBlcm9EYXRpUHJvZmlsb1V0ZW50ZVJlc3BvbnNlIH0gZnJvbSAnLi4vYXBpL3ByaXZhdGUtYXJlYS9yZWN1cGVyby1kYXRpLXByb2ZpbG8tdXRlbnRlJztcclxuaW1wb3J0IHsgYXRvbVdpdGhQaG9uZSB9IGZyb20gJy4uL2F0b21zL2N1c3RvbWVyL3Bob25lLWF0b21zJztcclxuaW1wb3J0IHsgSW5kaXZpZHVhbCwgUHJvZmlsZSB9IGZyb20gJy4uL2F0b21zL3R5cGVzJztcclxuaW1wb3J0IHsgd3JpdGFibGVBdG9tRnJvbVNlcnZpY2UgfSBmcm9tICcuLi91dGlscy93cml0YWJsZUF0b21Gcm9tU2VydmljZSc7XHJcbmltcG9ydCB7IGF0b21XaXRoQWRkcmVzc0FzU3RyaW5nIH0gZnJvbSAnLi9hdG9tV2l0aEFkZHJlc3NBc1N0cmluZyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXhpc3RpbmdQcm9maWxlKFxyXG4gIHByb2ZpbGUkOiBBdG9tPFByb21pc2U8UmVjdXBlcm9EYXRpUHJvZmlsb1V0ZW50ZVJlc3BvbnNlPj5cclxuKTogUHJvZmlsZSB7XHJcbiAgZnVuY3Rpb24gYXRvbVdpdGhQcm9maWxlPEsgZXh0ZW5kcyBrZXlvZiBSZWN1cGVyb0RhdGlQcm9maWxvVXRlbnRlUmVzcG9uc2U+KFxyXG4gICAga2V5OiBLXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gd3JpdGFibGVBdG9tRnJvbVNlcnZpY2UocHJvZmlsZSQsIChkYXRhKSA9PiBkYXRhW2tleV0gPz8gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlc2lkZW50aWFsQWRkcmVzczogUHJvZmlsZVsnYWRkcmVzcyQnXSA9IGF0b20oKTtcclxuXHJcbiAgY29uc3QgZ2l2ZW5OYW1lJCA9IGF0b21XaXRoUHJvZmlsZSgnbm9tZScpO1xyXG4gIGNvbnN0IGZhbWlseU5hbWUkID0gYXRvbVdpdGhQcm9maWxlKCdjb2dub21lJyk7XHJcbiAgY29uc3QgdGVsZXBob25lJCA9IGF0b21XaXRoUHJvZmlsZSgnY2VsbHVsYXJlJyk7XHJcbiAgY29uc3QgZW1haWwkID0gYXRvbVdpdGhQcm9maWxlKCdlbWFpbCcpO1xyXG4gIGNvbnN0IHRheElkJCA9IGF0b21XaXRoUHJvZmlsZSgnY29kaWNlRmlzY2FsZScpO1xyXG4gIGNvbnN0IGxlZ2FsRm9ybSQgPSBhdG9tV2l0aFByb2ZpbGUoJ2Zvcm1hR2l1cmlkaWNhJyk7XHJcbiAgY29uc3QgdmF0TnVtYmVyJCA9IGF0b21XaXRoUHJvZmlsZSgncGl2YScpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2l2ZW5OYW1lJDogZ2l2ZW5OYW1lJCxcclxuICAgIGZhbWlseU5hbWUkOiBmYW1pbHlOYW1lJCxcclxuICAgIHRlbGVwaG9uZSQ6IHRlbGVwaG9uZSQsXHJcbiAgICB0ZWxlcGhvbmVXaXRoQ291bnRyeUNvZGUkOiBhdG9tV2l0aFBob25lKHtcclxuICAgICAgZW1haWwkOiBlbWFpbCQsXHJcbiAgICAgIGZhbWlseU5hbWUkOiBmYW1pbHlOYW1lJCxcclxuICAgICAgZ2l2ZW5OYW1lJDogZ2l2ZW5OYW1lJCxcclxuICAgICAgdGVsZXBob25lJDogdGVsZXBob25lJCxcclxuICAgIH0pLFxyXG4gICAgZW1haWwkOiBlbWFpbCQsXHJcbiAgICBlbWFpbENyeXB0JDogYXRvbSgpLFxyXG4gICAgdGF4SWQkOiB0YXhJZCQsXHJcbiAgICBsZWdhbEZvcm0kOiBsZWdhbEZvcm0kLFxyXG4gICAgYnVzaW5lc3NOYW1lJDogZmFtaWx5TmFtZSQsXHJcbiAgICB2YXROdW1iZXIkOiB2YXROdW1iZXIkLFxyXG4gICAgbGVnYWxSZXByZXNlbnRhdGl2ZSQ6IGF0b208SW5kaXZpZHVhbCB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKSxcclxuICAgIHByaXZhY3kkOiB3cml0YWJsZUF0b21Gcm9tU2VydmljZShwcm9maWxlJCwgKGRhdGEpID0+ICh7XHJcbiAgICAgIHByb21vUGxlbml0dWRlOiBkYXRhLnBlcm1lc3NpRU5vdGlmaWNoZS5pbml6aWF0aXZlQ29tbWVyY2FsaUVuaSxcclxuICAgICAgbWFya2V0UmVzZWFyY2g6IGRhdGEucGVybWVzc2lFTm90aWZpY2hlLmFuYWxpc2lFUmljZXJjaGVNZXJjYXRvLFxyXG4gICAgICBwcm9tb1RoaXJkUGFydGllczogZGF0YS5wZXJtZXNzaUVOb3RpZmljaGUuZnV0dXJlSW5pemlhdGl2ZVRlcnplUGFydGksXHJcbiAgICB9KSksXHJcblxyXG4gICAgYWRkcmVzcyQ6IHJlc2lkZW50aWFsQWRkcmVzcyxcclxuICAgIGFkZHJlc3NBc1N0cmluZyQ6IGF0b21XaXRoQWRkcmVzc0FzU3RyaW5nKHJlc2lkZW50aWFsQWRkcmVzcyksXHJcblxyXG4gICAgdnVsbmVyYWJsZSQ6IHdyaXRhYmxlQXRvbUZyb21TZXJ2aWNlKFxyXG4gICAgICBwcm9maWxlJCxcclxuICAgICAgKGRhdGEpID0+IGRhdGEudnVsbmVyYWJpbGl0eSB8fCBmYWxzZVxyXG4gICAgKSxcclxuXHJcbiAgICBoYXNBY3RpdmVDb21tb2RpdGllcyQ6IGF0b20oKSxcclxuICB9O1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy1nZW5lcmF0b3JzL3Byb2ZpbGUtZXhpc3RpbmcudHMifQ==