globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  accountCodeSelectedAtom,
  NEW_ACCOUNT,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class SelectAccount extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(20);
    this.skipIfDone = true;
    this.WrapperComponent = StepErrorBoundary;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/supply/SelectAccountStep.tsx");
  }
  toString() {
    return "selectAccount";
  }
  depends() {
    return [
      StepDependencies.LOGIN,
      StepDependencies.POWER,
      StepDependencies.GAS
    ];
  }
  provides() {
    return [StepDependencies.ACCOUNT];
  }
  isInFlux(get) {
    if (get(operativeModeEnabled$) && get(operativeModeAtom) === OperativeMode.CHANGE_OFFER) {
      return true;
    }
    return get(workingOnPanelStandaloneAtom);
  }
  toDo(get) {
    const accountCodeSelected = get(accountCodeSelectedAtom);
    return accountCodeSelected === NEW_ACCOUNT || !accountCodeSelected;
  }
}
export const selectAccount = new SelectAccount();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFFOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLHNCQUFzQkosS0FBSztBQUFBLEVBQWpDO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxFQUFFO0FBQzlCSyxzQkFBYTtBQUNiQyw0QkFBbUJMO0FBRW5CTSxnQkFBT0EsTUFBTSxPQUFPLHFCQUFxQjtBQUFBO0FBQUEsRUFFekNDLFdBQVc7QUFDVCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUFDLFVBQVU7QUFDUixXQUFPO0FBQUEsTUFDTFAsaUJBQWlCUTtBQUFBQSxNQUNqQlIsaUJBQWlCUztBQUFBQSxNQUNqQlQsaUJBQWlCVTtBQUFBQSxJQUFHO0FBQUEsRUFFeEI7QUFBQSxFQUVBQyxXQUFXO0FBQ1QsV0FBTyxDQUFDWCxpQkFBaUJZLE9BQU87QUFBQSxFQUNsQztBQUFBLEVBRVVDLFNBQVNDLEtBQWE7QUFDOUIsUUFDRUEsSUFBSW5CLHFCQUFxQixLQUN6Qm1CLElBQUlwQixpQkFBaUIsTUFBTUQsY0FBY3NCLGNBQ3pDO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPRCxJQUFJbEIsNEJBQTRCO0FBQUEsRUFDekM7QUFBQSxFQUVVb0IsS0FBS0YsS0FBYTtBQUMxQixVQUFNRyxzQkFBc0JILElBQUl2Qix1QkFBdUI7QUFDdkQsV0FBTzBCLHdCQUF3QnpCLGVBQWUsQ0FBQ3lCO0FBQUFBLEVBQ2pEO0FBQ0Y7QUFFTyxhQUFNQyxnQkFBZ0IsSUFBSWpCLGNBQWMiLCJuYW1lcyI6WyJhY2NvdW50Q29kZVNlbGVjdGVkQXRvbSIsIk5FV19BQ0NPVU5UIiwiT3BlcmF0aXZlTW9kZSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwid29ya2luZ09uUGFuZWxTdGFuZGFsb25lQXRvbSIsIlN0ZXAiLCJTdGVwUHJpb3JpdHkiLCJTdGVwRXJyb3JCb3VuZGFyeSIsIlN0ZXBEZXBlbmRlbmNpZXMiLCJTZWxlY3RBY2NvdW50IiwicHJpb3JpdHkiLCJza2lwSWZEb25lIiwiV3JhcHBlckNvbXBvbmVudCIsImxhenkiLCJ0b1N0cmluZyIsImRlcGVuZHMiLCJMT0dJTiIsIlBPV0VSIiwiR0FTIiwicHJvdmlkZXMiLCJBQ0NPVU5UIiwiaXNJbkZsdXgiLCJnZXQiLCJDSEFOR0VfT0ZGRVIiLCJ0b0RvIiwiYWNjb3VudENvZGVTZWxlY3RlZCIsInNlbGVjdEFjY291bnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsic2VsZWN0QWNjb3VudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBhY2NvdW50Q29kZVNlbGVjdGVkQXRvbSxcclxuICBORVdfQUNDT1VOVCxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICB3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCBTdGVwRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9TdGVwRXJyb3JCb3VuZGFyeSc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuaW1wb3J0IHsgU3RlcERlcGVuZGVuY2llcyB9IGZyb20gJy4uL1N0ZXBEZXBlbmRlbmNpZXMnO1xyXG5cclxuY2xhc3MgU2VsZWN0QWNjb3VudCBleHRlbmRzIFN0ZXAge1xyXG4gIHByaW9yaXR5ID0gbmV3IFN0ZXBQcmlvcml0eSgyMCk7XHJcbiAgc2tpcElmRG9uZSA9IHRydWU7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL1NlbGVjdEFjY291bnRTdGVwJyk7XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICdzZWxlY3RBY2NvdW50JztcclxuICB9XHJcblxyXG4gIGRlcGVuZHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLkxPR0lOLFxyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLlBPV0VSLFxyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLkdBUyxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBwcm92aWRlcygpIHtcclxuICAgIHJldHVybiBbU3RlcERlcGVuZGVuY2llcy5BQ0NPVU5UXTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpc0luRmx1eChnZXQ6IEdldHRlcikge1xyXG4gICAgaWYgKFxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUVuYWJsZWQkKSAmJlxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUF0b20pID09PSBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUlxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXQod29ya2luZ09uUGFuZWxTdGFuZGFsb25lQXRvbSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgdG9EbyhnZXQ6IEdldHRlcikge1xyXG4gICAgY29uc3QgYWNjb3VudENvZGVTZWxlY3RlZCA9IGdldChhY2NvdW50Q29kZVNlbGVjdGVkQXRvbSk7XHJcbiAgICByZXR1cm4gYWNjb3VudENvZGVTZWxlY3RlZCA9PT0gTkVXX0FDQ09VTlQgfHwgIWFjY291bnRDb2RlU2VsZWN0ZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0QWNjb3VudCA9IG5ldyBTZWxlY3RBY2NvdW50KCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9zdXBwbHkvc2VsZWN0QWNjb3VudC50c3gifQ==