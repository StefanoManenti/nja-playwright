import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/tracking-react/src/lib/tracking-state.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/tracking-react/src/lib/tracking-state.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const createContext = __vite__cjsImport3_react["createContext"]; const useContext = __vite__cjsImport3_react["useContext"]; const useMemo = __vite__cjsImport3_react["useMemo"];
export const NO_FALLBACK_UNDEFINED = Symbol("undefined");
const TrackingStateContext = createContext({
  get: () => Promise.resolve(void 0)
});
export function TrackingState({
  children,
  getValue
}) {
  _s();
  const superContext = useContext(TrackingStateContext);
  const value = useMemo(() => {
    const get = async (key) => {
      const toReturn = await getValue(key) ?? superContext?.get?.(key);
      if (toReturn === NO_FALLBACK_UNDEFINED) {
        return void 0;
      }
      return toReturn;
    };
    return { get };
  }, [getValue, superContext]);
  return /* @__PURE__ */ jsxDEV(TrackingStateContext.Provider, { value, children }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/tracking-react/src/lib/tracking-state.tsx",
    lineNumber: 49,
    columnNumber: 5
  }, this);
}
_s(TrackingState, "jJDy+YBywXOqf3OvntPhS6snbIM=");
_c = TrackingState;
export function useTrackingState() {
  _s2();
  return useContext(TrackingStateContext);
}
_s2(useTrackingState, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");
var _c;
$RefreshReg$(_c, "TrackingState");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/tracking-react/src/lib/tracking-state.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IkFBZ0RJOzs7Ozs7d0RBaEQrQkE7QUFBQUEsVUFBWUMsVUFBZSwrSUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJOUQsYUFBTUMsd0JBQXdCQyxPQUFPLFdBQVc7QUFZdkQsTUFBTUMsdUJBQXVCQyxjQUE0QjtBQUFBLEVBQ3ZEQyxLQUFLQSxNQUFNQyxRQUFRQyxRQUFRQyxNQUFTO0FBQ3RDLENBQUM7QUFRTSxnQkFBU0MsY0FBYztBQUFBLEVBQzVCQztBQUFBQSxFQUNBQztBQUlGLEdBQUc7QUFBQUMsS0FBQTtBQUNELFFBQU1DLGVBQWVkLFdBQVdJLG9CQUFvQjtBQUVwRCxRQUFNVyxRQUFzQmQsUUFBUSxNQUFNO0FBQ3hDLFVBQU1LLE1BQU0sT0FBT1UsUUFBYTtBQUM5QixZQUFNQyxXQUFZLE1BQU1MLFNBQVNJLEdBQUcsS0FBTUYsY0FBY1IsTUFBTVUsR0FBRztBQUNqRSxVQUFJQyxhQUFhZix1QkFBdUI7QUFDdEMsZUFBT087QUFBQUEsTUFDVDtBQUNBLGFBQU9RO0FBQUFBLElBQ1Q7QUFFQSxXQUFPLEVBQUVYLElBQUk7QUFBQSxFQUNmLEdBQUcsQ0FBQ00sVUFBVUUsWUFBWSxDQUFDO0FBRTNCLFNBQ0UsdUJBQUMscUJBQXFCLFVBQXJCLEVBQThCLE9BQzVCSCxZQURIO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FFQTtBQUVKO0FBQUNFLEdBMUJlSCxlQUFhO0FBQUFRLEtBQWJSO0FBNEJULGdCQUFTUyxtQkFBbUI7QUFBQUMsTUFBQTtBQUNqQyxTQUFPcEIsV0FBV0ksb0JBQW9CO0FBQ3hDO0FBQUNnQixJQUZlRCxrQkFBZ0I7QUFBQSxJQUFBRDtBQUFBRyxhQUFBSCxJQUFBIiwibmFtZXMiOlsidXNlQ29udGV4dCIsInVzZU1lbW8iLCJOT19GQUxMQkFDS19VTkRFRklORUQiLCJTeW1ib2wiLCJUcmFja2luZ1N0YXRlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJnZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVuZGVmaW5lZCIsIlRyYWNraW5nU3RhdGUiLCJjaGlsZHJlbiIsImdldFZhbHVlIiwiX3MiLCJzdXBlckNvbnRleHQiLCJ2YWx1ZSIsImtleSIsInRvUmV0dXJuIiwiX2MiLCJ1c2VUcmFja2luZ1N0YXRlIiwiX3MyIiwiJFJlZnJlc2hSZWckIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInRyYWNraW5nLXN0YXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBSZWFjdE5vZGUsIHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XHJcblxyXG50eXBlIEtleSA9IHN0cmluZztcclxudHlwZSBWYWx1ZSA9IHN0cmluZztcclxuZXhwb3J0IGNvbnN0IE5PX0ZBTExCQUNLX1VOREVGSU5FRCA9IFN5bWJvbCgndW5kZWZpbmVkJyk7XHJcblxyXG5leHBvcnQgdHlwZSBHZXQgPSAoXHJcbiAga2V5OiBLZXlcclxuKSA9PiBQcm9taXNlPFZhbHVlIHwgdHlwZW9mIE5PX0ZBTExCQUNLX1VOREVGSU5FRCB8IHVuZGVmaW5lZD47XHJcblxyXG5leHBvcnQgdHlwZSBHZXQyID0gKGtleTogS2V5KSA9PiBQcm9taXNlPFZhbHVlIHwgdW5kZWZpbmVkPjtcclxuXHJcbnR5cGUgQ29udGV4dFZhbHVlID0ge1xyXG4gIGdldDogR2V0MjtcclxufTtcclxuXHJcbmNvbnN0IFRyYWNraW5nU3RhdGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxDb250ZXh0VmFsdWU+KHtcclxuICBnZXQ6ICgpID0+IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpLFxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdmFsdWVzIGluc2lkZSB0aGUgdHJhY2tpbmcgc3RhdGUuXHJcbiAqIEBwYXJhbSBjaGlsZHJlbiB0aGUgY29tcG9uZW50IHRvIHdyYXAuXHJcbiAqIEBwYXJhbSBnZXRWYWx1ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgc3RhdGUuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFRyYWNraW5nU3RhdGUoe1xyXG4gIGNoaWxkcmVuLFxyXG4gIGdldFZhbHVlLFxyXG59OiB7XHJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcclxuICBnZXRWYWx1ZTogR2V0O1xyXG59KSB7XHJcbiAgY29uc3Qgc3VwZXJDb250ZXh0ID0gdXNlQ29udGV4dChUcmFja2luZ1N0YXRlQ29udGV4dCk7XHJcblxyXG4gIGNvbnN0IHZhbHVlOiBDb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIGNvbnN0IGdldCA9IGFzeW5jIChrZXk6IEtleSkgPT4ge1xyXG4gICAgICBjb25zdCB0b1JldHVybiA9IChhd2FpdCBnZXRWYWx1ZShrZXkpKSA/PyBzdXBlckNvbnRleHQ/LmdldD8uKGtleSk7XHJcbiAgICAgIGlmICh0b1JldHVybiA9PT0gTk9fRkFMTEJBQ0tfVU5ERUZJTkVEKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdG9SZXR1cm47XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7IGdldCB9O1xyXG4gIH0sIFtnZXRWYWx1ZSwgc3VwZXJDb250ZXh0XSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8VHJhY2tpbmdTdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9UcmFja2luZ1N0YXRlQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlVHJhY2tpbmdTdGF0ZSgpIHtcclxuICByZXR1cm4gdXNlQ29udGV4dChUcmFja2luZ1N0YXRlQ29udGV4dCk7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy90cmFja2luZy1yZWFjdC9zcmMvbGliL3RyYWNraW5nLXN0YXRlLnRzeCJ9