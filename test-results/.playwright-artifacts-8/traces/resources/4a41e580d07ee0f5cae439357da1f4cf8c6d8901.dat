import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { CloseIcon, SvgIcon } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-icons/src/index.ts";
import clsx from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/clsx.js?v=0189a8d1";
import __vite__cjsImport5_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useEffect = __vite__cjsImport5_react["useEffect"]; const useRef = __vite__cjsImport5_react["useRef"]; const useState = __vite__cjsImport5_react["useState"];
import Calendar from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react-calendar.js?v=0189a8d1";
import "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/react-calendar/dist/Calendar.css";
import calendarClasses from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.module.less";
import { FormHelperText } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/FormHelperText.tsx";
import { TextField } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/TextField.tsx";
import classes from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/TextField.module.less";
const formatDate = (date) => date.toLocaleDateString("it-IT");
const parseDate = (str) => {
  if (!str) return null;
  const [day, month, year] = str.split("/").map(Number);
  if (!day || !month || !year) return null;
  const date = new Date(year, month - 1, day);
  return isNaN(date.getTime()) ? null : date;
};
const DATE_LENGTH = 10;
const hideAfter = 250;
export function CalendarField({
  value,
  onChange,
  onBlur,
  error,
  label,
  placeholder,
  helperText,
  readOnly = true,
  showClear,
  ...calendarProps
}) {
  _s();
  const [show, setShow] = useState(false);
  const inputRef = useRef(null);
  const [inputValue, setInputValue] = useState(value ?? "");
  useEffect(() => {
    setInputValue(value ?? "");
  }, [value]);
  const parsedDate = value ? parseDate(value) : null;
  const previousValue = useRef("");
  const handleInputChange = (event) => {
    let value2 = event.target.value;
    const isBackspace = previousValue.current.length > value2.length && previousValue.current.startsWith(value2);
    value2 = value2.replace(/[^0-9/]/g, "");
    if (isBackspace && previousValue.current[value2.length] === "/") {
      value2 = value2.slice(0, -1);
    }
    if (value2.length > DATE_LENGTH) {
      value2 = value2.slice(0, DATE_LENGTH);
    } else if (!isBackspace) {
      if (value2.length === 2 || value2.length === 5) {
        value2 += "/";
      }
    }
    const parts = value2.split("/");
    const day = parts[0] ? parseInt(parts[0], 10) : NaN;
    const month = parts[1] ? parseInt(parts[1], 10) : NaN;
    if (!isNaN(day) && (day < 1 || day > 31)) {
      value2 = previousValue.current;
    }
    if (!isNaN(month) && (month < 1 || month > 12)) {
      value2 = previousValue.current;
    }
    event.target.value = value2;
    previousValue.current = value2;
    setInputValue(value2);
    if (value2.length === DATE_LENGTH) {
      const parsed = parseDate(value2);
      if (parsed) {
        onChange(formatDate(parsed));
      } else {
        onChange(value2);
      }
    } else {
      onChange(value2);
    }
  };
  return /* @__PURE__ */ jsxDEV("div", { className: calendarClasses.calendarWrapper, children: [
    /* @__PURE__ */ jsxDEV("div", { className: clsx(classes.root, [error && classes.error]), children: [
      /* @__PURE__ */ jsxDEV(
        TextField,
        {
          label,
          placeholder,
          autoComplete: "off",
          ref: inputRef,
          type: "text",
          readOnly,
          value: inputValue,
          onChange: !readOnly ? handleInputChange : void 0,
          onFocus: () => setShow(true),
          endAdornment: showClear && value && /* @__PURE__ */ jsxDEV(
            "button",
            {
              onClick: () => {
                onChange("");
                setInputValue("");
              },
              type: "button",
              className: calendarClasses.btnNoStyle,
              children: /* @__PURE__ */ jsxDEV(CloseIcon, {}, void 0, false, {
                fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
                lineNumber: 153,
                columnNumber: 17
              }, this)
            },
            void 0,
            false,
            {
              fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
              lineNumber: 145,
              columnNumber: 11
            },
            this
          ),
          onBlur: () => {
            setTimeout(() => {
              if (onBlur) onBlur();
            }, hideAfter);
          },
          className: clsx([error && classes.error])
        },
        void 0,
        false,
        {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
          lineNumber: 132,
          columnNumber: 9
        },
        this
      ),
      helperText && /* @__PURE__ */ jsxDEV(FormHelperText, { error, children: helperText }, void 0, false, {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
        lineNumber: 167,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
      lineNumber: 131,
      columnNumber: 7
    }, this),
    show && /* @__PURE__ */ jsxDEV("div", { className: calendarClasses.calendarContainer, children: /* @__PURE__ */ jsxDEV(
      Calendar,
      {
        className: calendarClasses.calendar,
        onChange: (val) => {
          if (val instanceof Date) {
            const formatted = formatDate(val);
            onChange(formatted);
            setInputValue(formatted);
            setShow(false);
            if (onBlur) onBlur();
          }
        },
        value: parsedDate ?? void 0,
        ...calendarProps,
        next2Label: null,
        prev2Label: null,
        nextLabel: /* @__PURE__ */ jsxDEV(NextIcon, {}, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
          lineNumber: 187,
          columnNumber: 22
        }, this),
        prevLabel: /* @__PURE__ */ jsxDEV(NextIcon, {}, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
          lineNumber: 188,
          columnNumber: 22
        }, this)
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
        lineNumber: 172,
        columnNumber: 11
      },
      this
    ) }, void 0, false, {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
      lineNumber: 171,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
    lineNumber: 130,
    columnNumber: 5
  }, this);
}
_s(CalendarField, "N51svqQtxs6zBnxgGBUQQ+59wI4=");
_c = CalendarField;
function NextIcon(props) {
  return /* @__PURE__ */ jsxDEV(SvgIcon, { ...props, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsxDEV("path", { d: "M8.19427 22.5424C7.82124 22.8976 7.23761 22.8831 6.88212 22.5117C6.70213 22.3382 6.6001 22.0967 6.6001 21.8439C6.6001 21.5924 6.70213 21.3509 6.88212 21.1774L16.2835 11.9987L6.88212 2.82C6.70213 2.64653 6.6001 2.40499 6.6001 2.1535C6.6001 1.90076 6.70213 1.65922 6.88212 1.48575C7.04782 1.29609 7.28862 1.19234 7.53758 1.20022C7.77961 1.20189 8.01265 1.29111 8.19427 1.45504L18.3148 11.2998H18.3132C18.4964 11.4849 18.6001 11.736 18.6001 11.9987C18.6001 12.2614 18.4964 12.5125 18.3132 12.6976L8.19427 22.5424Z" }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
    lineNumber: 199,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx",
    lineNumber: 198,
    columnNumber: 5
  }, this);
}
_c2 = NextIcon;
var _c, _c2;
$RefreshReg$(_c, "CalendarField");
$RefreshReg$(_c2, "NextIcon");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/CalendarField.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,