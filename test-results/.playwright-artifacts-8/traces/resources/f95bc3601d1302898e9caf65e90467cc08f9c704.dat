globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  Segment,
  workingOnBroadbandAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class IdentityResidential extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(11);
    this.WrapperComponent = StepErrorBoundary;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/identity/IdentityResidentialStep.tsx");
  }
  toString() {
    return "CustomerIdentityResidential";
  }
  depends() {
    return [];
  }
  provides() {
    return [StepDependencies.CUSTOMER_IDENTITY];
  }
  async isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return (get(workingOnBroadbandAtom) || equals(
      operativeMode,
      OperativeMode.NEW_ACTIVATION,
      OperativeMode.SWITCH_IN_TRANSFER,
      OperativeMode.TRANSFER
    ) && get(operativeModeEnabled$)) && await get(customerSegmentAtom) === Segment.RESID;
  }
  // protected toDo(get: Getter) {
  //   return !get(tsOperativeModePowerAtom);
  // }
}
export const identityResidential = new IdentityResidential();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxTQUFTQyxjQUFjO0FBQ3ZCLE9BQU9DLHVCQUF1QjtBQUM5QixTQUFTQyx3QkFBd0I7QUFFakMsTUFBTUMsNEJBQTRCTCxLQUFLO0FBQUEsRUFBdkM7QUFBQTtBQUNFTSxvQkFBVyxJQUFJTCxhQUFhLEVBQUU7QUFDOUJNLDRCQUFtQko7QUFFbkJLLGdCQUFPQSxNQUFNLE9BQU8sNkJBQTZCO0FBQUE7QUFBQSxFQUVqREMsV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsVUFBVTtBQUNSLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU8sQ0FBQ1AsaUJBQWlCUSxpQkFBaUI7QUFBQSxFQUM1QztBQUFBLEVBRUEsTUFBZ0JDLFNBQVNDLEtBQWE7QUFDcEMsVUFBTUMsZ0JBQWdCRCxJQUFJbEIsaUJBQWlCO0FBRTNDLFlBQ0drQixJQUFJZixzQkFBc0IsS0FDeEJHO0FBQUFBLE1BQ0NhO0FBQUFBLE1BQ0FwQixjQUFjcUI7QUFBQUEsTUFDZHJCLGNBQWNzQjtBQUFBQSxNQUNkdEIsY0FBY3VCO0FBQUFBLElBQ2hCLEtBQ0VKLElBQUlqQixxQkFBcUIsTUFDNUIsTUFBTWlCLElBQUlwQixtQkFBbUIsTUFBT0ksUUFBUXFCO0FBQUFBLEVBRWpEO0FBQUE7QUFBQTtBQUFBO0FBS0Y7QUFFTyxhQUFNQyxzQkFBc0IsSUFBSWYsb0JBQW9CIiwibmFtZXMiOlsiY3VzdG9tZXJTZWdtZW50QXRvbSIsIk9wZXJhdGl2ZU1vZGUiLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGVFbmFibGVkJCIsIlNlZ21lbnQiLCJ3b3JraW5nT25Ccm9hZGJhbmRBdG9tIiwiU3RlcCIsIlN0ZXBQcmlvcml0eSIsImVxdWFscyIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiU3RlcERlcGVuZGVuY2llcyIsIklkZW50aXR5UmVzaWRlbnRpYWwiLCJwcmlvcml0eSIsIldyYXBwZXJDb21wb25lbnQiLCJsYXp5IiwidG9TdHJpbmciLCJkZXBlbmRzIiwicHJvdmlkZXMiLCJDVVNUT01FUl9JREVOVElUWSIsImlzSW5GbHV4IiwiZ2V0Iiwib3BlcmF0aXZlTW9kZSIsIk5FV19BQ1RJVkFUSU9OIiwiU1dJVENIX0lOX1RSQU5TRkVSIiwiVFJBTlNGRVIiLCJSRVNJRCIsImlkZW50aXR5UmVzaWRlbnRpYWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiaWRlbnRpdHktcmVzaWRlbnRpYWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgY3VzdG9tZXJTZWdtZW50QXRvbSxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICBTZWdtZW50LFxyXG4gIHdvcmtpbmdPbkJyb2FkYmFuZEF0b20sXHJcbn0gZnJvbSAnQG5hai13by9kYXRhLWFjY2Vzcyc7XHJcbmltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgU3RlcEVycm9yQm91bmRhcnkgZnJvbSAnLi4vU3RlcEVycm9yQm91bmRhcnknO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcblxyXG5jbGFzcyBJZGVudGl0eVJlc2lkZW50aWFsIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDExKTtcclxuICBXcmFwcGVyQ29tcG9uZW50ID0gU3RlcEVycm9yQm91bmRhcnk7XHJcblxyXG4gIGxhenkgPSAoKSA9PiBpbXBvcnQoJy4vLi9JZGVudGl0eVJlc2lkZW50aWFsU3RlcCcpO1xyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAnQ3VzdG9tZXJJZGVudGl0eVJlc2lkZW50aWFsJztcclxuICB9XHJcblxyXG4gIGRlcGVuZHMoKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBwcm92aWRlcygpIHtcclxuICAgIHJldHVybiBbU3RlcERlcGVuZGVuY2llcy5DVVNUT01FUl9JREVOVElUWV07XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgaXNJbkZsdXgoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGNvbnN0IG9wZXJhdGl2ZU1vZGUgPSBnZXQob3BlcmF0aXZlTW9kZUF0b20pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIChnZXQod29ya2luZ09uQnJvYWRiYW5kQXRvbSkgfHxcclxuICAgICAgICAoZXF1YWxzKFxyXG4gICAgICAgICAgb3BlcmF0aXZlTW9kZSxcclxuICAgICAgICAgIE9wZXJhdGl2ZU1vZGUuTkVXX0FDVElWQVRJT04sXHJcbiAgICAgICAgICBPcGVyYXRpdmVNb2RlLlNXSVRDSF9JTl9UUkFOU0ZFUixcclxuICAgICAgICAgIE9wZXJhdGl2ZU1vZGUuVFJBTlNGRVJcclxuICAgICAgICApICYmXHJcbiAgICAgICAgICBnZXQob3BlcmF0aXZlTW9kZUVuYWJsZWQkKSkpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlJFU0lEXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gcHJvdGVjdGVkIHRvRG8oZ2V0OiBHZXR0ZXIpIHtcclxuICAvLyAgIHJldHVybiAhZ2V0KHRzT3BlcmF0aXZlTW9kZVBvd2VyQXRvbSk7XHJcbiAgLy8gfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaWRlbnRpdHlSZXNpZGVudGlhbCA9IG5ldyBJZGVudGl0eVJlc2lkZW50aWFsKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9pZGVudGl0eS9pZGVudGl0eS1yZXNpZGVudGlhbC50c3gifQ==