globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  effectiveDatesCommodityAtom,
  hasStepSceltaDecorrenza$,
  immediateEffectAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class CommodityEffectiveDates extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(92);
    this.skipIfDone = false;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/effective-dates/CommodityEffectiveDatesStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "effectiveDates";
  }
  depends() {
    return [];
  }
  provides() {
    return [StepDependencies.IMMEDIATE_EFFECT];
  }
  async isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return (get(workingOnPanelStandaloneAtom) || equals(
      operativeMode,
      OperativeMode.SWITCH_IN,
      OperativeMode.NEW_ACTIVATION,
      OperativeMode.CHANGE_OFFER
    ) && get(operativeModeEnabled$)) && (!equals(operativeMode, OperativeMode.NEW_ACTIVATION) || await get(hasStepSceltaDecorrenza$));
  }
  async isAvailable(get) {
    const effectiveDates = await get(effectiveDatesCommodityAtom);
    return Object.keys(effectiveDates).length > 1;
  }
  async toDo(get) {
    const immediateEffect = await get(immediateEffectAtom);
    return !immediateEffect;
  }
}
export const commodityEffectiveDates = new CommodityEffectiveDates();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0MsY0FBYztBQUN2QixTQUFTQyx3QkFBd0I7QUFFakMsTUFBTUMsZ0NBQWdDTCxLQUFLO0FBQUEsRUFBM0M7QUFBQTtBQUNFTSxvQkFBVyxJQUFJTCxhQUFhLEVBQUU7QUFDOUJNLHNCQUFhO0FBRWJDLGdCQUFPQSxNQUFNLE9BQU8sK0JBQStCO0FBQ25EQyw0QkFBbUJQO0FBQUFBO0FBQUFBLEVBRW5CUSxXQUFXO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxXQUFXO0FBQ1QsV0FBTyxDQUFDUixpQkFBaUJTLGdCQUFnQjtBQUFBLEVBQzNDO0FBQUEsRUFFQSxNQUFnQkMsU0FBU0MsS0FBYTtBQUNwQyxVQUFNQyxnQkFBZ0JELElBQUlsQixpQkFBaUI7QUFDM0MsWUFDR2tCLElBQUloQiw0QkFBNEIsS0FDOUJJO0FBQUFBLE1BQ0NhO0FBQUFBLE1BQ0FwQixjQUFjcUI7QUFBQUEsTUFDZHJCLGNBQWNzQjtBQUFBQSxNQUNkdEIsY0FBY3VCO0FBQUFBLElBQ2hCLEtBQ0VKLElBQUlqQixxQkFBcUIsT0FDNUIsQ0FBQ0ssT0FBT2EsZUFBZXBCLGNBQWNzQixjQUFjLEtBQ2pELE1BQU1ILElBQUlyQix3QkFBd0I7QUFBQSxFQUV6QztBQUFBLEVBRUEsTUFBZ0IwQixZQUFZTCxLQUFhO0FBQ3ZDLFVBQU1NLGlCQUFpQixNQUFNTixJQUFJdEIsMkJBQTJCO0FBRTVELFdBQU82QixPQUFPQyxLQUFLRixjQUFjLEVBQUVHLFNBQVM7QUFBQSxFQUM5QztBQUFBLEVBRUEsTUFBZ0JDLEtBQUtWLEtBQWE7QUFDaEMsVUFBTVcsa0JBQWtCLE1BQU1YLElBQUlwQixtQkFBbUI7QUFDckQsV0FBTyxDQUFDK0I7QUFBQUEsRUFDVjtBQUNGO0FBRU8sYUFBTUMsMEJBQTBCLElBQUl0Qix3QkFBd0IiLCJuYW1lcyI6WyJlZmZlY3RpdmVEYXRlc0NvbW1vZGl0eUF0b20iLCJoYXNTdGVwU2NlbHRhRGVjb3JyZW56YSQiLCJpbW1lZGlhdGVFZmZlY3RBdG9tIiwiT3BlcmF0aXZlTW9kZSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwid29ya2luZ09uUGFuZWxTdGFuZGFsb25lQXRvbSIsIlN0ZXAiLCJTdGVwUHJpb3JpdHkiLCJTdGVwRXJyb3JCb3VuZGFyeSIsImVxdWFscyIsIlN0ZXBEZXBlbmRlbmNpZXMiLCJDb21tb2RpdHlFZmZlY3RpdmVEYXRlcyIsInByaW9yaXR5Iiwic2tpcElmRG9uZSIsImxhenkiLCJXcmFwcGVyQ29tcG9uZW50IiwidG9TdHJpbmciLCJkZXBlbmRzIiwicHJvdmlkZXMiLCJJTU1FRElBVEVfRUZGRUNUIiwiaXNJbkZsdXgiLCJnZXQiLCJvcGVyYXRpdmVNb2RlIiwiU1dJVENIX0lOIiwiTkVXX0FDVElWQVRJT04iLCJDSEFOR0VfT0ZGRVIiLCJpc0F2YWlsYWJsZSIsImVmZmVjdGl2ZURhdGVzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInRvRG8iLCJpbW1lZGlhdGVFZmZlY3QiLCJjb21tb2RpdHlFZmZlY3RpdmVEYXRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJjb21tb2RpdHktZWZmZWN0aXZlLWRhdGVzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGVmZmVjdGl2ZURhdGVzQ29tbW9kaXR5QXRvbSxcclxuICBoYXNTdGVwU2NlbHRhRGVjb3JyZW56YSQsXHJcbiAgaW1tZWRpYXRlRWZmZWN0QXRvbSxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICB3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHsgZXF1YWxzIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgU3RlcERlcGVuZGVuY2llcyB9IGZyb20gJy4uL1N0ZXBEZXBlbmRlbmNpZXMnO1xyXG5cclxuY2xhc3MgQ29tbW9kaXR5RWZmZWN0aXZlRGF0ZXMgZXh0ZW5kcyBTdGVwIHtcclxuICBwcmlvcml0eSA9IG5ldyBTdGVwUHJpb3JpdHkoOTIpO1xyXG4gIHNraXBJZkRvbmUgPSBmYWxzZTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9Db21tb2RpdHlFZmZlY3RpdmVEYXRlc1N0ZXAnKTtcclxuICBXcmFwcGVyQ29tcG9uZW50ID0gU3RlcEVycm9yQm91bmRhcnk7XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICdlZmZlY3RpdmVEYXRlcyc7XHJcbiAgfVxyXG5cclxuICBkZXBlbmRzKCkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZXMoKSB7XHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuSU1NRURJQVRFX0VGRkVDVF07XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgaXNJbkZsdXgoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGNvbnN0IG9wZXJhdGl2ZU1vZGUgPSBnZXQob3BlcmF0aXZlTW9kZUF0b20pO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgKGdldCh3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tKSB8fFxyXG4gICAgICAgIChlcXVhbHMoXHJcbiAgICAgICAgICBvcGVyYXRpdmVNb2RlLFxyXG4gICAgICAgICAgT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU4sXHJcbiAgICAgICAgICBPcGVyYXRpdmVNb2RlLk5FV19BQ1RJVkFUSU9OLFxyXG4gICAgICAgICAgT3BlcmF0aXZlTW9kZS5DSEFOR0VfT0ZGRVJcclxuICAgICAgICApICYmXHJcbiAgICAgICAgICBnZXQob3BlcmF0aXZlTW9kZUVuYWJsZWQkKSkpICYmXHJcbiAgICAgICghZXF1YWxzKG9wZXJhdGl2ZU1vZGUsIE9wZXJhdGl2ZU1vZGUuTkVXX0FDVElWQVRJT04pIHx8XHJcbiAgICAgICAgKGF3YWl0IGdldChoYXNTdGVwU2NlbHRhRGVjb3JyZW56YSQpKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgaXNBdmFpbGFibGUoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGNvbnN0IGVmZmVjdGl2ZURhdGVzID0gYXdhaXQgZ2V0KGVmZmVjdGl2ZURhdGVzQ29tbW9kaXR5QXRvbSk7XHJcbiAgICAvLyBIaWRlIHRoZSBzdGVwIGlmIHdlIGRvbid0IGhhdmUgY2hvaWNlLlxyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVmZmVjdGl2ZURhdGVzKS5sZW5ndGggPiAxO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIHRvRG8oZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGNvbnN0IGltbWVkaWF0ZUVmZmVjdCA9IGF3YWl0IGdldChpbW1lZGlhdGVFZmZlY3RBdG9tKTtcclxuICAgIHJldHVybiAhaW1tZWRpYXRlRWZmZWN0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbW1vZGl0eUVmZmVjdGl2ZURhdGVzID0gbmV3IENvbW1vZGl0eUVmZmVjdGl2ZURhdGVzKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9lZmZlY3RpdmUtZGF0ZXMvY29tbW9kaXR5LWVmZmVjdGl2ZS1kYXRlcy50c3gifQ==