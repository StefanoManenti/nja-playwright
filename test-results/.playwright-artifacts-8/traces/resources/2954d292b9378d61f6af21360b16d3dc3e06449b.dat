globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { atomAction, OK, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { VulnerableDocumentoDatiAnagraficiError, VulnerableDocumentoNonCompletoError, VulnerableDocumentoNonLeggibileError, VulnerableDocumentoNonRiconosciutoError, VulnerableDocumentoScadutoError, VulnerableDocumentoTecnicoError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { atomWithMutation } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai-tanstack-query.js?v=0189a8d1";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { familyNameAtom, givenNameAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { VulnerabilityFlag, vulnerabilitySelfCertificationFlags$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/vulnerability/vulnerability.ts";
let attempts = 1;
export async function identityOcrUpload(payload) {
  const form = new FormData();
  form.append("contractCode", payload.plicoCode);
  form.append("front", payload.front, getFileName("fronte", payload.front));
  form.append("back", payload.back, getFileName("retro", payload.back));
  if (payload.type) {
    form.append("identityOcrUploadType", payload.type);
  }
  form.append("name", payload.nome);
  form.append("surname", payload.cognome);
  if (payload.salesProcess !== "CAMBIO_PRODOTTO") {
    form.append("salesProcessForLog", payload.salesProcess);
  }
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/file/identityOcrUpload`, {
    method: "POST",
    headers: {
      // 'Content-Type': 'multipart/form-data',
      Accept: "application/json",
      transactionId: logHash
    },
    body: form
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  if (data.outcome === "OK") {
    return OK;
  }
  if (data.code) {
    if (attempts-- <= 0) {
      return OK;
    }
    if (data.type !== "ServiceError") {
      throw new VulnerableDocumentoTecnicoError(data.code, logHash);
    }
    switch (data.code) {
      case "E003" /* DocumentoScaduto */:
        throw new VulnerableDocumentoScadutoError(data.code, logHash);
      case "E004" /* DocumentoNonLeggibile */:
        throw new VulnerableDocumentoNonLeggibileError(data.code, logHash);
      case "E005" /* DocumentoNonRiconosciuto */:
        throw new VulnerableDocumentoNonRiconosciutoError(data.code, logHash);
      case "E006" /* DocumentoNonCompleto */:
        throw new VulnerableDocumentoNonCompletoError(data.code, logHash);
      case "E007" /* DocumentoDatiAnagrafici */:
        throw new VulnerableDocumentoDatiAnagraficiError(data.code, logHash);
      default:
        throw new VulnerableDocumentoTecnicoError(data.code, logHash);
    }
  }
}
const extensionForFileName = {
  "application/pdf": "pdf",
  "image/png": "png",
  "image/jpeg": "jpg"
};
function getFileName(part, file) {
  const b = extensionForFileName[file.type];
  if (!b) {
    throw Error(`Tipo mime ${file.type} non valido o non abilitato.`);
  }
  return `${part}.${b}`;
}
export var IdentityAcquisitionErrorCode = /* @__PURE__ */ ((IdentityAcquisitionErrorCode2) => {
  IdentityAcquisitionErrorCode2["FormatoNonCorretto"] = "E001";
  IdentityAcquisitionErrorCode2["PesoMassimo"] = "E002";
  IdentityAcquisitionErrorCode2["DocumentoScaduto"] = "E003";
  IdentityAcquisitionErrorCode2["DocumentoNonLeggibile"] = "E004";
  IdentityAcquisitionErrorCode2["DocumentoNonRiconosciuto"] = "E005";
  IdentityAcquisitionErrorCode2["DocumentoNonCompleto"] = "E006";
  IdentityAcquisitionErrorCode2["DocumentoDatiAnagrafici"] = "E007";
  return IdentityAcquisitionErrorCode2;
})(IdentityAcquisitionErrorCode || {});
export { VulnerabilityFlag };
export const vulnerabilitySelfCertification$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\api\\weborder\\ocr-vulnerabili.ts/vulnerabilitySelfCertification$", atomAction(async (get, set, args) => {
  set(vulnerabilitySelfCertificationFlags$, args.flags);
  const contract = get(currentContractInfoAtom);
  const plicoCode = await contract.plicoCode;
  const operativeMode = await get(operativeModeAtom);
  const nome = await get(givenNameAtom);
  const cognome = await get(familyNameAtom);
  const mutation$ = atomWithMutation(() => {
    return {
      mutationKey: ["identityOcrUpload"],
      mutationFn: ({
        front,
        back
      }) => identityOcrUpload({
        plicoCode,
        front,
        back,
        nome,
        cognome,
        salesProcess: getSalesProcess(operativeMode)
      })
    };
  });
  mutation$.debugLabel = "mutation$";
  mutation$.debugLabel = "mutation$";
  return get(mutation$).mutateAsync(args);
}));
vulnerabilitySelfCertification$.debugLabel = "vulnerabilitySelfCertification$";
function getSalesProcess(operativeMode) {
  switch (operativeMode) {
    case OperativeMode.SWITCH_IN:
      return "SWITCH_IN";
    case OperativeMode.NEW_ACTIVATION:
      return "ATTIVAZIONI";
    case OperativeMode.CHANGE_OFFER:
      return "CAMBIO_PRODOTTO";
  }
}

//# sourceMappingURL=data:application/json;base64,