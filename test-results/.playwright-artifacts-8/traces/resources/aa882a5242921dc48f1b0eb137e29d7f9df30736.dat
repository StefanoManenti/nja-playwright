globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  Segment,
  workingOnBroadbandAtom,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class NewCustomer extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(10);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/customer/NewCustomerStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "newCustomer";
  }
  async isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return operativeMode !== OperativeMode.CHANGE_OFFER && !get(workingOnPanelStandaloneAtom) && (get(workingOnBroadbandAtom) || get(operativeModeEnabled$)) && await get(customerSegmentAtom) === Segment.RESID;
  }
  depends() {
    return [];
  }
  provides() {
    return [
      StepDependencies.NAME,
      StepDependencies.PHONE,
      StepDependencies.EMAIL,
      StepDependencies.TAX_ID,
      StepDependencies.IS_USER_VULNERABLE
    ];
  }
}
export const newCustomer = new NewCustomer();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFDOUIsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLG9CQUFvQkosS0FBSztBQUFBLEVBQS9CO0FBQUE7QUFDRUssb0JBQVcsSUFBSUosYUFBYSxFQUFFO0FBRTlCSyxnQkFBT0EsTUFBTSxPQUFPLG1CQUFtQjtBQUN2Q0MsNEJBQW1CTDtBQUFBQTtBQUFBQSxFQUVuQk0sV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFnQkMsU0FBU0MsS0FBYTtBQUNwQyxVQUFNQyxnQkFBZ0JELElBQUlmLGlCQUFpQjtBQUUzQyxXQUNFZ0Isa0JBQWtCakIsY0FBY2tCLGdCQUNoQyxDQUFDRixJQUFJWCw0QkFBNEIsTUFDaENXLElBQUlaLHNCQUFzQixLQUFLWSxJQUFJZCxxQkFBcUIsTUFDeEQsTUFBTWMsSUFBSWpCLG1CQUFtQixNQUFPSSxRQUFRZ0I7QUFBQUEsRUFFakQ7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxXQUFXO0FBQ1QsV0FBTztBQUFBLE1BQ0xaLGlCQUFpQmE7QUFBQUEsTUFDakJiLGlCQUFpQmM7QUFBQUEsTUFDakJkLGlCQUFpQmU7QUFBQUEsTUFDakJmLGlCQUFpQmdCO0FBQUFBLE1BQ2pCaEIsaUJBQWlCaUI7QUFBQUEsSUFBa0I7QUFBQSxFQUV2QztBQUNGO0FBRU8sYUFBTUMsY0FBYyxJQUFJakIsWUFBWSIsIm5hbWVzIjpbImN1c3RvbWVyU2VnbWVudEF0b20iLCJPcGVyYXRpdmVNb2RlIiwib3BlcmF0aXZlTW9kZUF0b20iLCJvcGVyYXRpdmVNb2RlRW5hYmxlZCQiLCJTZWdtZW50Iiwid29ya2luZ09uQnJvYWRiYW5kQXRvbSIsIndvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcEVycm9yQm91bmRhcnkiLCJTdGVwRGVwZW5kZW5jaWVzIiwiTmV3Q3VzdG9tZXIiLCJwcmlvcml0eSIsImxhenkiLCJXcmFwcGVyQ29tcG9uZW50IiwidG9TdHJpbmciLCJpc0luRmx1eCIsImdldCIsIm9wZXJhdGl2ZU1vZGUiLCJDSEFOR0VfT0ZGRVIiLCJSRVNJRCIsImRlcGVuZHMiLCJwcm92aWRlcyIsIk5BTUUiLCJQSE9ORSIsIkVNQUlMIiwiVEFYX0lEIiwiSVNfVVNFUl9WVUxORVJBQkxFIiwibmV3Q3VzdG9tZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsibmV3LWN1c3RvbWVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGN1c3RvbWVyU2VnbWVudEF0b20sXHJcbiAgT3BlcmF0aXZlTW9kZSxcclxuICBvcGVyYXRpdmVNb2RlQXRvbSxcclxuICBvcGVyYXRpdmVNb2RlRW5hYmxlZCQsXHJcbiAgU2VnbWVudCxcclxuICB3b3JraW5nT25Ccm9hZGJhbmRBdG9tLFxyXG4gIHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20sXHJcbn0gZnJvbSAnQG5hai13by9kYXRhLWFjY2Vzcyc7XHJcbmltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQgU3RlcEVycm9yQm91bmRhcnkgZnJvbSAnLi4vU3RlcEVycm9yQm91bmRhcnknO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcblxyXG5jbGFzcyBOZXdDdXN0b21lciBleHRlbmRzIFN0ZXAge1xyXG4gIHByaW9yaXR5ID0gbmV3IFN0ZXBQcmlvcml0eSgxMCk7XHJcblxyXG4gIGxhenkgPSAoKSA9PiBpbXBvcnQoJy4vTmV3Q3VzdG9tZXJTdGVwJyk7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAnbmV3Q3VzdG9tZXInO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICBjb25zdCBvcGVyYXRpdmVNb2RlID0gZ2V0KG9wZXJhdGl2ZU1vZGVBdG9tKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBvcGVyYXRpdmVNb2RlICE9PSBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUiAmJlxyXG4gICAgICAhZ2V0KHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20pICYmXHJcbiAgICAgIChnZXQod29ya2luZ09uQnJvYWRiYW5kQXRvbSkgfHwgZ2V0KG9wZXJhdGl2ZU1vZGVFbmFibGVkJCkpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlJFU0lEXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVwZW5kcygpIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgU3RlcERlcGVuZGVuY2llcy5OQU1FLFxyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLlBIT05FLFxyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLkVNQUlMLFxyXG4gICAgICBTdGVwRGVwZW5kZW5jaWVzLlRBWF9JRCxcclxuICAgICAgU3RlcERlcGVuZGVuY2llcy5JU19VU0VSX1ZVTE5FUkFCTEUsXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG5ld0N1c3RvbWVyID0gbmV3IE5ld0N1c3RvbWVyKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9jdXN0b21lci9uZXctY3VzdG9tZXIudHN4In0=