globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { useQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@tanstack_react-query.js?v=0189a8d1";
import __vite__cjsImport1_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useState = __vite__cjsImport1_react["useState"];
import { useDebounce } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/use-debounce.js?v=0189a8d1";
import { EGON_PASSWORD, EGON_URL_SUGGEST, EGON_USERNAME } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/_urls.ts";
const appKey = encodeURIComponent(`${EGON_USERNAME}@${EGON_PASSWORD}`);
const url = `${EGON_URL_SUGGEST}app_key=${appKey}&restrict_level=country&restrict_id=38000000001&query=`;
export async function suggestStreet(query, signal) {
  const response = await fetch(url + encodeURIComponent(query), {
    method: "GET",
    signal
  });
  if (response.status === 200) {
    try {
      const values = await response.json();
      return uniq(values, (x) => x.id);
    } catch (error) {
      return "SERVICE-ERROR";
    }
  }
  return "SERVICE-ERROR";
}
export function useSuggestStreet() {
  const [searchText, setSearchText] = useState("");
  const [searchTextDebounced] = useDebounce(searchText, 300);
  const query = useQuery({
    queryKey: [searchTextDebounced],
    queryFn: (context) => suggestStreet(searchTextDebounced, context.signal),
    enabled: searchTextDebounced.length > 2
  });
  return [query, setSearchText];
}
function uniq(a, getKey) {
  const seen = /* @__PURE__ */ new Set();
  const out = [];
  const len = a.length;
  for (let i = 0; i < len; i++) {
    const item = getKey(a[i]);
    if (!seen.has(item)) {
      seen.add(item);
      out.push(a[i]);
    }
  }
  return out;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGdCQUFnQjtBQUN6QixTQUFTQyxnQkFBZ0I7QUFDekIsU0FBU0MsbUJBQW1CO0FBQzVCLFNBQVNDLGVBQWVDLGtCQUFrQkMscUJBQXFCO0FBRy9ELE1BQU1DLFNBQVNDLG1CQUFtQixHQUFHRixhQUFhLElBQUlGLGFBQWEsRUFBRTtBQUNyRSxNQUFNSyxNQUFNLEdBQUdKLGdCQUFnQixXQUFXRSxNQUFNO0FBRWhELHNCQUFzQkcsY0FBY0MsT0FBZUMsUUFBc0I7QUFDdkUsUUFBTUMsV0FBVyxNQUFNQyxNQUFNTCxNQUFNRCxtQkFBbUJHLEtBQUssR0FBRztBQUFBLElBQzVESSxRQUFRO0FBQUEsSUFDUkg7QUFBQUEsRUFDRixDQUFDO0FBRUQsTUFBSUMsU0FBU0csV0FBVyxLQUFLO0FBQzNCLFFBQUk7QUFDRixZQUFNQyxTQUFVLE1BQU1KLFNBQVNLLEtBQUs7QUFDcEMsYUFBT0MsS0FBS0YsUUFBU0csT0FBTUEsRUFBRUMsRUFBRTtBQUFBLElBQ2pDLFNBQVNDLE9BQU87QUFDZCxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFHQSxTQUFPO0FBQ1Q7QUFFTyxnQkFBU0MsbUJBQW1CO0FBQ2pDLFFBQU0sQ0FBQ0MsWUFBWUMsYUFBYSxJQUFJdkIsU0FBUyxFQUFFO0FBQy9DLFFBQU0sQ0FBQ3dCLG1CQUFtQixJQUFJdkIsWUFBWXFCLFlBQVksR0FBRztBQUV6RCxRQUFNYixRQUFRVixTQUFTO0FBQUEsSUFDckIwQixVQUFVLENBQUNELG1CQUFtQjtBQUFBLElBQzlCRSxTQUFVQyxhQUFZbkIsY0FBY2dCLHFCQUFxQkcsUUFBUWpCLE1BQU07QUFBQSxJQUN2RWtCLFNBQVNKLG9CQUFvQkssU0FBUztBQUFBLEVBQ3hDLENBQUM7QUFFRCxTQUFPLENBQUNwQixPQUFPYyxhQUFhO0FBQzlCO0FBRUEsU0FBU04sS0FBV2EsR0FBUUMsUUFBcUI7QUFDL0MsUUFBTUMsT0FBTyxvQkFBSUMsSUFBTztBQUV4QixRQUFNQyxNQUFXO0FBQ2pCLFFBQU1DLE1BQU1MLEVBQUVEO0FBQ2QsV0FBU08sSUFBSSxHQUFHQSxJQUFJRCxLQUFLQyxLQUFLO0FBQzVCLFVBQU1DLE9BQU9OLE9BQU9ELEVBQUVNLENBQUMsQ0FBRTtBQUV6QixRQUFJLENBQUNKLEtBQUtNLElBQUlELElBQUksR0FBRztBQUNuQkwsV0FBS08sSUFBSUYsSUFBSTtBQUNiSCxVQUFJTSxLQUFLVixFQUFFTSxDQUFDLENBQUU7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7QUFDQSxTQUFPRjtBQUNUIiwibmFtZXMiOlsidXNlUXVlcnkiLCJ1c2VTdGF0ZSIsInVzZURlYm91bmNlIiwiRUdPTl9QQVNTV09SRCIsIkVHT05fVVJMX1NVR0dFU1QiLCJFR09OX1VTRVJOQU1FIiwiYXBwS2V5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidXJsIiwic3VnZ2VzdFN0cmVldCIsInF1ZXJ5Iiwic2lnbmFsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsInN0YXR1cyIsInZhbHVlcyIsImpzb24iLCJ1bmlxIiwieCIsImlkIiwiZXJyb3IiLCJ1c2VTdWdnZXN0U3RyZWV0Iiwic2VhcmNoVGV4dCIsInNldFNlYXJjaFRleHQiLCJzZWFyY2hUZXh0RGVib3VuY2VkIiwicXVlcnlLZXkiLCJxdWVyeUZuIiwiY29udGV4dCIsImVuYWJsZWQiLCJsZW5ndGgiLCJhIiwiZ2V0S2V5Iiwic2VlbiIsIlNldCIsIm91dCIsImxlbiIsImkiLCJpdGVtIiwiaGFzIiwiYWRkIiwicHVzaCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJzdWdnZXN0U3RyZWV0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZURlYm91bmNlIH0gZnJvbSAndXNlLWRlYm91bmNlJztcclxuaW1wb3J0IHsgRUdPTl9QQVNTV09SRCwgRUdPTl9VUkxfU1VHR0VTVCwgRUdPTl9VU0VSTkFNRSB9IGZyb20gJy4vX3VybHMnO1xyXG5pbXBvcnQgdHlwZSB7IEVnb25TdWdnZXN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5jb25zdCBhcHBLZXkgPSBlbmNvZGVVUklDb21wb25lbnQoYCR7RUdPTl9VU0VSTkFNRX1AJHtFR09OX1BBU1NXT1JEfWApO1xyXG5jb25zdCB1cmwgPSBgJHtFR09OX1VSTF9TVUdHRVNUfWFwcF9rZXk9JHthcHBLZXl9JnJlc3RyaWN0X2xldmVsPWNvdW50cnkmcmVzdHJpY3RfaWQ9MzgwMDAwMDAwMDEmcXVlcnk9YDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdWdnZXN0U3RyZWV0KHF1ZXJ5OiBzdHJpbmcsIHNpZ25hbD86IEFib3J0U2lnbmFsKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwgKyBlbmNvZGVVUklDb21wb25lbnQocXVlcnkpLCB7XHJcbiAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgc2lnbmFsOiBzaWduYWwsXHJcbiAgfSk7XHJcblxyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdmFsdWVzID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgRWdvblN1Z2dlc3Rpb25bXTtcclxuICAgICAgcmV0dXJuIHVuaXEodmFsdWVzLCAoeCkgPT4geC5pZCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gJ1NFUlZJQ0UtRVJST1InO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyB3aGF0IHNob3VsZCB3ZSBkbz8gSWYgdGhlIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUsIHdlIGNhbm5vdCBkbyB0aGlzIHN0ZXAuXHJcbiAgcmV0dXJuICdTRVJWSUNFLUVSUk9SJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1Z2dlc3RTdHJlZXQoKSB7XHJcbiAgY29uc3QgW3NlYXJjaFRleHQsIHNldFNlYXJjaFRleHRdID0gdXNlU3RhdGUoJycpO1xyXG4gIGNvbnN0IFtzZWFyY2hUZXh0RGVib3VuY2VkXSA9IHVzZURlYm91bmNlKHNlYXJjaFRleHQsIDMwMCk7XHJcblxyXG4gIGNvbnN0IHF1ZXJ5ID0gdXNlUXVlcnkoe1xyXG4gICAgcXVlcnlLZXk6IFtzZWFyY2hUZXh0RGVib3VuY2VkXSxcclxuICAgIHF1ZXJ5Rm46IChjb250ZXh0KSA9PiBzdWdnZXN0U3RyZWV0KHNlYXJjaFRleHREZWJvdW5jZWQsIGNvbnRleHQuc2lnbmFsKSxcclxuICAgIGVuYWJsZWQ6IHNlYXJjaFRleHREZWJvdW5jZWQubGVuZ3RoID4gMixcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIFtxdWVyeSwgc2V0U2VhcmNoVGV4dF0gYXMgY29uc3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuaXE8VCwgSz4oYTogVFtdLCBnZXRLZXk6IChhOiBUKSA9PiBLKSB7XHJcbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQ8Sz4oKTtcclxuXHJcbiAgY29uc3Qgb3V0OiBUW10gPSBbXTtcclxuICBjb25zdCBsZW4gPSBhLmxlbmd0aDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICBjb25zdCBpdGVtID0gZ2V0S2V5KGFbaV0hKTtcclxuXHJcbiAgICBpZiAoIXNlZW4uaGFzKGl0ZW0pKSB7XHJcbiAgICAgIHNlZW4uYWRkKGl0ZW0pO1xyXG4gICAgICBvdXQucHVzaChhW2ldISk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2FwaS9lZ29uL3N1Z2dlc3RTdHJlZXQudHMifQ==