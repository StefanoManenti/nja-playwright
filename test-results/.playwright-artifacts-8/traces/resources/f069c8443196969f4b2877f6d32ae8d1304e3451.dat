globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { getPrivateAreaCommonQuerystring, readPrivateAreaServiceResponse } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
export async function fetchListaConti(codiceContoDefault) {
  const logHash = generateOperationID();
  const response = await fetch(`${API}/contiServices/conti/${codiceContoDefault}?${getPrivateAreaCommonQuerystring(logHash)}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  const json = await readPrivateAreaServiceResponse(response);
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const listaConti = json;
  listaConti.conto.filter((conto) => conto.tipo === "ATTIVO");
  return {
    ...listaConti,
    conto: listaConti.conto.filter((conto) => (
      // Vogliamo solo i conti attivi
      conto.tipo === "ATTIVO" && // e che non siano ExtraCommodity
      !conto.orderCode && !conto.productTypeExtraCommodity && !conto.productNameExtraCommodity
    ))
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLEtBQUtDLDJCQUEyQjtBQUN6QyxTQUNFQyxpQ0FDQUMsc0NBQ0s7QUFDUCxTQUFTQyxxQ0FBcUM7QUFrRTlDLHNCQUFzQkMsZ0JBQWdCQyxvQkFBd0M7QUFDNUUsUUFBTUMsVUFBVU4sb0JBQW9CO0FBQ3BDLFFBQU1PLFdBQVcsTUFBTUMsTUFDckIsR0FBR1QsR0FBRyx3QkFBd0JNLGtCQUFrQixJQUFJSixnQ0FDbERLLE9BQ0YsQ0FBQyxJQUNEO0FBQUEsSUFDRUcsUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQQyxRQUFRO0FBQUEsSUFDVjtBQUFBLEVBQ0YsQ0FDRjtBQUVBLFFBQU1DLE9BQU8sTUFBTVYsK0JBQStCSyxRQUFRO0FBQzFELE1BQUlBLFNBQVNNLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUlWLDhCQUNSSSxTQUFTTyxZQUNUUixTQUNBQyxRQUNGO0FBQUEsRUFDRjtBQUVBLFFBQU1RLGFBQWFIO0FBQ25CRyxhQUFXQyxNQUFNQyxPQUFRRCxXQUFVQSxNQUFNRSxTQUFTLFFBQVE7QUFFMUQsU0FBTztBQUFBLElBQ0wsR0FBR0g7QUFBQUEsSUFDSEMsT0FBT0QsV0FBV0MsTUFBTUMsT0FDckJEO0FBQUFBO0FBQUFBLE1BRUNBLE1BQU1FLFNBQVM7QUFBQSxNQUVmLENBQUVGLE1BQThCRyxhQUNoQyxDQUFFSCxNQUE4QkksNkJBQ2hDLENBQUVKLE1BQThCSztBQUFBQSxLQUNwQztBQUFBLEVBQ0Y7QUFDRiIsIm5hbWVzIjpbIkFQSSIsImdlbmVyYXRlT3BlcmF0aW9uSUQiLCJnZXRQcml2YXRlQXJlYUNvbW1vblF1ZXJ5c3RyaW5nIiwicmVhZFByaXZhdGVBcmVhU2VydmljZVJlc3BvbnNlIiwiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJmZXRjaExpc3RhQ29udGkiLCJjb2RpY2VDb250b0RlZmF1bHQiLCJsb2dIYXNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJqc29uIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImxpc3RhQ29udGkiLCJjb250byIsImZpbHRlciIsInRpcG8iLCJvcmRlckNvZGUiLCJwcm9kdWN0VHlwZUV4dHJhQ29tbW9kaXR5IiwicHJvZHVjdE5hbWVFeHRyYUNvbW1vZGl0eSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJsaXN0YS1jb250aS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUEksIGdlbmVyYXRlT3BlcmF0aW9uSUQgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0UHJpdmF0ZUFyZWFDb21tb25RdWVyeXN0cmluZyxcclxuICByZWFkUHJpdmF0ZUFyZWFTZXJ2aWNlUmVzcG9uc2UsXHJcbn0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGlzdGFDb250aVJlc3BvbnNlIHtcclxuICBjb250bzogKENvbnRvQ29tbW9kaXR5IHwgQ29udG9FeHRyYUNvbW1vZGl0eSlbXTtcclxuICB0aXBvQ2xpZW50ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRvRXh0cmFDb21tb2RpdHkge1xyXG4gIGNvZGljZTogc3RyaW5nO1xyXG4gIGFsaWFzPzogTnVsbGFibGU8c3RyaW5nPjtcclxuICBzZWxlemlvbmF0bz86IE51bGxhYmxlPHN0cmluZz47XHJcbiAgdGlwbzogVGlwb0NvbnRvO1xyXG4gIGFsaWFzSXNCbGFuazogYm9vbGVhbjtcclxuICBpbmRpcml6em9Gb3JuaXR1cmE/OiBOdWxsYWJsZTxzdHJpbmc+O1xyXG4gIHJlc2lkZW50ZT86IE51bGxhYmxlPGJvb2xlYW4+O1xyXG4gIGNvbW1vZGl0eT86IG51bGw7XHJcbiAgZm9ybml0dXJlPzogTnVsbGFibGU8UHVudG9EaUZvcm5pdHVyYU9ialtdPjtcclxuICBkYXRhQXR0aXZhemlvbmU/OiBOdWxsYWJsZTxzdHJpbmc+O1xyXG4gIGluZGlyaXp6b0ZhdHR1cmF6aW9uZT86IE51bGxhYmxlPHN0cmluZz47XHJcbiAgcHJvZHVjdFR5cGVFeHRyYUNvbW1vZGl0eT86IE51bGxhYmxlPFByb2R1Y3RUeXBlRXh0cmFDb21tb2RpdHk+O1xyXG4gIG9yZGVyQ29kZTogc3RyaW5nO1xyXG4gIHByb2R1Y3ROYW1lRXh0cmFDb21tb2RpdHk/OiBOdWxsYWJsZTxzdHJpbmc+O1xyXG4gIGluZGlyaXp6b1NwZWRpemlvbmU/OiBOdWxsYWJsZTxzdHJpbmc+O1xyXG4gIHVzZXJNaWdyYXRlZEV4dHJhQ29tbW9kaXR5PzogYm9vbGVhbjtcclxuICBwcm9kb3R0b0NvbW1vZGl0eUNvbWJpbmF0YT86IE51bGxhYmxlPHtcclxuICAgIHByb2R1Y3ROYW1lOiBzdHJpbmc7XHJcbiAgICBjb21tb2RpdHlUeXBlOiAnRFVBTCcgfCAnR0FTJyB8ICdQT1dFUic7XHJcbiAgfT47XHJcbiAgZGV0dGFnbGlQYWdhbWVudG8/OiBOdWxsYWJsZTx1bmtub3duPjtcclxuICBkZXR0YWdsaVBvbGl6emE/OiBOdWxsYWJsZTx1bmtub3duPjtcclxuICBpbnRlZ3JhdGlvbklkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udG9Db21tb2RpdHkge1xyXG4gIGFsaWFzOiBzdHJpbmc7XHJcbiAgaW5kaXJpenpvRm9ybml0dXJhOiBzdHJpbmc7XHJcbiAgYWxpYXNJc0JsYW5rOiBib29sZWFuO1xyXG4gIGNvZGljZTogc3RyaW5nO1xyXG4gIHNlbGV6aW9uYXRvOiBzdHJpbmc7XHJcbiAgdGlwbzogc3RyaW5nO1xyXG4gIGNvbW1vZGl0eTogJ0RVQUwnIHwgJ0dBUycgfCAnUE9XRVInO1xyXG4gIHJlc2lkZW50ZTogYm9vbGVhbjtcclxuICBmb3JuaXR1cmU6IFB1bnRvRGlGb3JuaXR1cmFPYmpbXTtcclxuICBpbmRpcml6em9GYXR0dXJhemlvbmU6IHN0cmluZztcclxuICBkYXRhQXR0aXZhemlvbmU6IHN0cmluZztcclxuICBvcmRlckNvZGU6IHN0cmluZyB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRpcG9Db250byA9XHJcbiAgfCAnQVRUSVZPJ1xyXG4gIHwgJ0lOX0FUVElWQVpJT05FJ1xyXG4gIHwgJ0lOIEFUVElWQVpJT05FJ1xyXG4gIHwgJ0NFU1NBVE8nXHJcbiAgfCAnQU5OVUxMQVRPJztcclxuXHJcbmV4cG9ydCB0eXBlIFByb2R1Y3RUeXBlRXh0cmFDb21tb2RpdHkgPVxyXG4gIHwgbnVsbFxyXG4gIHwgJ1NNQVJUX0hPTUUnXHJcbiAgfCAnTUFOVVRFTlpJT05FJ1xyXG4gIHwgJ0FTU0lDVVJBWklPTkVfSU5URVJNRURJQVRBJ1xyXG4gIHwgJ0FTU0lDVVJBWklPTkVfQU5DSUxMQVJFJztcclxuXHJcbmV4cG9ydCB0eXBlIFB1bnRvRGlGb3JuaXR1cmFPYmogPSB1bmtub3duO1xyXG5cclxuZXhwb3J0IHR5cGUgTnVsbGFibGU8VD4gPSBUIHwgbnVsbCB8IHVuZGVmaW5lZDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaExpc3RhQ29udGkoY29kaWNlQ29udG9EZWZhdWx0OiB1bmRlZmluZWQgfCBzdHJpbmcpIHtcclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICBgJHtBUEl9L2NvbnRpU2VydmljZXMvY29udGkvJHtjb2RpY2VDb250b0RlZmF1bHR9PyR7Z2V0UHJpdmF0ZUFyZWFDb21tb25RdWVyeXN0cmluZyhcclxuICAgICAgbG9nSGFzaFxyXG4gICAgKX1gLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgY29uc3QganNvbiA9IGF3YWl0IHJlYWRQcml2YXRlQXJlYVNlcnZpY2VSZXNwb25zZShyZXNwb25zZSk7XHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICB0aHJvdyBuZXcgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IoXHJcbiAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQsXHJcbiAgICAgIGxvZ0hhc2gsXHJcbiAgICAgIHJlc3BvbnNlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbGlzdGFDb250aSA9IGpzb24gYXMgTGlzdGFDb250aVJlc3BvbnNlO1xyXG4gIGxpc3RhQ29udGkuY29udG8uZmlsdGVyKChjb250bykgPT4gY29udG8udGlwbyA9PT0gJ0FUVElWTycpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ubGlzdGFDb250aSxcclxuICAgIGNvbnRvOiBsaXN0YUNvbnRpLmNvbnRvLmZpbHRlcihcclxuICAgICAgKGNvbnRvKSA9PlxyXG4gICAgICAgIC8vIFZvZ2xpYW1vIHNvbG8gaSBjb250aSBhdHRpdmlcclxuICAgICAgICBjb250by50aXBvID09PSAnQVRUSVZPJyAmJlxyXG4gICAgICAgIC8vIGUgY2hlIG5vbiBzaWFubyBFeHRyYUNvbW1vZGl0eVxyXG4gICAgICAgICEoY29udG8gYXMgQ29udG9FeHRyYUNvbW1vZGl0eSkub3JkZXJDb2RlICYmXHJcbiAgICAgICAgIShjb250byBhcyBDb250b0V4dHJhQ29tbW9kaXR5KS5wcm9kdWN0VHlwZUV4dHJhQ29tbW9kaXR5ICYmXHJcbiAgICAgICAgIShjb250byBhcyBDb250b0V4dHJhQ29tbW9kaXR5KS5wcm9kdWN0TmFtZUV4dHJhQ29tbW9kaXR5XHJcbiAgICApIGFzIENvbnRvQ29tbW9kaXR5W10sXHJcbiAgfTtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3ByaXZhdGUtYXJlYS9saXN0YS1jb250aS50cyJ9