globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { BillMapper, CommodityMapper, OperativeModeMapper, PaymentMapper, PowerRateMapper } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/qs-mappers.ts";
import { Bill, OperativeMode, Payment, PowerRate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
const KEY_CODICE_PRODOTTO = "codiceProdotto";
const KEY_CODICE_CANALE = "codiceCanale";
const KEY_CODICE_TP_CANALE = "codiceTpCanale";
const KEY_COMMODITY = "commodity";
const KEY_POWER_RATE = "opzione";
const KEY_PAYMENT = "direct-debit";
const KEY_BILL = "bill-type";
const KEY_OPERATIVE_MODE = "salesProcess";
const KEY_CVT = "cvt";
const KEY_PRODUCT_PANEL = "panel";
const KEY_PRODUCT_BROADBAND = "fiber";
const KEY_DEV_MODE = "dev";
const KEY_NEW_PRODUCTS_MODE = "new-products";
const KEY_TEST_RESID_MODE = "abt";
const KEY_TEST_FROM_CHATBOT_MODE = "abc";
const KEY_TEST_BUSINESS_MODE = "abu";
const KEY_TEST_NEW_ACTIVATION = "aba";
const KEY_SEGMENT = "segment";
const searchParams = new URLSearchParams(document.location.search);
export function restoreWantsCommodityFromUrl() {
  return searchParams.has(KEY_COMMODITY) || !restorePanelFromUrl() && !restoreBroadbandFromUrl();
}
export function restorePowerFromUrl() {
  const commodity = new CommodityMapper();
  commodity.qs = searchParams.get(KEY_COMMODITY);
  return commodity.value?.power || false;
}
export function restoreGasFromUrl() {
  const commodity = new CommodityMapper();
  commodity.qs = searchParams.get(KEY_COMMODITY);
  return commodity.value?.gas || false;
}
export function restoreBroadbandFromUrl() {
  return searchParams.has(KEY_PRODUCT_BROADBAND);
}
export function restoreOperativeModeFromUrl() {
  const operativeMode = new OperativeModeMapper();
  operativeMode.qs = searchParams.get(KEY_OPERATIVE_MODE);
  return operativeMode.value || OperativeMode.NOT_SELECTED;
}
export function restorePowerRateFromUrl() {
  const powerRate = new PowerRateMapper();
  powerRate.qs = searchParams.get(KEY_POWER_RATE);
  return powerRate.value || PowerRate.NOT_SELECTED;
}
export function restorePaymentFromUrl() {
  const payment = new PaymentMapper();
  payment.qs = searchParams.get(KEY_PAYMENT);
  return payment.value || Payment.NOT_SELECTED;
}
export function restoreBillFromUrl() {
  const bill = new BillMapper();
  bill.qs = searchParams.get(KEY_BILL);
  return bill.value || Bill.NOT_SELECTED;
}
export function restoreOfferFromUrl() {
  const offer = {
    code: searchParams.get(KEY_CODICE_PRODOTTO) ?? "",
    channel: searchParams.get(KEY_CODICE_CANALE) ?? "",
    touchpoint: searchParams.get(KEY_CODICE_TP_CANALE) ?? ""
  };
  return offer.code && offer || {
    code: "",
    channel: "",
    touchpoint: ""
  };
}
export function restoreCvtFromUrl() {
  return searchParams.get(KEY_CVT) || "";
}
export function restorePanelFromUrl() {
  return searchParams.has(KEY_PRODUCT_PANEL);
}
export function restoreDevModeFromUrl() {
  return hasSearchParamFromUrl(KEY_DEV_MODE);
}
export function restoreTestResidModeFromUrl() {
  return hasSearchParamFromUrl(KEY_TEST_RESID_MODE) || hasSearchParamFromUrl(KEY_TEST_FROM_CHATBOT_MODE);
}
export function restoreTestBusinessModeFromUrl() {
  return hasSearchParamFromUrl(KEY_TEST_BUSINESS_MODE);
}
export function restoreTestNewActivationsFromUrl() {
  return hasSearchParamFromUrl(KEY_TEST_NEW_ACTIVATION);
}
export function restoreNewProductsFromUrl() {
  return hasSearchParamFromUrl(KEY_NEW_PRODUCTS_MODE);
}
export function getSearchParamsFromUrl() {
  return searchParams;
}
export function hasSearchParamFromUrl(key) {
  return searchParams.has(key);
}
export function saveToUrl(state, searchParams2) {
  const offer = state.commodities?.offer;
  if (offer) {
    searchParams2.set(KEY_CODICE_PRODOTTO, offer.code);
    searchParams2.set(KEY_CODICE_CANALE, offer.channel);
    searchParams2.set(KEY_CODICE_TP_CANALE, offer.touchpoint);
  }
  if (state.commodities?.operativeMode) {
    const operativeMode = new OperativeModeMapper(state.commodities.operativeMode);
    searchParams2.set(KEY_OPERATIVE_MODE, operativeMode.qs);
  }
  if (state.commodities?.power != null && state.commodities?.gas != null) {
    const commodity = new CommodityMapper({
      power: state.commodities.power,
      gas: state.commodities.gas
    });
    searchParams2.set(KEY_COMMODITY, commodity.qs);
  }
  if (state.commodities?.powerRate) {
    const powerRate = new PowerRateMapper(state.commodities.powerRate);
    searchParams2.set(KEY_POWER_RATE, powerRate.qs);
  }
  if (state.commodities?.payment) {
    const payment = new PaymentMapper(state.commodities.payment);
    searchParams2.set(KEY_PAYMENT, payment.qs);
  }
  if (state.commodities?.bill) {
    const bill = new BillMapper(state.commodities.bill);
    searchParams2.set(KEY_BILL, bill.qs);
  }
  if (state.segment) {
    searchParams2.set(KEY_SEGMENT, state.segment === Segment.SMALL ? "biz" : "res");
  }
}
export function getPassTroughQs() {
  const params = new URLSearchParams(window.location.search);
  const qs = {};
  if (params.has("app")) {
    qs["app"] = params.get("app") || "";
  }
  if (params.has("safe-area")) {
    qs["safe-area"] = params.get("safe-area") || "";
  }
  return qs;
}
export function getLeadChannelFromUrl() {
  const params = new URLSearchParams(window.location.search);
  return params.get("leadChannel");
}

//# sourceMappingURL=data:application/json;base64,