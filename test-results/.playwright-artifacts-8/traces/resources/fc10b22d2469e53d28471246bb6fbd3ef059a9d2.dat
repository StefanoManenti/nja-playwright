globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceBadInputError, ServiceExternalBadOutputError, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentContractInfoAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { areCheckBypassed } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
export var StatoPod = /* @__PURE__ */ ((StatoPod2) => {
  StatoPod2["Disalimentato"] = "DISALIMENTATO";
  StatoPod2["Libero"] = "LIBERO";
  StatoPod2["NonAttivabile"] = "NON ATTIVABILE";
  StatoPod2["Inesistente"] = "INESISTENTE";
  StatoPod2["Attivo"] = "ATTIVO";
  StatoPod2["Errore"] = "ERRORE";
  StatoPod2["Altro_Fornitore"] = "ATTIVO_ALTRO_FORNITORE";
  return StatoPod2;
})(StatoPod || {});
const url = `${API}/webOrderCommonServices/checkPod`;
async function checkPod(payload) {
  if (areCheckBypassed()) {
    return {
      status: "INESISTENTE" /* Inesistente */
    };
  }
  const logHash = generateOperationID();
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      POD: payload.pod,
      source: "SALESUP",
      codiceAgente: "FAKE001002",
      logHash,
      idLead: payload.idLead,
      plicoCode: payload.plicoCode,
      salesProcessForLog: payload.salesProcessForLog
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash);
  }
  const data = await response.json();
  switch (data.esito) {
    case "KO_RESPONSE_NULL":
      throw new ServiceExternalBadOutputError(data.esito, logHash, data);
    case "KO_BAD_REQUEST":
    case "KO_INPUT_NON_VALIDO":
      throw new ServiceBadInputError(data.esito, logHash, data);
    case "OK":
      break;
    default:
      throw new ServiceUnhandledResponseError(data.esito, logHash, data);
  }
  const stato = data.stato;
  if (["DISALIMENTATO", "LIBERO", "NON ATTIVABILE", "INESISTENTE", "ATTIVO", "ATTIVO_ALTRO_FORNITORE", "ERRORE"].indexOf(stato) === -1) {
    throw new ServiceUnhandledResponseError(data.esito, logHash, data);
  }
  return {
    kw: data.ultimaPotDisp,
    status: stato,
    logHash
  };
}
export const atomWithCheckPod = (pod) => {
  return atomWithErrorReset(async (get) => {
    const contract = get(currentContractInfoAtom);
    const idLead = contract.idLead;
    const plicoCode = await contract.plicoCode;
    const salesProcessForLog = await contract.salesProcessForLog;
    return checkPod({
      idLead,
      plicoCode,
      salesProcessForLog,
      pod
    });
  });
};

//# sourceMappingURL=data:application/json;base64,