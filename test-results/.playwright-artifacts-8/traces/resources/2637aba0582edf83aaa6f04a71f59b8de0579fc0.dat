globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { BadInputError, equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithLazy } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { infoUtenteAtom, isLoggedAtom, mustBeLogged$, useLoggedCustomer$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/customer/index.ts";
import { initC360ServiceAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/init-c360.ts";
import { atomWithCheckD365 } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkD365.ts";
import { atomWithCheckEmail } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/verificaIndirizzoEmail.ts";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { ChangeOfferCustomer } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/ChangeOfferCustomer.ts";
import { ExistingCustomer } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/ExistingCustomer.ts";
import { NewCustomer } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/NewCustomer.ts";
import { updateCustomerFromD365 } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/updateCustomerFromD365.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { offerSegmentAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/offer-atoms.ts";
import { TransferType, transferTypeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/transfer.ts";
import { atomWithNested } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/utils/atom-with-nested.ts";
export const newCustomerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\customer-atoms.ts/newCustomerAtom", atomWithLazy(() => new NewCustomer(offerSegmentAtom)));
newCustomerAtom.debugLabel = "newCustomerAtom";
newCustomerAtom.debugLabel = "newCustomerAtom";
export const loggedCustomerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\customer-atoms.ts/loggedCustomerAtom", atom(async (get) => {
  const isLogged = await get(isLoggedAtom);
  const infoUtente = await get(infoUtenteAtom);
  if (!isLogged || typeof infoUtente.data === "string") {
    return;
  }
  const operativeMode = get(operativeModeAtom);
  if (equals(operativeMode, OperativeMode.CHANGE_OFFER)) {
    return new ChangeOfferCustomer(infoUtente.data);
  }
  const initC360 = await get(initC360ServiceAtom);
  const {
    codiceCliente,
    codiceContoDefault,
    tipoUtente
  } = initC360;
  if (codiceCliente) {
    return new ExistingCustomer(codiceCliente, codiceContoDefault, tipoUtente === "PMI" ? Segment.SMALL : Segment.RESID);
  }
}));
loggedCustomerAtom.debugLabel = "loggedCustomerAtom";
function getCheckD365Request(params) {
  if (params.segment === Segment.SMALL) {
    const {
      email: email2,
      taxId: taxId2,
      vatNumber
    } = params;
    if (!(taxId2 && vatNumber && email2)) {
      throw new BadInputError("taxId && givenName && familyName && email");
    }
    return {
      segmento: Segment.SMALL,
      email: email2,
      codiceFiscale: taxId2,
      partitaIva: vatNumber
    };
  }
  const {
    givenName,
    familyName,
    email,
    taxId
  } = params;
  if (!(taxId && givenName && familyName && email)) {
    throw new BadInputError("taxId && givenName && familyName && email");
  }
  return {
    segmento: Segment.RESID,
    nome: givenName,
    cognome: familyName,
    email,
    codiceFiscale: taxId
  };
}
export const customerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\customer-atoms.ts/customerAtom", atom(async (get) => {
  if (get(mustBeLogged$) || get(useLoggedCustomer$)) {
    const existingCustomer = await get(loggedCustomerAtom);
    if (existingCustomer) {
      return existingCustomer;
    }
  }
  return get(newCustomerAtom);
}, async (get, set, params) => {
  const request = getCheckD365Request(params);
  const response = await get(atomWithCheckD365({
    ...request,
    saltaCreditCheck: get(saltaCreditCheckAtom)
  }));
  const customer = get(newCustomerAtom);
  updateCustomerFromD365(set, customer, request, response);
  if (response.master === "Prospect" && response.email === request.email) {
    await get(atomWithCheckEmail({
      email: request.email
    }));
  }
  if (response.email !== request.email) {
    return {
      emailChanged: response.email
    };
  }
  return {};
}));
customerAtom.debugLabel = "customerAtom";
export const customerTypeAtom = atomWithNested(customerAtom, "type");
export const customerCodeAtom = atomWithNested(customerAtom, "customerCode");
export const customerSegmentAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\customer-atoms.ts/customerSegmentAtom", atom(async (get) => {
  const customer = await get(customerAtom);
  return get(customer.segment);
}));
customerSegmentAtom.debugLabel = "customerSegmentAtom";
const saltaCreditCheckAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\customer-atoms.ts/saltaCreditCheckAtom", atom((get) => {
  return get(operativeModeAtom) === OperativeMode.TRANSFER && get(transferTypeAtom) === TransferType.MORTIS_CAUSA;
}));
saltaCreditCheckAtom.debugLabel = "saltaCreditCheckAtom";

//# sourceMappingURL=data:application/json;base64,