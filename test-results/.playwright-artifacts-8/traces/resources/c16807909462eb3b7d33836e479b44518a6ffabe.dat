import.meta.env = {"BASE_URL": "/", "DEV": true, "MODE": "development", "PROD": false, "SSR": false};globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { tryAsyncOrF } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { StepsGraph } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/lib/StepsGraph.ts";
export async function findAsync(array, predicate) {
  for (const item of array) {
    if (await predicate(item)) {
      return item;
    }
  }
  return void 0;
}
export async function filterAsync(array, predicate) {
  const results = await Promise.all(array.map((item) => {
    return predicate(item);
  }));
  return array.filter((_, i) => results[i]);
}
export function getStepsCollectionAtoms(store, steps, handleNoStep) {
  async function getOrderedSteps(_steps = steps) {
    const array = Array.from(_steps);
    const graph = new StepsGraph(await filterAsync(array, (step) => store.get(step.isInFluxAtom)), store.get);
    return graph.getSortedSteps();
  }
  async function getProgress(orderedSteps, currentStep) {
    const totalSteps = await filterAsync(orderedSteps, (step) => store.get(step.countOnTotalProgressAtom));
    const totalCount = totalSteps.length;
    const currentIndex = orderedSteps.findIndex((s) => s === currentStep);
    const doneSteps = await filterAsync(orderedSteps.slice(0, currentIndex), (step) => store.get(step.countOnCurrentProgressAtom));
    const doneCount = doneSteps.length + 1;
    if (import.meta.env.DEV) {
      console.log(`Progress:
${doneSteps} / ${totalSteps}`);
    }
    return doneCount / totalCount * 100;
  }
  async function getInitialState() {
    const orderedSteps = await getOrderedSteps();
    let index = 0;
    let step = orderedSteps[index];
    while (step && !await store.get(step.canBeTheNextSkipIfDoneAtom)) {
      index += 1;
      step = orderedSteps[index];
    }
    if (step) step.skipIfDone = false;
    return {
      step,
      direction: 0,
      progress: await getProgress(orderedSteps, step)
    };
  }
  async function getNextStep(state, increment, handleNoStep2) {
    if (state.step == null) {
      return state;
    }
    async function calculateNextStep(steps2, currentStep, canBeTheNext, incrementWhen = "before") {
      let index = steps2.findIndex((s) => s === currentStep);
      if (index === -1) {
        console.warn(`STEPS COLLECTION STATE ERROR step ${currentStep} not found`);
        index = 0;
      }
      const stepToDo = await findAsync(steps2.slice(0, index), async (step3) => store.get(step3.isAvailableAtom) && store.get(step3.toDoAtom));
      if (stepToDo) {
        console.log(`Step "${stepToDo}" is seen because is not done.`);
        return stepToDo;
      }
      if (incrementWhen === "before") {
        index += increment;
      }
      let step2 = steps2[index];
      while (step2 && !await canBeTheNext(step2)) {
        index += increment;
        step2 = steps2[index];
      }
      return step2;
    }
    const orderedSteps = await getOrderedSteps();
    let step;
    let subflow = state.subflow;
    if (subflow) {
      const masterStep = subflow.masterStep;
      const index = orderedSteps.findIndex((s) => s === masterStep);
      const comunqueSarannoVistiDopo = orderedSteps.slice(index);
      step = await calculateNextStep(await getOrderedSteps(subflow.steps), state.step, async (step2) => !comunqueSarannoVistiDopo.includes(step2) && await store.get(step2.canBeTheNextAtom));
      const subFlowIsFinished = step == null;
      if (subFlowIsFinished) {
        step = await calculateNextStep(orderedSteps, masterStep, (step2) => store.get(step2.canBeTheNextSkipIfDoneAtom), "after");
        subflow = void 0;
      }
    } else {
      step = await calculateNextStep(orderedSteps, state.step, (step2) => store.get(step2.canBeTheNextSkipIfDoneAtom));
    }
    if (step == null) {
      setTimeout(() => handleNoStep2(increment), 0);
      return state;
    }
    if (step) step.skipIfDone = false;
    return {
      ...state,
      step,
      direction: increment,
      progress: await getProgress(orderedSteps, step),
      subflow
    };
  }
  async function getEditStep(state, data) {
    const orderedSteps = await getOrderedSteps();
    const step = await findAsync(orderedSteps, async (step2) => step2.provides(store.get).includes(data) && await store.get(step2.canBeEditedAtom));
    if (step == null) {
      throw Error(`No steps available for edit "${data}"`);
    }
    return startSubflow(state, new StepsGraph(orderedSteps, store.get).getDipendentiRicorsivo(step));
  }
  async function startSubflow(state, steps2) {
    if (state.step == null) {
      return state;
    }
    const orderedSteps = await getOrderedSteps();
    const currentStep = state.step;
    const orderedSubSteps = await getOrderedSteps(steps2);
    const step = orderedSubSteps[0];
    const lastIndex = orderedSteps.findIndex((s) => s === currentStep);
    const currentIndex = orderedSteps.findIndex((s) => s === step);
    const direction = currentIndex >= lastIndex ? 1 : -1;
    if (step) step.skipIfDone = false;
    return {
      ...state,
      step,
      direction,
      progress: await getProgress(orderedSteps, step),
      subflow: {
        steps: steps2,
        masterStep: state.step
      }
    };
  }
  function getAtom(getState) {
    return atom(async () => {
      const state = await getState();
      console.log("STEPS COLLECTION STATE", state);
      const handleError = (error) => ({
        ...state,
        error
      });
      return {
        error: state.error,
        currentStep: state.step,
        lastDirection: state.direction,
        progress: state.progress,
        nextStepAtom: (increment = 1) => getAtom(() => tryAsyncOrF(getNextStep(state, increment, handleNoStep), handleError)),
        editStepAtom: (data) => getAtom(() => tryAsyncOrF(getEditStep(state, data), handleError)),
        startSubflowAtom: (steps2) => getAtom(() => tryAsyncOrF(startSubflow(state, steps2), handleError)),
        clearErrorAtom: () => getAtom(async () => {
          const {
            error,
            ...stateWithoutError
          } = state;
          return stateWithoutError;
        })
      };
    });
  }
  return getAtom(getInitialState);
}

//# sourceMappingURL=data:application/json;base64,