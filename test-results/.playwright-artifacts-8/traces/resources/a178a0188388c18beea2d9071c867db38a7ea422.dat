globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { tryOr } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { getQuerystringFromAnswersGas, getQuerystringFromAnswersPower } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/activation-questions.tsx";
import { gasAtom, operativeModeAtom, powerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { getSearchParamsFromUrl } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
import { tsActivationGas$, tsActivationPower$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { TipoTroubleshooting } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/types.ts";
function cleanQs(qs) {
  return {
    contatorePresente: cleanQSItem(qs.get("contatorePresente")),
    attaccoPresente: cleanQSItem(qs.get("attaccoPresente")),
    pdrPresente: cleanQSItem(qs.get("pdrPresente")),
    impiantoModificato: cleanQSItem(qs.get("impiantoModificato")),
    aperto: cleanQSItem(qs.get("aperto")),
    predisposizioneImpianto: cleanQSItem(qs.get("predisposizioneImpianto"))
  };
}
function cleanQSItem(value) {
  if (value == null) {
    throw Error("Un parametro obbligatorio non Ã¨ stato passato.");
  }
  if (value === "null" || value === "true" || value === "false") {
    return JSON.parse(value);
  }
  throw Error("Un parametro obbligatorio non ha un valore valido.");
}
function getTipoTroubleShootingPower(qs) {
  const checkNull = qs.attaccoPresente == null && qs.impiantoModificato == null && qs.pdrPresente == null;
  if (!checkNull) {
    throw Error("attaccoPresente, impiantoModificato, pdrPresente dovrebbero essere null per una fornitura POWER");
  }
  if (qs.contatorePresente && qs.aperto && qs.predisposizioneImpianto == null) {
    return "TROUBLESHOOTING_VOLTURA";
  } else if (qs.contatorePresente && !qs.aperto && qs.predisposizioneImpianto == null) {
    return TipoTroubleshooting.PowerS01;
  } else if (!qs.contatorePresente && qs.aperto == null && !qs.predisposizioneImpianto) {
    return TipoTroubleshooting.PowerN02;
  } else if (!qs.contatorePresente && qs.aperto == null && qs.predisposizioneImpianto) {
    return TipoTroubleshooting.PowerA01;
  } else if (qs.contatorePresente && !qs.aperto && qs.predisposizioneImpianto) {
    return TipoTroubleshooting.PowerA01;
  }
  throw Error("Impossibile individuare il tipo troubleshooting.");
}
function getTipoTroubleShootingGas(qs) {
  const checkNull = qs.predisposizioneImpianto == null;
  if (!checkNull) {
    throw Error("predisposizioneImpianto dovrebbe essere null per una fornitura GAS");
  }
  if (qs.contatorePresente && qs.aperto && qs.attaccoPresente == null && qs.impiantoModificato == null && qs.pdrPresente == null) {
    return "TROUBLESHOOTING_VOLTURA";
  } else if (qs.contatorePresente && !qs.aperto && qs.attaccoPresente == null && qs.impiantoModificato && qs.pdrPresente == null) {
    return TipoTroubleshooting.GasA40_c;
  } else if (qs.contatorePresente && !qs.aperto && qs.attaccoPresente == null && !qs.impiantoModificato && qs.pdrPresente == null) {
    return TipoTroubleshooting.GasA01_c;
  } else if (!qs.contatorePresente && qs.aperto == null && !qs.attaccoPresente && qs.impiantoModificato == null && qs.pdrPresente == null) {
    return TipoTroubleshooting.GasPN1;
  } else if (!qs.contatorePresente && qs.aperto == null && qs.attaccoPresente && qs.impiantoModificato && qs.pdrPresente) {
    return TipoTroubleshooting.GasA40_n;
  } else if (!qs.contatorePresente && qs.aperto == null && qs.attaccoPresente && !qs.impiantoModificato && qs.pdrPresente) {
    return TipoTroubleshooting.GasA01_n;
  } else if (!qs.contatorePresente && qs.aperto == null && qs.attaccoPresente && qs.impiantoModificato == null && !qs.pdrPresente) {
    return TipoTroubleshooting.GasPN1_;
  }
  throw Error("Impossibile individuare il tipo troubleshooting.");
}
export const tipoTroubleshootingGas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/tipoTroubleshootingGas$", atom((get) => {
  const operativeMode = get(operativeModeAtom);
  if (operativeMode !== OperativeMode.NEW_ACTIVATION) {
    return;
  }
  if (!get(gasAtom)) {
    return;
  }
  return tryOr(() => getTipoTroubleShootingGas(cleanQs(getSearchParamsFromUrl()))) || tryOr(() => getTipoTroubleShootingGas(cleanQs(getQuerystringFromAnswersGas(get(tsActivationGas$)))));
}));
tipoTroubleshootingGas$.debugLabel = "tipoTroubleshootingGas$";
export const tipoTroubleshootingPower$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/tipoTroubleshootingPower$", atom((get) => {
  const operativeMode = get(operativeModeAtom);
  if (operativeMode !== OperativeMode.NEW_ACTIVATION) {
    return;
  }
  if (!get(powerAtom)) {
    return;
  }
  return tryOr(() => getTipoTroubleShootingPower(cleanQs(getSearchParamsFromUrl()))) || tryOr(() => getTipoTroubleShootingPower(cleanQs(getQuerystringFromAnswersPower(get(tsActivationPower$)))));
}));
tipoTroubleshootingPower$.debugLabel = "tipoTroubleshootingPower$";
export const tipoTroubleshooting$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/tipoTroubleshooting$", atom((get) => {
  const operativeMode = get(operativeModeAtom);
  if (operativeMode !== OperativeMode.NEW_ACTIVATION) {
    return;
  }
  const power = !!get(powerAtom);
  const gas = !!get(gasAtom);
  if (power && gas) {
    return;
  }
  return power ? get(tipoTroubleshootingPower$) : get(tipoTroubleshootingGas$);
}));
tipoTroubleshooting$.debugLabel = "tipoTroubleshooting$";
export const overriddenTipoTroubleshootingPower$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/overriddenTipoTroubleshootingPower$", atom());
overriddenTipoTroubleshootingPower$.debugLabel = "overriddenTipoTroubleshootingPower$";
export const overriddenTipoTroubleshootingGas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/overriddenTipoTroubleshootingGas$", atom());
overriddenTipoTroubleshootingGas$.debugLabel = "overriddenTipoTroubleshootingGas$";
export const tipoTroubleshootingCalcolato$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\activations\\tipo-troubleshooting.ts/tipoTroubleshootingCalcolato$", atom(async (get) => {
  const power = get(powerAtom);
  const gas = get(gasAtom);
  if (power && gas) {
    return;
  }
  const tipoTroubleshooting = get(tipoTroubleshooting$);
  if (!tipoTroubleshooting) {
    return;
  }
  if (power) {
    const overridden = get(overriddenTipoTroubleshootingPower$);
    if (overridden) {
      return overridden;
    }
  }
  if (gas) {
    const overridden = get(overriddenTipoTroubleshootingGas$);
    if (overridden) {
      return overridden;
    }
  }
  return tipoTroubleshooting;
}));
tipoTroubleshootingCalcolato$.debugLabel = "tipoTroubleshootingCalcolato$";

//# sourceMappingURL=data:application/json;base64,