globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { tryAsyncOr } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { offer$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/products-collection/index.ts";
import { offerNameAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/index.ts";
import { gasAtom, offerIdAtom, powerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
export const bulkOrderOffer$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\offer.ts/bulkOrderOffer$", atom((get) => {
  const offer = get(offerIdAtom);
  const data = {
    productCode: offer.code,
    conventionCode: offer.channel,
    tpCanale: offer.touchpoint
  };
  return data;
}, (get, set, args) => {
  if (args.productCode && args.conventionCode && args.tpCanale) set(offerIdAtom, {
    code: args.productCode,
    channel: args.conventionCode,
    touchpoint: args.tpCanale
  });
}));
bulkOrderOffer$.debugLabel = "bulkOrderOffer$";
export const bulkOrderOfferInfo$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\offer.ts/bulkOrderOfferInfo$", atom(async (get) => {
  const product = await tryAsyncOr(get(offer$));
  const title = await tryAsyncOr(get(offerNameAtom));
  const power = get(powerAtom);
  const gas = get(gasAtom);
  const info = {
    productTitle: title,
    cpqPower: product?.power?.productId,
    cpqGas: product?.gas?.productId,
    options: {
      greenPower: power && product?.power?.green ? "Y" : "N",
      greenGas: gas && product?.gas?.green ? "Y" : "N",
      defaultGreenPower: power && product?.power?.default_green,
      defaultGreenGas: gas && product?.gas?.default_green
    }
  };
  return info;
}));
bulkOrderOfferInfo$.debugLabel = "bulkOrderOfferInfo$";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGtCQUFrQjtBQUMzQixTQUFTQyxZQUFZO0FBRXJCLFNBQVNDLGNBQWM7QUFDdkIsU0FBU0MscUJBQXFCO0FBQzlCLFNBQ0VDLFNBQ0FDLGFBQ0FDLGlCQUNLO0FBUVAsYUFBQUMsa0JBQUFDLFdBQUFDLGVBQUFDLElBQUEsa0lBQTBEVCxLQUN2RFMsU0FBUTtBQUNQLFFBQU1DLFFBQVFELElBQUlMLFdBQVc7QUFFN0IsUUFBTU8sT0FBYTtBQUFBLElBQ2pCQyxhQUFhRixNQUFNRztBQUFBQSxJQUNuQkMsZ0JBQWdCSixNQUFNSztBQUFBQSxJQUN0QkMsVUFBVU4sTUFBTU87QUFBQUEsRUFDbEI7QUFFQSxTQUFPTjtBQUNULEdBQ0EsQ0FBQ0YsS0FBS1MsS0FBS0MsU0FBZTtBQUN4QixNQUFJQSxLQUFLUCxlQUFlTyxLQUFLTCxrQkFBa0JLLEtBQUtILFNBQ2xERSxLQUFJZCxhQUFhO0FBQUEsSUFDZlMsTUFBTU0sS0FBS1A7QUFBQUEsSUFDWEcsU0FBU0ksS0FBS0w7QUFBQUEsSUFDZEcsWUFBWUUsS0FBS0g7QUFBQUEsRUFDbkIsQ0FBQztBQUNMLENBQ0YsQ0FBQztBQUFDVixnQkFBQWMsYUFBQTtBQUlGLGFBQUFDLHNCQUFBZCxXQUFBQyxlQUFBQyxJQUFBLHNJQUFtQ1QsS0FBSyxPQUFPUyxRQUFRO0FBQ3JELFFBQU1hLFVBQVUsTUFBTXZCLFdBQVdVLElBQUlSLE1BQU0sQ0FBQztBQUM1QyxRQUFNc0IsUUFBUSxNQUFNeEIsV0FBV1UsSUFBSVAsYUFBYSxDQUFDO0FBRWpELFFBQU1zQixRQUFRZixJQUFJSixTQUFTO0FBQzNCLFFBQU1vQixNQUFNaEIsSUFBSU4sT0FBTztBQUV2QixRQUFNdUIsT0FBYTtBQUFBLElBQ2pCQyxjQUFjSjtBQUFBQSxJQUNkSyxVQUFVTixTQUFTRSxPQUFPSztBQUFBQSxJQUMxQkMsUUFBUVIsU0FBU0csS0FBS0k7QUFBQUEsSUFDdEJFLFNBQVM7QUFBQSxNQUNQQyxZQUFZUixTQUFTRixTQUFTRSxPQUFPUyxRQUFRLE1BQU07QUFBQSxNQUNuREMsVUFBVVQsT0FBT0gsU0FBU0csS0FBS1EsUUFBUSxNQUFNO0FBQUEsTUFDN0NFLG1CQUFtQlgsU0FBU0YsU0FBU0UsT0FBT1k7QUFBQUEsTUFDNUNDLGlCQUFpQlosT0FBT0gsU0FBU0csS0FBS1c7QUFBQUEsSUFDeEM7QUFBQSxFQUNGO0FBRUEsU0FBT1Y7QUFDVCxDQUFDLENBQUM7QUFBQ0wsb0JBQUFELGFBQUEiLCJuYW1lcyI6WyJ0cnlBc3luY09yIiwiYXRvbSIsIm9mZmVyJCIsIm9mZmVyTmFtZUF0b20iLCJnYXNBdG9tIiwib2ZmZXJJZEF0b20iLCJwb3dlckF0b20iLCJidWxrT3JkZXJPZmZlciQiLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJvZmZlciIsImRhdGEiLCJwcm9kdWN0Q29kZSIsImNvZGUiLCJjb252ZW50aW9uQ29kZSIsImNoYW5uZWwiLCJ0cENhbmFsZSIsInRvdWNocG9pbnQiLCJzZXQiLCJhcmdzIiwiZGVidWdMYWJlbCIsImJ1bGtPcmRlck9mZmVySW5mbyQiLCJwcm9kdWN0IiwidGl0bGUiLCJwb3dlciIsImdhcyIsImluZm8iLCJwcm9kdWN0VGl0bGUiLCJjcHFQb3dlciIsInByb2R1Y3RJZCIsImNwcUdhcyIsIm9wdGlvbnMiLCJncmVlblBvd2VyIiwiZ3JlZW4iLCJncmVlbkdhcyIsImRlZmF1bHRHcmVlblBvd2VyIiwiZGVmYXVsdF9ncmVlbiIsImRlZmF1bHRHcmVlbkdhcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJvZmZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlBc3luY09yIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHR5cGUgeyBNb25nb0xlYWQgfSBmcm9tICcuLi8uLi8uLi9hcGkvbGVhZCc7XHJcbmltcG9ydCB7IG9mZmVyJCB9IGZyb20gJy4uLy4uLy4uL2FwaS9wcm9kdWN0cy1jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgb2ZmZXJOYW1lQXRvbSB9IGZyb20gJy4uLy4uLy4uL29mZmVydGEnO1xyXG5pbXBvcnQge1xyXG4gIGdhc0F0b20sXHJcbiAgb2ZmZXJJZEF0b20sXHJcbiAgcG93ZXJBdG9tLFxyXG59IGZyb20gJy4uLy4uLy4uL3Ryb3VibGVzaG9vdGluZy9hdG9tcyc7XHJcbmltcG9ydCB7IEJ1bGtPcmRlckhlbHBlckF0b20gfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbnR5cGUgRGF0YSA9IFBpY2s8TW9uZ29MZWFkLCAncHJvZHVjdENvZGUnIHwgJ3RwQ2FuYWxlJyB8ICdjb252ZW50aW9uQ29kZSc+O1xyXG5cclxuLyoqXHJcbiAqIFNob3VsZCBiZSB1c2VkIG9ubHkgZm9yIHZpcnR1YWwgcGFuZWxcclxuICovXHJcbmV4cG9ydCBjb25zdCBidWxrT3JkZXJPZmZlciQ6IEJ1bGtPcmRlckhlbHBlckF0b208RGF0YT4gPSBhdG9tKFxyXG4gIChnZXQpID0+IHtcclxuICAgIGNvbnN0IG9mZmVyID0gZ2V0KG9mZmVySWRBdG9tKTtcclxuXHJcbiAgICBjb25zdCBkYXRhOiBEYXRhID0ge1xyXG4gICAgICBwcm9kdWN0Q29kZTogb2ZmZXIuY29kZSxcclxuICAgICAgY29udmVudGlvbkNvZGU6IG9mZmVyLmNoYW5uZWwsXHJcbiAgICAgIHRwQ2FuYWxlOiBvZmZlci50b3VjaHBvaW50LFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9LFxyXG4gIChnZXQsIHNldCwgYXJnczogRGF0YSkgPT4ge1xyXG4gICAgaWYgKGFyZ3MucHJvZHVjdENvZGUgJiYgYXJncy5jb252ZW50aW9uQ29kZSAmJiBhcmdzLnRwQ2FuYWxlKVxyXG4gICAgICBzZXQob2ZmZXJJZEF0b20sIHtcclxuICAgICAgICBjb2RlOiBhcmdzLnByb2R1Y3RDb2RlLFxyXG4gICAgICAgIGNoYW5uZWw6IGFyZ3MuY29udmVudGlvbkNvZGUsXHJcbiAgICAgICAgdG91Y2hwb2ludDogYXJncy50cENhbmFsZSxcclxuICAgICAgfSk7XHJcbiAgfVxyXG4pO1xyXG5cclxudHlwZSBJbmZvID0gUGljazxNb25nb0xlYWQsICdwcm9kdWN0VGl0bGUnIHwgJ2NwcUdhcycgfCAnY3BxUG93ZXInIHwgJ29wdGlvbnMnPjtcclxuXHJcbmV4cG9ydCBjb25zdCBidWxrT3JkZXJPZmZlckluZm8kID0gYXRvbShhc3luYyAoZ2V0KSA9PiB7XHJcbiAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IHRyeUFzeW5jT3IoZ2V0KG9mZmVyJCkpO1xyXG4gIGNvbnN0IHRpdGxlID0gYXdhaXQgdHJ5QXN5bmNPcihnZXQob2ZmZXJOYW1lQXRvbSkpO1xyXG5cclxuICBjb25zdCBwb3dlciA9IGdldChwb3dlckF0b20pO1xyXG4gIGNvbnN0IGdhcyA9IGdldChnYXNBdG9tKTtcclxuXHJcbiAgY29uc3QgaW5mbzogSW5mbyA9IHtcclxuICAgIHByb2R1Y3RUaXRsZTogdGl0bGUsXHJcbiAgICBjcHFQb3dlcjogcHJvZHVjdD8ucG93ZXI/LnByb2R1Y3RJZCxcclxuICAgIGNwcUdhczogcHJvZHVjdD8uZ2FzPy5wcm9kdWN0SWQsXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgIGdyZWVuUG93ZXI6IHBvd2VyICYmIHByb2R1Y3Q/LnBvd2VyPy5ncmVlbiA/ICdZJyA6ICdOJyxcclxuICAgICAgZ3JlZW5HYXM6IGdhcyAmJiBwcm9kdWN0Py5nYXM/LmdyZWVuID8gJ1knIDogJ04nLFxyXG4gICAgICBkZWZhdWx0R3JlZW5Qb3dlcjogcG93ZXIgJiYgcHJvZHVjdD8ucG93ZXI/LmRlZmF1bHRfZ3JlZW4sXHJcbiAgICAgIGRlZmF1bHRHcmVlbkdhczogZ2FzICYmIHByb2R1Y3Q/Lmdhcz8uZGVmYXVsdF9ncmVlbixcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGluZm87XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXRvbXMvY29udHJhY3QvaGVscGVycy9vZmZlci50cyJ9