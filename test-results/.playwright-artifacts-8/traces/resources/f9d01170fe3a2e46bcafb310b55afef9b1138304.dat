globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  isOfferForVulnerableUsers,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  VulnerableCheck,
  vulnerableCheck,
  workingOnBroadbandAtom,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
class VulnerabilityAvailable extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(10);
    this.WrapperComponent = StepErrorBoundary;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/vulnerability/VulnerabilityAvailableStep.tsx");
  }
  toString() {
    return "vulnerability-available";
  }
  depends() {
    return ["is-user-vulnerable"];
  }
  provides() {
    return [];
  }
  isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return get(operativeModeEnabled$) && operativeMode !== OperativeMode.TRANSFER && operativeMode !== OperativeMode.SWITCH_IN_TRANSFER && !get(workingOnPanelStandaloneAtom) && !get(workingOnBroadbandAtom) && !get(isOfferForVulnerableUsers);
  }
  async isAvailable(get) {
    const check = await get(vulnerableCheck);
    return check === VulnerableCheck.WARN_USER_IS_VULNERABLE;
  }
}
export const vulnerabilityAvailable = new VulnerabilityAvailable();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFHOUIsTUFBTUMsK0JBQStCSCxLQUFLO0FBQUEsRUFBMUM7QUFBQTtBQUNFSSxvQkFBVyxJQUFJSCxhQUFhLEVBQUU7QUFDOUJJLDRCQUFtQkg7QUFFbkJJLGdCQUFPQSxNQUFNLE9BQU8sOEJBQThCO0FBQUE7QUFBQSxFQUVsREMsV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsVUFBVTtBQUNSLFdBQU8sQ0FBQyxvQkFBb0I7QUFBQSxFQUM5QjtBQUFBLEVBRUFDLFdBQVc7QUFDVCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRVVDLFNBQVNDLEtBQWE7QUFDOUIsVUFBTUMsZ0JBQWdCRCxJQUFJakIsaUJBQWlCO0FBRzNDLFdBQ0VpQixJQUFJaEIscUJBQXFCLEtBQ3pCaUIsa0JBQWtCbkIsY0FBY29CLFlBQ2hDRCxrQkFBa0JuQixjQUFjcUIsc0JBQ2hDLENBQUNILElBQUlaLDRCQUE0QixLQUNqQyxDQUFDWSxJQUFJYixzQkFBc0IsS0FDM0IsQ0FBQ2EsSUFBSW5CLHlCQUF5QjtBQUFBLEVBRWxDO0FBQUEsRUFFQSxNQUFnQnVCLFlBQVlKLEtBQWE7QUFDdkMsVUFBTUssUUFBUSxNQUFNTCxJQUFJZCxlQUFlO0FBQ3ZDLFdBQU9tQixVQUFVcEIsZ0JBQWdCcUI7QUFBQUEsRUFDbkM7QUFDRjtBQUVPLGFBQU1DLHlCQUF5QixJQUFJZix1QkFBdUIiLCJuYW1lcyI6WyJpc09mZmVyRm9yVnVsbmVyYWJsZVVzZXJzIiwiT3BlcmF0aXZlTW9kZSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwiVnVsbmVyYWJsZUNoZWNrIiwidnVsbmVyYWJsZUNoZWNrIiwid29ya2luZ09uQnJvYWRiYW5kQXRvbSIsIndvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20iLCJTdGVwIiwiU3RlcFByaW9yaXR5IiwiU3RlcEVycm9yQm91bmRhcnkiLCJWdWxuZXJhYmlsaXR5QXZhaWxhYmxlIiwicHJpb3JpdHkiLCJXcmFwcGVyQ29tcG9uZW50IiwibGF6eSIsInRvU3RyaW5nIiwiZGVwZW5kcyIsInByb3ZpZGVzIiwiaXNJbkZsdXgiLCJnZXQiLCJvcGVyYXRpdmVNb2RlIiwiVFJBTlNGRVIiLCJTV0lUQ0hfSU5fVFJBTlNGRVIiLCJpc0F2YWlsYWJsZSIsImNoZWNrIiwiV0FSTl9VU0VSX0lTX1ZVTE5FUkFCTEUiLCJ2dWxuZXJhYmlsaXR5QXZhaWxhYmxlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInZ1bG5lcmFiaWxpdHktYXZhaWxhYmxlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGlzT2ZmZXJGb3JWdWxuZXJhYmxlVXNlcnMsXHJcbiAgT3BlcmF0aXZlTW9kZSxcclxuICBvcGVyYXRpdmVNb2RlQXRvbSxcclxuICBvcGVyYXRpdmVNb2RlRW5hYmxlZCQsXHJcbiAgVnVsbmVyYWJsZUNoZWNrLFxyXG4gIHZ1bG5lcmFibGVDaGVjayxcclxuICB3b3JraW5nT25Ccm9hZGJhbmRBdG9tLFxyXG4gIHdvcmtpbmdPblBhbmVsU3RhbmRhbG9uZUF0b20sXHJcbn0gZnJvbSAnQG5hai13by9kYXRhLWFjY2Vzcyc7XHJcbmltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5cclxuY2xhc3MgVnVsbmVyYWJpbGl0eUF2YWlsYWJsZSBleHRlbmRzIFN0ZXAge1xyXG4gIHByaW9yaXR5ID0gbmV3IFN0ZXBQcmlvcml0eSgxMCk7XHJcbiAgV3JhcHBlckNvbXBvbmVudCA9IFN0ZXBFcnJvckJvdW5kYXJ5O1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL1Z1bG5lcmFiaWxpdHlBdmFpbGFibGVTdGVwJyk7XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICd2dWxuZXJhYmlsaXR5LWF2YWlsYWJsZSc7XHJcbiAgfVxyXG5cclxuICBkZXBlbmRzKCkge1xyXG4gICAgcmV0dXJuIFsnaXMtdXNlci12dWxuZXJhYmxlJ107XHJcbiAgfVxyXG5cclxuICBwcm92aWRlcygpIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpc0luRmx1eChnZXQ6IEdldHRlcikge1xyXG4gICAgY29uc3Qgb3BlcmF0aXZlTW9kZSA9IGdldChvcGVyYXRpdmVNb2RlQXRvbSk7XHJcblxyXG4gICAgLy8gVE9ETyBzdSBhcy1pcyBub24gw6ggZGlzcG9uaWJpbGUgcGVyIHZvbHR1cmEgZSBzd2l0Y2ggY29uIHZvbHR1cmEsIG1hIMOoIHVuIHJlcXVpc2l0bz9cclxuICAgIHJldHVybiAoXHJcbiAgICAgIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpICYmXHJcbiAgICAgIG9wZXJhdGl2ZU1vZGUgIT09IE9wZXJhdGl2ZU1vZGUuVFJBTlNGRVIgJiZcclxuICAgICAgb3BlcmF0aXZlTW9kZSAhPT0gT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU5fVFJBTlNGRVIgJiZcclxuICAgICAgIWdldCh3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tKSAmJlxyXG4gICAgICAhZ2V0KHdvcmtpbmdPbkJyb2FkYmFuZEF0b20pICYmXHJcbiAgICAgICFnZXQoaXNPZmZlckZvclZ1bG5lcmFibGVVc2VycylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgaXNBdmFpbGFibGUoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgZ2V0KHZ1bG5lcmFibGVDaGVjayk7XHJcbiAgICByZXR1cm4gY2hlY2sgPT09IFZ1bG5lcmFibGVDaGVjay5XQVJOX1VTRVJfSVNfVlVMTkVSQUJMRTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB2dWxuZXJhYmlsaXR5QXZhaWxhYmxlID0gbmV3IFZ1bG5lcmFiaWxpdHlBdmFpbGFibGUoKTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9zdGVwcy9zcmMvbGliL3Z1bG5lcmFiaWxpdHkvdnVsbmVyYWJpbGl0eS1hdmFpbGFibGUudHN4In0=