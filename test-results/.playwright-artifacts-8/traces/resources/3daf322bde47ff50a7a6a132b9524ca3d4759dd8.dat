import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalBuilder.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalBuilder.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useState = __vite__cjsImport3_react["useState"]; const useCallback = __vite__cjsImport3_react["useCallback"];
import PrintModal from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx";
export function ModalBuilder({ modals, onComplete }) {
  _s();
  const [currentModalIndex, setCurrentModalIndex] = useState(0);
  const handleModalClose = useCallback(() => {
    const currentModal2 = modals[currentModalIndex];
    if (currentModal2?.onClose) {
      currentModal2.onClose();
    }
    if (currentModalIndex < modals.length - 1) {
      setCurrentModalIndex((prev) => prev + 1);
    } else {
      if (onComplete) {
        onComplete();
      }
    }
  }, [currentModalIndex, modals, onComplete]);
  const currentModal = modals[currentModalIndex];
  if (!currentModal) return null;
  return /* @__PURE__ */ jsxDEV(
    PrintModal,
    {
      title: currentModal.title,
      icon: currentModal.icon,
      closeButton: currentModal.closeButton !== false,
      onClose: handleModalClose,
      onOpen: currentModal.onOpen,
      noButtons: currentModal.noButtons,
      buttons: currentModal.buttons && currentModal.buttons?.map((button, index) => ({
        ...button,
        onButtonClick: () => {
          if (button.onButtonClick) {
            button.onButtonClick();
          }
          if (button.closeOnAction) {
            handleModalClose();
          }
        }
      })) || [],
      defaultButton: {
        ...currentModal.defaultButton,
        onButtonClick: () => {
          if (currentModal.defaultButton?.onButtonClick) {
            currentModal.defaultButton.onButtonClick();
          }
          handleModalClose();
        }
      },
      footer: currentModal.footer || null,
      children: currentModal.children
    },
    void 0,
    false,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalBuilder.tsx",
      lineNumber: 100,
      columnNumber: 5
    },
    this
  );
}
_s(ModalBuilder, "POggMmR9hpnw1IrVLAaKhiNiHDQ=");
_c = ModalBuilder;
var _c;
$RefreshReg$(_c, "ModalBuilder");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalBuilder.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,