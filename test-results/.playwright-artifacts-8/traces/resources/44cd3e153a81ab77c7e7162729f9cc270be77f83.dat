globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithAddressAsString } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms-generators/atomWithAddressAsString.ts";
import { atomWithPhone } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer/phone-atoms.ts";
export function createProfile(profile = {}) {
  const residentialAddress = atom(profile.residentialAddress);
  residentialAddress.debugLabel = "residentialAddress";
  const givenName$ = atom(profile.givenName);
  givenName$.debugLabel = "givenName$";
  const familyName$ = atom(profile.familyName);
  familyName$.debugLabel = "familyName$";
  const telephone$ = atom(profile.telephone);
  telephone$.debugLabel = "telephone$";
  const email$ = atom(profile.email);
  email$.debugLabel = "email$";
  return {
    givenName$,
    familyName$,
    telephone$,
    telephoneWithCountryCode$: atomWithPhone({
      email$,
      familyName$,
      givenName$,
      telephone$
    }),
    email$,
    emailCrypt$: atom(profile.emailCrypt),
    taxId$: atom(profile.taxId),
    legalForm$: atom(profile.legalForm),
    businessName$: atom(profile.businessName),
    vatNumber$: atom(profile.vatNumber),
    legalRepresentative$: atom(profile.legalRepresentative),
    privacy$: atom({
      promoPlenitude: profile.privacy?.promoPlenitude || false,
      marketResearch: profile.privacy?.marketResearch || false,
      promoThirdParties: profile.privacy?.promoThirdParties || false
    }),
    address$: residentialAddress,
    addressAsString$: atomWithAddressAsString(residentialAddress),
    vulnerable$: atom(profile.vulnerable || false),
    hasActiveCommodities$: atom()
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFHckIsU0FBU0MsK0JBQStCO0FBQ3hDLFNBQVNDLHFCQUFxQjtBQUd2QixnQkFBU0MsY0FDZEMsVUFrQkksQ0FBQyxHQUNJO0FBQ1QsUUFBTUMscUJBQTBDTCxLQUM5Q0ksUUFBUUMsa0JBQ1Y7QUFBRUEscUJBQUFDLGFBQUE7QUFFRixRQUFNQyxhQUFhUCxLQUFLSSxRQUFRSSxTQUFTO0FBQUVELGFBQUFELGFBQUE7QUFDM0MsUUFBTUcsY0FBY1QsS0FBS0ksUUFBUU0sVUFBVTtBQUFFRCxjQUFBSCxhQUFBO0FBQzdDLFFBQU1LLGFBQWFYLEtBQUtJLFFBQVFRLFNBQVM7QUFBRUQsYUFBQUwsYUFBQTtBQUMzQyxRQUFNTyxTQUFTYixLQUFLSSxRQUFRVSxLQUFLO0FBQUVELFNBQUFQLGFBQUE7QUFFbkMsU0FBTztBQUFBLElBQ0xDO0FBQUFBLElBQ0FFO0FBQUFBLElBQ0FFO0FBQUFBLElBQ0FJLDJCQUEyQmIsY0FBYztBQUFBLE1BQ3ZDVztBQUFBQSxNQUNBSjtBQUFBQSxNQUNBRjtBQUFBQSxNQUNBSTtBQUFBQSxJQUNGLENBQUM7QUFBQSxJQUNERTtBQUFBQSxJQUNBRyxhQUFhaEIsS0FBS0ksUUFBUWEsVUFBVTtBQUFBLElBQ3BDQyxRQUFRbEIsS0FBS0ksUUFBUWUsS0FBSztBQUFBLElBQzFCQyxZQUFZcEIsS0FBS0ksUUFBUWlCLFNBQVM7QUFBQSxJQUNsQ0MsZUFBZXRCLEtBQUtJLFFBQVFtQixZQUFZO0FBQUEsSUFDeENDLFlBQVl4QixLQUFLSSxRQUFRcUIsU0FBUztBQUFBLElBQ2xDQyxzQkFBc0IxQixLQUFLSSxRQUFRdUIsbUJBQW1CO0FBQUEsSUFDdERDLFVBQVU1QixLQUFLO0FBQUEsTUFDYjZCLGdCQUFnQnpCLFFBQVEwQixTQUFTRCxrQkFBa0I7QUFBQSxNQUNuREUsZ0JBQWdCM0IsUUFBUTBCLFNBQVNDLGtCQUFrQjtBQUFBLE1BQ25EQyxtQkFBbUI1QixRQUFRMEIsU0FBU0UscUJBQXFCO0FBQUEsSUFDM0QsQ0FBQztBQUFBLElBQ0RDLFVBQVU1QjtBQUFBQSxJQUNWNkIsa0JBQWtCakMsd0JBQXdCSSxrQkFBa0I7QUFBQSxJQUU1RDhCLGFBQWFuQyxLQUFLSSxRQUFRZ0MsY0FBYyxLQUFLO0FBQUEsSUFDN0NDLHVCQUF1QnJDLEtBQUs7QUFBQSxFQUM5QjtBQUNGIiwibmFtZXMiOlsiYXRvbSIsImF0b21XaXRoQWRkcmVzc0FzU3RyaW5nIiwiYXRvbVdpdGhQaG9uZSIsImNyZWF0ZVByb2ZpbGUiLCJwcm9maWxlIiwicmVzaWRlbnRpYWxBZGRyZXNzIiwiZGVidWdMYWJlbCIsImdpdmVuTmFtZSQiLCJnaXZlbk5hbWUiLCJmYW1pbHlOYW1lJCIsImZhbWlseU5hbWUiLCJ0ZWxlcGhvbmUkIiwidGVsZXBob25lIiwiZW1haWwkIiwiZW1haWwiLCJ0ZWxlcGhvbmVXaXRoQ291bnRyeUNvZGUkIiwiZW1haWxDcnlwdCQiLCJlbWFpbENyeXB0IiwidGF4SWQkIiwidGF4SWQiLCJsZWdhbEZvcm0kIiwibGVnYWxGb3JtIiwiYnVzaW5lc3NOYW1lJCIsImJ1c2luZXNzTmFtZSIsInZhdE51bWJlciQiLCJ2YXROdW1iZXIiLCJsZWdhbFJlcHJlc2VudGF0aXZlJCIsImxlZ2FsUmVwcmVzZW50YXRpdmUiLCJwcml2YWN5JCIsInByb21vUGxlbml0dWRlIiwicHJpdmFjeSIsIm1hcmtldFJlc2VhcmNoIiwicHJvbW9UaGlyZFBhcnRpZXMiLCJhZGRyZXNzJCIsImFkZHJlc3NBc1N0cmluZyQiLCJ2dWxuZXJhYmxlJCIsInZ1bG5lcmFibGUiLCJoYXNBY3RpdmVDb21tb2RpdGllcyQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsicHJvZmlsZS1iYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB0eXBlIHsgRWdvbkFkZHJlc3MgfSBmcm9tICcuLi9hcGkvZWdvbic7XHJcbmltcG9ydCB7IHR5cGUgUHJpdmFjeSwgUHJvZmlsZSwgSW5kaXZpZHVhbCB9IGZyb20gJy4uL2F0b21zL3R5cGVzJztcclxuaW1wb3J0IHsgYXRvbVdpdGhBZGRyZXNzQXNTdHJpbmcgfSBmcm9tICcuL2F0b21XaXRoQWRkcmVzc0FzU3RyaW5nJztcclxuaW1wb3J0IHsgYXRvbVdpdGhQaG9uZSB9IGZyb20gJy4uL2F0b21zL2N1c3RvbWVyL3Bob25lLWF0b21zJztcclxuaW1wb3J0IHsgU2VnbWVudCB9IGZyb20gJy4uL2F0b21zL2VudW1zJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9maWxlKFxyXG4gIHByb2ZpbGU6IHtcclxuICAgIGdpdmVuTmFtZT86IHN0cmluZztcclxuICAgIGZhbWlseU5hbWU/OiBzdHJpbmc7XHJcbiAgICB0ZWxlcGhvbmU/OiBzdHJpbmc7XHJcbiAgICBlbWFpbD86IHN0cmluZztcclxuICAgIGVtYWlsQ3J5cHQ/OiBzdHJpbmc7XHJcbiAgICB0YXhJZD86IHN0cmluZztcclxuXHJcbiAgICBzZWdtZW50PzogU2VnbWVudDtcclxuICAgIGxlZ2FsRm9ybT86IHN0cmluZztcclxuICAgIGJ1c2luZXNzTmFtZT86IHN0cmluZztcclxuICAgIHZhdE51bWJlcj86IHN0cmluZztcclxuICAgIGxlZ2FsUmVwcmVzZW50YXRpdmU/OiBJbmRpdmlkdWFsO1xyXG5cclxuICAgIHByaXZhY3k/OiBQcml2YWN5O1xyXG4gICAgcmVzaWRlbnRpYWxBZGRyZXNzPzogRWdvbkFkZHJlc3M7XHJcblxyXG4gICAgdnVsbmVyYWJsZT86IGJvb2xlYW47XHJcbiAgfSA9IHt9XHJcbik6IFByb2ZpbGUge1xyXG4gIGNvbnN0IHJlc2lkZW50aWFsQWRkcmVzczogUHJvZmlsZVsnYWRkcmVzcyQnXSA9IGF0b20oXHJcbiAgICBwcm9maWxlLnJlc2lkZW50aWFsQWRkcmVzc1xyXG4gICk7XHJcblxyXG4gIGNvbnN0IGdpdmVuTmFtZSQgPSBhdG9tKHByb2ZpbGUuZ2l2ZW5OYW1lKTtcclxuICBjb25zdCBmYW1pbHlOYW1lJCA9IGF0b20ocHJvZmlsZS5mYW1pbHlOYW1lKTtcclxuICBjb25zdCB0ZWxlcGhvbmUkID0gYXRvbShwcm9maWxlLnRlbGVwaG9uZSk7XHJcbiAgY29uc3QgZW1haWwkID0gYXRvbShwcm9maWxlLmVtYWlsKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdpdmVuTmFtZSQ6IGdpdmVuTmFtZSQsXHJcbiAgICBmYW1pbHlOYW1lJDogZmFtaWx5TmFtZSQsXHJcbiAgICB0ZWxlcGhvbmUkOiB0ZWxlcGhvbmUkLFxyXG4gICAgdGVsZXBob25lV2l0aENvdW50cnlDb2RlJDogYXRvbVdpdGhQaG9uZSh7XHJcbiAgICAgIGVtYWlsJDogZW1haWwkLFxyXG4gICAgICBmYW1pbHlOYW1lJDogZmFtaWx5TmFtZSQsXHJcbiAgICAgIGdpdmVuTmFtZSQ6IGdpdmVuTmFtZSQsXHJcbiAgICAgIHRlbGVwaG9uZSQ6IHRlbGVwaG9uZSQsXHJcbiAgICB9KSxcclxuICAgIGVtYWlsJDogZW1haWwkLFxyXG4gICAgZW1haWxDcnlwdCQ6IGF0b20ocHJvZmlsZS5lbWFpbENyeXB0KSxcclxuICAgIHRheElkJDogYXRvbShwcm9maWxlLnRheElkKSxcclxuICAgIGxlZ2FsRm9ybSQ6IGF0b20ocHJvZmlsZS5sZWdhbEZvcm0pLFxyXG4gICAgYnVzaW5lc3NOYW1lJDogYXRvbShwcm9maWxlLmJ1c2luZXNzTmFtZSksXHJcbiAgICB2YXROdW1iZXIkOiBhdG9tKHByb2ZpbGUudmF0TnVtYmVyKSxcclxuICAgIGxlZ2FsUmVwcmVzZW50YXRpdmUkOiBhdG9tKHByb2ZpbGUubGVnYWxSZXByZXNlbnRhdGl2ZSksXHJcbiAgICBwcml2YWN5JDogYXRvbSh7XHJcbiAgICAgIHByb21vUGxlbml0dWRlOiBwcm9maWxlLnByaXZhY3k/LnByb21vUGxlbml0dWRlIHx8IGZhbHNlLFxyXG4gICAgICBtYXJrZXRSZXNlYXJjaDogcHJvZmlsZS5wcml2YWN5Py5tYXJrZXRSZXNlYXJjaCB8fCBmYWxzZSxcclxuICAgICAgcHJvbW9UaGlyZFBhcnRpZXM6IHByb2ZpbGUucHJpdmFjeT8ucHJvbW9UaGlyZFBhcnRpZXMgfHwgZmFsc2UsXHJcbiAgICB9KSxcclxuICAgIGFkZHJlc3MkOiByZXNpZGVudGlhbEFkZHJlc3MsXHJcbiAgICBhZGRyZXNzQXNTdHJpbmckOiBhdG9tV2l0aEFkZHJlc3NBc1N0cmluZyhyZXNpZGVudGlhbEFkZHJlc3MpLFxyXG5cclxuICAgIHZ1bG5lcmFibGUkOiBhdG9tKHByb2ZpbGUudnVsbmVyYWJsZSB8fCBmYWxzZSksXHJcbiAgICBoYXNBY3RpdmVDb21tb2RpdGllcyQ6IGF0b20oKSxcclxuICB9O1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy1nZW5lcmF0b3JzL3Byb2ZpbGUtYmFzZS50cyJ9