globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/types.ts";
import { accountSelectedAtom, samePaymentHolderAtom, shippingAddressSelectedAtom, supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
export const bulkOrderPayment$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\payment.ts/bulkOrderPayment$", atom(async (get) => {
  const currentPayment = await get(accountSelectedAtom);
  if (!currentPayment) {
    return {};
  }
  const tool = currentPayment.paymentTool$ ? await get(currentPayment.paymentTool$) : void 0;
  const shippingAddress = (await get(currentPayment.shippingAddress))?.asLeadFormat({
    fallbackIfForeign: await get(supplyAddressSelectedAtom)
  });
  if (tool) {
    const intestatario = tool?.intestatario == null ? {} : tool.intestatario.type === "legal" ? {
      segment: Segment.SMALL,
      companyName: tool.intestatario.businessName,
      companyVatCode: tool.intestatario.vatNumber,
      fiscalCode: tool.intestatario.taxId,
      subscriber: {
        name: tool.subscriber?.givenName || "",
        surname: tool.subscriber?.familyName || "",
        fiscalCode: tool.subscriber?.taxId || ""
      }
    } : {
      segment: Segment.RESID,
      name: tool?.intestatario.givenName,
      surname: tool?.intestatario.familyName,
      fiscalCode: tool?.intestatario.taxId
    };
    const samePaymentHolder = await get(samePaymentHolderAtom);
    return {
      ...intestatario,
      idPaymentTool: tool?.id,
      iban: tool.iban,
      ibanSeda: tool.ibanSeda,
      holder: samePaymentHolder || false,
      shippingAddress
    };
  }
  return {
    shippingAddress
  };
}, async (get, set, args) => {
  if (args.shippingAddress) {
    await set(shippingAddressSelectedAtom, EgonAddress.fromLeadFormat(args.shippingAddress));
  }
  if (args.idPaymentTool) {
    const currentPayment = await get(accountSelectedAtom);
    if (currentPayment) {
      await set(currentPayment?.paymentTool$, {
        id: args.idPaymentTool
      });
    }
  } else if (args.iban) {
    const currentPayment = await get(accountSelectedAtom);
    if (currentPayment) {
      await set(currentPayment?.paymentTool$, {
        iban: args.iban,
        ibanSeda: args.ibanSeda,
        intestatario: args.segment === Segment.SMALL ? {
          type: "legal",
          businessName: args.companyName || "",
          vatNumber: args.companyVatCode || "",
          taxId: args.fiscalCode || ""
        } : {
          type: "individual",
          givenName: args.name || "",
          familyName: args.surname || "",
          taxId: args.fiscalCode || ""
        },
        subscriber: args.subscriber ? {
          type: "individual",
          givenName: args.subscriber.name,
          familyName: args.subscriber.surname,
          taxId: args.subscriber.fiscalCode
        } : void 0
      });
    }
  }
}));
bulkOrderPayment$.debugLabel = "bulkOrderPayment$";

//# sourceMappingURL=data:application/json;base64,