globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { EgonError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { ServiceError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { EGON_PASSWORD, EGON_URL_NORMALIZZAZIONE, EGON_USERNAME } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/_urls.ts";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/types.ts";
export function normalizeAddress(address) {
  if (address.iso3 === "XXX") {
    return EgonAddress.fromForeign();
  }
  return _normalizeAddress({
    DSXESP: address.number + (address.exponent || ""),
    CDXISO: address.iso3,
    DSXCNL: address.city,
    DSXVIA: address.street,
    CDXZIP: address.zipcode,
    DSXDPT: address.province
  });
}
export function normalizeAddressFromId(id) {
  return _normalizeAddress({
    CDPCIV: id,
    DSXCNY: "ITA"
  });
}
async function _normalizeAddress(params, signal) {
  const query = new URLSearchParams({
    USER: EGON_USERNAME,
    PASW: EGON_PASSWORD,
    ...params
  });
  const response = await fetch(EGON_URL_NORMALIZZAZIONE + query, {
    method: "GET",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    signal
  });
  if (response.status === 200) {
    const values = await response.json();
    const data = values["SOG"][0];
    const error = data["SEG"]["ERR_620_ELE"]["ERR_620"].filter(
      // @ts-expect-error inferred any, is not so important here. This works.
      // eslint-disable-next-line eqeqeq
      (x) => x["FLXSEG"] != "0"
    );
    if (error.length) {
      throw new EgonError(error[0]["DSXSEG"], "", response);
    }
    return EgonAddress.fromNormalizeAddressService(data);
  }
  throw new ServiceError(response.statusText, "", response);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGlCQUFpQjtBQUMxQixTQUFTQyxvQkFBb0I7QUFDN0IsU0FDRUMsZUFDQUMsMEJBQ0FDLHFCQUNLO0FBQ1AsU0FBU0MsbUJBQXdDO0FBRTFDLGdCQUFTQyxpQkFBaUJDLFNBQXlCO0FBQ3hELE1BQUlBLFFBQVFDLFNBQVMsT0FBTztBQUMxQixXQUFPSCxZQUFZSSxZQUFZO0FBQUEsRUFDakM7QUFFQSxTQUFPQyxrQkFBa0I7QUFBQSxJQUN2QkMsUUFBUUosUUFBUUssVUFBVUwsUUFBUU0sWUFBWTtBQUFBLElBQzlDQyxRQUFRUCxRQUFRQztBQUFBQSxJQUNoQk8sUUFBUVIsUUFBUVM7QUFBQUEsSUFDaEJDLFFBQVFWLFFBQVFXO0FBQUFBLElBQ2hCQyxRQUFRWixRQUFRYTtBQUFBQSxJQUNoQkMsUUFBUWQsUUFBUWU7QUFBQUEsRUFDbEIsQ0FBQztBQUNIO0FBRU8sZ0JBQVNDLHVCQUF1QkMsSUFBWTtBQUNqRCxTQUFPZCxrQkFBa0I7QUFBQSxJQUN2QmUsUUFBUUQ7QUFBQUEsSUFDUkUsUUFBUTtBQUFBLEVBQ1YsQ0FBQztBQUNIO0FBRUEsZUFBZWhCLGtCQUNiaUIsUUFDQUMsUUFDQTtBQUNBLFFBQU1DLFFBQVEsSUFBSUMsZ0JBQWdCO0FBQUEsSUFDaENDLE1BQU0zQjtBQUFBQSxJQUNONEIsTUFBTTlCO0FBQUFBLElBQ04sR0FBR3lCO0FBQUFBLEVBQ0wsQ0FBQztBQUVELFFBQU1NLFdBQVcsTUFBTUMsTUFBTS9CLDJCQUEyQjBCLE9BQU87QUFBQSxJQUM3RE0sUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQQyxRQUFRO0FBQUEsTUFDUixnQkFBZ0I7QUFBQSxJQUNsQjtBQUFBLElBQ0FUO0FBQUFBLEVBQ0YsQ0FBQztBQUVELE1BQUlLLFNBQVNLLFdBQVcsS0FBSztBQUMzQixVQUFNQyxTQUFTLE1BQU1OLFNBQVNPLEtBQUs7QUFDbkMsVUFBTUMsT0FBT0YsT0FBTyxLQUFLLEVBQUUsQ0FBQztBQUM1QixVQUFNRyxRQUFRRCxLQUFLLEtBQUssRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFRTtBQUFBQTtBQUFBQTtBQUFBQSxNQUdqREMsT0FBTUEsRUFBRSxRQUFRLEtBQUs7QUFBQSxJQUN4QjtBQUNBLFFBQUlGLE1BQU1HLFFBQVE7QUFDaEIsWUFBTSxJQUFJN0MsVUFBVTBDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsR0FBRyxJQUFJVCxRQUFRO0FBQUEsSUFDdEQ7QUFFQSxXQUFPNUIsWUFBWXlDLDRCQUE0QkwsSUFBSTtBQUFBLEVBQ3JEO0FBRUEsUUFBTSxJQUFJeEMsYUFBYWdDLFNBQVNjLFlBQVksSUFBSWQsUUFBUTtBQUMxRCIsIm5hbWVzIjpbIkVnb25FcnJvciIsIlNlcnZpY2VFcnJvciIsIkVHT05fUEFTU1dPUkQiLCJFR09OX1VSTF9OT1JNQUxJWlpBWklPTkUiLCJFR09OX1VTRVJOQU1FIiwiRWdvbkFkZHJlc3MiLCJub3JtYWxpemVBZGRyZXNzIiwiYWRkcmVzcyIsImlzbzMiLCJmcm9tRm9yZWlnbiIsIl9ub3JtYWxpemVBZGRyZXNzIiwiRFNYRVNQIiwibnVtYmVyIiwiZXhwb25lbnQiLCJDRFhJU08iLCJEU1hDTkwiLCJjaXR5IiwiRFNYVklBIiwic3RyZWV0IiwiQ0RYWklQIiwiemlwY29kZSIsIkRTWERQVCIsInByb3ZpbmNlIiwibm9ybWFsaXplQWRkcmVzc0Zyb21JZCIsImlkIiwiQ0RQQ0lWIiwiRFNYQ05ZIiwicGFyYW1zIiwic2lnbmFsIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJVU0VSIiwiUEFTVyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0Iiwic3RhdHVzIiwidmFsdWVzIiwianNvbiIsImRhdGEiLCJlcnJvciIsImZpbHRlciIsIngiLCJsZW5ndGgiLCJmcm9tTm9ybWFsaXplQWRkcmVzc1NlcnZpY2UiLCJzdGF0dXNUZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImVnb25Ob3JtYWxpemUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWdvbkVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcclxuaW1wb3J0IHsgU2VydmljZUVycm9yIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHtcclxuICBFR09OX1BBU1NXT1JELFxyXG4gIEVHT05fVVJMX05PUk1BTElaWkFaSU9ORSxcclxuICBFR09OX1VTRVJOQU1FLFxyXG59IGZyb20gJy4vX3VybHMnO1xyXG5pbXBvcnQgeyBFZ29uQWRkcmVzcywgdHlwZSBFZ29uU3VnZ2VzdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzczogRWdvblN1Z2dlc3Rpb24pIHtcclxuICBpZiAoYWRkcmVzcy5pc28zID09PSAnWFhYJykge1xyXG4gICAgcmV0dXJuIEVnb25BZGRyZXNzLmZyb21Gb3JlaWduKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gX25vcm1hbGl6ZUFkZHJlc3Moe1xyXG4gICAgRFNYRVNQOiBhZGRyZXNzLm51bWJlciArIChhZGRyZXNzLmV4cG9uZW50IHx8ICcnKSxcclxuICAgIENEWElTTzogYWRkcmVzcy5pc28zLFxyXG4gICAgRFNYQ05MOiBhZGRyZXNzLmNpdHksXHJcbiAgICBEU1hWSUE6IGFkZHJlc3Muc3RyZWV0LFxyXG4gICAgQ0RYWklQOiBhZGRyZXNzLnppcGNvZGUsXHJcbiAgICBEU1hEUFQ6IGFkZHJlc3MucHJvdmluY2UsXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVBZGRyZXNzRnJvbUlkKGlkOiBzdHJpbmcpIHtcclxuICByZXR1cm4gX25vcm1hbGl6ZUFkZHJlc3Moe1xyXG4gICAgQ0RQQ0lWOiBpZCxcclxuICAgIERTWENOWTogJ0lUQScsXHJcbiAgfSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIF9ub3JtYWxpemVBZGRyZXNzKFxyXG4gIHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcclxuICBzaWduYWw/OiBBYm9ydFNpZ25hbFxyXG4pIHtcclxuICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xyXG4gICAgVVNFUjogRUdPTl9VU0VSTkFNRSxcclxuICAgIFBBU1c6IEVHT05fUEFTU1dPUkQsXHJcbiAgICAuLi5wYXJhbXMsXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goRUdPTl9VUkxfTk9STUFMSVpaQVpJT05FICsgcXVlcnksIHtcclxuICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgfSxcclxuICAgIHNpZ25hbDogc2lnbmFsLFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIGNvbnN0IHZhbHVlcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGRhdGEgPSB2YWx1ZXNbJ1NPRyddWzBdO1xyXG4gICAgY29uc3QgZXJyb3IgPSBkYXRhWydTRUcnXVsnRVJSXzYyMF9FTEUnXVsnRVJSXzYyMCddLmZpbHRlcihcclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpbmZlcnJlZCBhbnksIGlzIG5vdCBzbyBpbXBvcnRhbnQgaGVyZS4gVGhpcyB3b3Jrcy5cclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxyXG4gICAgICAoeCkgPT4geFsnRkxYU0VHJ10gIT0gJzAnXHJcbiAgICApO1xyXG4gICAgaWYgKGVycm9yLmxlbmd0aCkge1xyXG4gICAgICB0aHJvdyBuZXcgRWdvbkVycm9yKGVycm9yWzBdWydEU1hTRUcnXSwgJycsIHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gRWdvbkFkZHJlc3MuZnJvbU5vcm1hbGl6ZUFkZHJlc3NTZXJ2aWNlKGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgdGhyb3cgbmV3IFNlcnZpY2VFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0LCAnJywgcmVzcG9uc2UpO1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hcGkvZWdvbi9lZ29uTm9ybWFsaXplLnRzIn0=