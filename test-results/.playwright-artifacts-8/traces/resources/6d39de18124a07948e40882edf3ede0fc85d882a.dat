globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
const fetchContractCodeEndPoint = `${API}/webOrderCommonServices/progressivoWebOrderProcName`;
const findCvtEndPoint = `${API}/webOrderCommonServices/token/`;
const insertEndPoint = `${API}/mongoServices/lead`;
const updateEndPoint = `${API}/mongoServices/lead/`;
const updateBulkOrderEndPoint = `${API}/webOrderCommonServices/updateBulkOrder`;
export async function fetchContractCode(params) {
  const logHash = generateOperationID();
  const urlSearchParams = new URLSearchParams({
    ...params,
    logHash
  });
  const response = await fetch(`${fetchContractCodeEndPoint}?${urlSearchParams}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  if (response.status === 200) {
    return await response.text();
  }
  throw Error(response.statusText);
}
export async function fetchLeadByCvt(token) {
  const logHash = generateOperationID();
  const response = await fetch(`${findCvtEndPoint}${encodeURIComponent(token)}/logHash/${logHash}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  if (response.status === 200) {
    return await response.json();
  }
  if (response.status === 204 || !response) {
    throw Error("TOKEN_NOT_VALID");
  }
  throw Error(response.statusText);
}
export async function insertLead(payload) {
  const response = await fetch(insertEndPoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(payload)
  });
  if (response.status === 200) {
    return await response.json();
  }
  throw Error(response.statusText);
}
export async function updateLead(payload) {
  const response = await fetch(`${updateEndPoint}${payload.id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(payload)
  });
  if (response.status === 200) {
    return await response.json();
  }
  throw Error(response.statusText);
}
export async function updateBulkOrder({
  idLead,
  plicoCode,
  salesProcessForLog
}) {
  const response = await fetch(`${updateBulkOrderEndPoint}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      idLead,
      logHash: generateOperationID(),
      plicoCode,
      salesProcessForLog
    })
  });
  if (response.status === 200) {
    return "OK";
  }
  throw Error(response.statusText);
}

//# sourceMappingURL=data:application/json;base64,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QUFvQjtBQUFBLE1BQzdCaUM7QUFBQUEsTUFDQUM7QUFBQUEsSUFDRixDQUFDO0FBQUEsRUFDSCxDQUFDO0FBRUQsTUFBSXZCLFNBQVNLLFdBQVcsS0FBSztBQUMzQixXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU1FLE1BQU1QLFNBQVNRLFVBQVU7QUFDakMiLCJuYW1lcyI6WyJBUEkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiZmV0Y2hDb250cmFjdENvZGVFbmRQb2ludCIsImZpbmRDdnRFbmRQb2ludCIsImluc2VydEVuZFBvaW50IiwidXBkYXRlRW5kUG9pbnQiLCJ1cGRhdGVCdWxrT3JkZXJFbmRQb2ludCIsImZldGNoQ29udHJhY3RDb2RlIiwicGFyYW1zIiwibG9nSGFzaCIsInVybFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0Iiwic3RhdHVzIiwidGV4dCIsIkVycm9yIiwic3RhdHVzVGV4dCIsImZldGNoTGVhZEJ5Q3Z0IiwidG9rZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJqc29uIiwiaW5zZXJ0TGVhZCIsInBheWxvYWQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZUxlYWQiLCJpZCIsInVwZGF0ZUJ1bGtPcmRlciIsImlkTGVhZCIsInBsaWNvQ29kZSIsInNhbGVzUHJvY2Vzc0ZvckxvZyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJsZWFkLXNlcnZpY2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSSwgZ2VuZXJhdGVPcGVyYXRpb25JRCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgTW9uZ29MZWFkIH0gZnJvbSAnLi9fdHlwZXMnO1xyXG5cclxuY29uc3QgZmV0Y2hDb250cmFjdENvZGVFbmRQb2ludCA9IGAke0FQSX0vd2ViT3JkZXJDb21tb25TZXJ2aWNlcy9wcm9ncmVzc2l2b1dlYk9yZGVyUHJvY05hbWVgO1xyXG5jb25zdCBmaW5kQ3Z0RW5kUG9pbnQgPSBgJHtBUEl9L3dlYk9yZGVyQ29tbW9uU2VydmljZXMvdG9rZW4vYDsgLy8gJHtsZWFkSWRQYXJhbX1cclxuY29uc3QgaW5zZXJ0RW5kUG9pbnQgPSBgJHtBUEl9L21vbmdvU2VydmljZXMvbGVhZGA7XHJcbmNvbnN0IHVwZGF0ZUVuZFBvaW50ID0gYCR7QVBJfS9tb25nb1NlcnZpY2VzL2xlYWQvYDsgLy8gJHtsZWFkSWRQYXJhbX1cclxuY29uc3QgdXBkYXRlQnVsa09yZGVyRW5kUG9pbnQgPSBgJHtBUEl9L3dlYk9yZGVyQ29tbW9uU2VydmljZXMvdXBkYXRlQnVsa09yZGVyYDsgLy8gJHtsZWFkSWRQYXJhbX1cclxuXHJcbmV4cG9ydCB0eXBlIEZldGNoQ29udHJhY3RDb2RlUGFyYW1zID0ge1xyXG4gIHByb2Nlc3NvOiBzdHJpbmc7XHJcbiAgbm9tZTogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ29udHJhY3RDb2RlKHBhcmFtczogRmV0Y2hDb250cmFjdENvZGVQYXJhbXMpIHtcclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG4gIGNvbnN0IHVybFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoeyAuLi5wYXJhbXMsIGxvZ0hhc2ggfSk7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICBgJHtmZXRjaENvbnRyYWN0Q29kZUVuZFBvaW50fT8ke3VybFNlYXJjaFBhcmFtc31gLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gIH1cclxuXHJcbiAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaExlYWRCeUN2dCh0b2tlbjogc3RyaW5nKSB7XHJcbiAgY29uc3QgbG9nSGFzaCA9IGdlbmVyYXRlT3BlcmF0aW9uSUQoKTtcclxuXHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke2ZpbmRDdnRFbmRQb2ludH0ke2VuY29kZVVSSUNvbXBvbmVudCh0b2tlbil9L2xvZ0hhc2gvJHtsb2dIYXNofWAsXHJcbiAgICB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgIH1cclxuICApO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIHJldHVybiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBNb25nb0xlYWQ7XHJcbiAgfVxyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQgfHwgIXJlc3BvbnNlKSB7XHJcbiAgICB0aHJvdyBFcnJvcignVE9LRU5fTk9UX1ZBTElEJyk7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc2VydExlYWQocGF5bG9hZDogTW9uZ29MZWFkKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpbnNlcnRFbmRQb2ludCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBoZWFkZXJzOiB7XHJcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIHJldHVybiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBNb25nb0xlYWQ7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxlYWQocGF5bG9hZDogTW9uZ29MZWFkKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt1cGRhdGVFbmRQb2ludH0ke3BheWxvYWQuaWR9YCwge1xyXG4gICAgbWV0aG9kOiAnUFVUJyxcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXHJcbiAgfSk7XHJcblxyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgcmV0dXJuIChhd2FpdCByZXNwb25zZS5qc29uKCkpIGFzIE1vbmdvTGVhZDtcclxuICB9XHJcblxyXG4gIHRocm93IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQnVsa09yZGVyKHtcclxuICBpZExlYWQsXHJcbiAgcGxpY29Db2RlLFxyXG4gIHNhbGVzUHJvY2Vzc0ZvckxvZyxcclxufToge1xyXG4gIGlkTGVhZDogc3RyaW5nO1xyXG4gIHBsaWNvQ29kZT86IHN0cmluZztcclxuICBzYWxlc1Byb2Nlc3NGb3JMb2c/OiBzdHJpbmc7XHJcbn0pIHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3VwZGF0ZUJ1bGtPcmRlckVuZFBvaW50fWAsIHtcclxuICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgIH0sXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgIGlkTGVhZCxcclxuICAgICAgbG9nSGFzaDogZ2VuZXJhdGVPcGVyYXRpb25JRCgpLFxyXG4gICAgICBwbGljb0NvZGUsXHJcbiAgICAgIHNhbGVzUHJvY2Vzc0ZvckxvZyxcclxuICAgIH0pLFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIHJldHVybiAnT0snO1xyXG4gIH1cclxuXHJcbiAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2FwaS9sZWFkL2xlYWQtc2VydmljZXMudHMifQ==