globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { EgonAddress } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/egon/types.ts";
import { numWorkersAtom, salesVolumeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/business/company-atoms.ts";
import { customerAtom, customerCodeAtom, customerTypeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/customer-atoms.ts";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
import { addressAtom, businessNameAtom, consentPhoneContactAtom, emailAtom, emailCryptAtom, familyNameAtom, givenNameAtom, legalFormAtom, legalRepresentativeAtom, privacyAtom, taxIdAtom, vatNumberAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
import { atecoCodeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/small-business-atoms.ts";
import { VulnerabilityFlag, vulnerabilitySelfCertificationFlags$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/vulnerability/vulnerability.ts";
import { supplyAddressSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
export const bulkOrderCustomer$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\customer.ts/bulkOrderCustomer$", atom(async (get) => {
  const customer = await get(customerAtom);
  const profile = customer.profile;
  const privacy = await get(profile.privacy$);
  const segment = await get(customer.segment);
  const legalRepresentative = await get(profile.legalRepresentative$);
  const homeAddress = (await get(profile.address$))?.asLeadFormat({
    fallbackIfForeign: await get(supplyAddressSelectedAtom)
  });
  const data = {
    segment,
    consentPhoneContact: get(consentPhoneContactAtom) || false,
    userType: get(customer.type) ?? null,
    personalData: {
      customerCode: get(customer.customerCode) ?? "",
      ...await get(bulkOrderTelephone$),
      email: await get(profile.email$) ?? "",
      emailCrypt: await get(profile.emailCrypt$),
      // emailAziendale: '',
      // matricolaDipendente: '',
      fiscalCode: await get(profile.taxId$) ?? "",
      ...segment === Segment.SMALL ? {
        companyName: await get(profile.businessName$) ?? "",
        companyLegalForm: await get(profile.legalForm$) ?? "",
        vatCode: await get(profile.vatNumber$) ?? "",
        companyAddress: homeAddress,
        // Viene utilizzato come shippingAddress per small
        homeAddress,
        atecoCode: get(atecoCodeAtom),
        numWorkers: get(numWorkersAtom),
        salesVolume: get(salesVolumeAtom)
      } : {
        name: await get(profile.givenName$) ?? "",
        surname: await get(profile.familyName$) ?? "",
        homeAddress,
        ...get(bulkOrderVulnerability$)
      }
    },
    consentsData: {
      promoPlenitudeApproved: privacy.promoPlenitude,
      marketResearchApproved: privacy.marketResearch,
      promoThirdPartiesApproved: privacy.promoThirdParties
    },
    ...segment === Segment.SMALL && legalRepresentative ? {
      legalRepresentativeData: {
        name: legalRepresentative.givenName,
        surname: legalRepresentative.familyName,
        fiscalCode: legalRepresentative.taxId
      }
    } : {}
  };
  return data;
}, async (_get, set, {
  consentPhoneContact,
  userType,
  personalData: p,
  consentsData: c,
  legalRepresentativeData
}) => {
  set(bulkOrderVulnerability$, p);
  set(consentPhoneContactAtom, consentPhoneContact);
  if (userType) await set(customerTypeAtom, userType);
  if (p.customerCode) await set(customerCodeAtom, p.customerCode);
  if (p.name) await set(givenNameAtom, p.name);
  if (p.surname) await set(familyNameAtom, p.surname);
  if (p.phoneNumber || p.prefixNumber) await set(bulkOrderTelephone$, p);
  if (p.email) await set(emailAtom, p.email);
  if (p.emailCrypt) await set(emailCryptAtom, p.emailCrypt);
  if (p.fiscalCode) await set(taxIdAtom, p.fiscalCode);
  if (p.vatCode) await set(vatNumberAtom, p.vatCode);
  if (p.companyName) await set(businessNameAtom, p.companyName);
  if (p.companyLegalForm) await set(legalFormAtom, p.companyLegalForm);
  if (p.atecoCode) await set(atecoCodeAtom, p.atecoCode);
  if (p.numWorkers) await set(numWorkersAtom, p.numWorkers);
  if (p.salesVolume) await set(salesVolumeAtom, p.salesVolume);
  if (p.companyAddress) await set(addressAtom, EgonAddress.fromLeadFormat(p.companyAddress));
  if (p.homeAddress) await set(addressAtom, EgonAddress.fromLeadFormat(p.homeAddress));
  if (legalRepresentativeData) {
    await set(legalRepresentativeAtom, {
      type: "individual",
      givenName: legalRepresentativeData.name,
      familyName: legalRepresentativeData.surname,
      taxId: legalRepresentativeData.fiscalCode
    });
  }
  if (c) await set(privacyAtom, {
    promoPlenitude: c.promoPlenitudeApproved,
    marketResearch: c.marketResearchApproved,
    promoThirdParties: c.promoThirdPartiesApproved
  });
}));
bulkOrderCustomer$.debugLabel = "bulkOrderCustomer$";
const bulkOrderTelephone$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\customer.ts/bulkOrderTelephone$", atom(async (get) => {
  const {
    profile: {
      telephoneWithCountryCode$
    }
  } = await get(customerAtom);
  const value = await get(telephoneWithCountryCode$);
  if (value) {
    return {
      phoneNumber: value.telephone ?? "",
      prefixNumber: value.country?.phone ?? ""
    };
  }
  return {
    phoneNumber: "",
    prefixNumber: ""
  };
}, async (get, set, data) => {
  if (data.prefixNumber && data.phoneNumber) {
    const {
      profile: {
        telephoneWithCountryCode$
      }
    } = await get(customerAtom);
    await set(telephoneWithCountryCode$, {
      action: "SET",
      countryCode: data.prefixNumber,
      telephone: data.phoneNumber
    });
  }
}));
bulkOrderTelephone$.debugLabel = "bulkOrderTelephone$";
export const bulkOrderVulnerability$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\customer.ts/bulkOrderVulnerability$", atom((get) => {
  const flags = get(vulnerabilitySelfCertificationFlags$);
  if (!flags) {
    return {};
  }
  return {
    vulnerabilityDisability: flags.includes(VulnerabilityFlag.disability),
    vulnerabilitySaemapre: flags.includes(VulnerabilityFlag.saeMapre),
    vulnerabilitySocialbonus: flags.includes(VulnerabilityFlag.socialBonus)
  };
}, (_get, set, data) => {
  if (data.vulnerabilitySaemapre != null) {
    const disabilities = [data.vulnerabilityDisability && VulnerabilityFlag.disability, data.vulnerabilitySaemapre && VulnerabilityFlag.saeMapre, data.vulnerabilitySocialbonus && VulnerabilityFlag.socialBonus].filter((x) => !!x);
    set(vulnerabilitySelfCertificationFlags$, disabilities);
  }
}));
bulkOrderVulnerability$.debugLabel = "bulkOrderVulnerability$";

//# sourceMappingURL=data:application/json;base64,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RUFDeEQ7QUFDRixDQUNGLENBQUM7QUFBQ25DLHdCQUFBbUIsYUFBQSIsIm5hbWVzIjpbImF0b20iLCJFZ29uQWRkcmVzcyIsIm51bVdvcmtlcnNBdG9tIiwic2FsZXNWb2x1bWVBdG9tIiwiY3VzdG9tZXJBdG9tIiwiY3VzdG9tZXJDb2RlQXRvbSIsImN1c3RvbWVyVHlwZUF0b20iLCJTZWdtZW50IiwiYWRkcmVzc0F0b20iLCJidXNpbmVzc05hbWVBdG9tIiwiY29uc2VudFBob25lQ29udGFjdEF0b20iLCJlbWFpbEF0b20iLCJlbWFpbENyeXB0QXRvbSIsImZhbWlseU5hbWVBdG9tIiwiZ2l2ZW5OYW1lQXRvbSIsImxlZ2FsRm9ybUF0b20iLCJsZWdhbFJlcHJlc2VudGF0aXZlQXRvbSIsInByaXZhY3lBdG9tIiwidGF4SWRBdG9tIiwidmF0TnVtYmVyQXRvbSIsImF0ZWNvQ29kZUF0b20iLCJWdWxuZXJhYmlsaXR5RmxhZyIsInZ1bG5lcmFiaWxpdHlTZWxmQ2VydGlmaWNhdGlvbkZsYWdzJCIsInN1cHBseUFkZHJlc3NTZWxlY3RlZEF0b20iLCJidWxrT3JkZXJDdXN0b21lciQiLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJjdXN0b21lciIsInByb2ZpbGUiLCJwcml2YWN5IiwicHJpdmFjeSQiLCJzZWdtZW50IiwibGVnYWxSZXByZXNlbnRhdGl2ZSIsImxlZ2FsUmVwcmVzZW50YXRpdmUkIiwiaG9tZUFkZHJlc3MiLCJhZGRyZXNzJCIsImFzTGVhZEZvcm1hdCIsImZhbGxiYWNrSWZGb3JlaWduIiwiZGF0YSIsImNvbnNlbnRQaG9uZUNvbnRhY3QiLCJ1c2VyVHlwZSIsInR5cGUiLCJwZXJzb25hbERhdGEiLCJjdXN0b21lckNvZGUiLCJidWxrT3JkZXJUZWxlcGhvbmUkIiwiZW1haWwiLCJlbWFpbCQiLCJlbWFpbENyeXB0IiwiZW1haWxDcnlwdCQiLCJmaXNjYWxDb2RlIiwidGF4SWQkIiwiU01BTEwiLCJjb21wYW55TmFtZSIsImJ1c2luZXNzTmFtZSQiLCJjb21wYW55TGVnYWxGb3JtIiwibGVnYWxGb3JtJCIsInZhdENvZGUiLCJ2YXROdW1iZXIkIiwiY29tcGFueUFkZHJlc3MiLCJhdGVjb0NvZGUiLCJudW1Xb3JrZXJzIiwic2FsZXNWb2x1bWUiLCJuYW1lIiwiZ2l2ZW5OYW1lJCIsInN1cm5hbWUiLCJmYW1pbHlOYW1lJCIsImJ1bGtPcmRlclZ1bG5lcmFiaWxpdHkkIiwiY29uc2VudHNEYXRhIiwicHJvbW9QbGVuaXR1ZGVBcHByb3ZlZCIsInByb21vUGxlbml0dWRlIiwibWFya2V0UmVzZWFyY2hBcHByb3ZlZCIsIm1hcmtldFJlc2VhcmNoIiwicHJvbW9UaGlyZFBhcnRpZXNBcHByb3ZlZCIsInByb21vVGhpcmRQYXJ0aWVzIiwibGVnYWxSZXByZXNlbnRhdGl2ZURhdGEiLCJnaXZlbk5hbWUiLCJmYW1pbHlOYW1lIiwidGF4SWQiLCJfZ2V0Iiwic2V0IiwicCIsImMiLCJwaG9uZU51bWJlciIsInByZWZpeE51bWJlciIsImZyb21MZWFkRm9ybWF0IiwiZGVidWdMYWJlbCIsInRlbGVwaG9uZVdpdGhDb3VudHJ5Q29kZSQiLCJ2YWx1ZSIsInRlbGVwaG9uZSIsImNvdW50cnkiLCJwaG9uZSIsImFjdGlvbiIsImNvdW50cnlDb2RlIiwiZmxhZ3MiLCJ2dWxuZXJhYmlsaXR5RGlzYWJpbGl0eSIsImluY2x1ZGVzIiwiZGlzYWJpbGl0eSIsInZ1bG5lcmFiaWxpdHlTYWVtYXByZSIsInNhZU1hcHJlIiwidnVsbmVyYWJpbGl0eVNvY2lhbGJvbnVzIiwic29jaWFsQm9udXMiLCJkaXNhYmlsaXRpZXMiLCJmaWx0ZXIiLCJ4Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImN1c3RvbWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7IEVnb25BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2Vnb24vdHlwZXMnO1xyXG5pbXBvcnQgdHlwZSB7IE1vbmdvTGVhZCwgUGVyc29uYWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2xlYWQvX3R5cGVzJztcclxuaW1wb3J0IHsgbnVtV29ya2Vyc0F0b20sIHNhbGVzVm9sdW1lQXRvbSB9IGZyb20gJy4uLy4uL2J1c2luZXNzL2NvbXBhbnktYXRvbXMnO1xyXG5pbXBvcnQge1xyXG4gIGN1c3RvbWVyQXRvbSxcclxuICBjdXN0b21lckNvZGVBdG9tLFxyXG4gIGN1c3RvbWVyVHlwZUF0b20sXHJcbn0gZnJvbSAnLi4vLi4vY3VzdG9tZXItYXRvbXMnO1xyXG5pbXBvcnQgeyBTZWdtZW50IH0gZnJvbSAnLi4vLi4vZW51bXMnO1xyXG5pbXBvcnQge1xyXG4gIGFkZHJlc3NBdG9tLFxyXG4gIGJ1c2luZXNzTmFtZUF0b20sXHJcbiAgY29uc2VudFBob25lQ29udGFjdEF0b20sXHJcbiAgZW1haWxBdG9tLFxyXG4gIGVtYWlsQ3J5cHRBdG9tLFxyXG4gIGZhbWlseU5hbWVBdG9tLFxyXG4gIGdpdmVuTmFtZUF0b20sXHJcbiAgbGVnYWxGb3JtQXRvbSxcclxuICBsZWdhbFJlcHJlc2VudGF0aXZlQXRvbSxcclxuICBwcml2YWN5QXRvbSxcclxuICB0YXhJZEF0b20sXHJcbiAgdmF0TnVtYmVyQXRvbSxcclxufSBmcm9tICcuLi8uLi9wcm9maWxlLWF0b21zJztcclxuaW1wb3J0IHsgYXRlY29Db2RlQXRvbSB9IGZyb20gJy4uLy4uL3NtYWxsLWJ1c2luZXNzLWF0b21zJztcclxuaW1wb3J0IHtcclxuICBWdWxuZXJhYmlsaXR5RmxhZyxcclxuICB2dWxuZXJhYmlsaXR5U2VsZkNlcnRpZmljYXRpb25GbGFncyQsXHJcbn0gZnJvbSAnLi4vLi4vdnVsbmVyYWJpbGl0eS92dWxuZXJhYmlsaXR5JztcclxuaW1wb3J0IHsgQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tLCBCdWxrT3JkZXJIZWxwZXJBdG9tIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IHN1cHBseUFkZHJlc3NTZWxlY3RlZEF0b20gfSBmcm9tICcuLi8uLi9hY2NvdW50LXNlbGVjdGVkLWF0b21zJztcclxuXHJcbnR5cGUgRGF0YSA9IFJlcXVpcmVkPFxyXG4gIFBpY2s8XHJcbiAgICBNb25nb0xlYWQsXHJcbiAgICB8ICdwZXJzb25hbERhdGEnXHJcbiAgICB8ICdjb25zZW50c0RhdGEnXHJcbiAgICB8ICd1c2VyVHlwZSdcclxuICAgIHwgJ2NvbnNlbnRQaG9uZUNvbnRhY3QnXHJcbiAgICB8ICdzZWdtZW50J1xyXG4gID5cclxuPiAmXHJcbiAgUGljazxNb25nb0xlYWQsICdsZWdhbFJlcHJlc2VudGF0aXZlRGF0YSc+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1bGtPcmRlckN1c3RvbWVyJDogQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tPERhdGE+ID0gYXRvbShcclxuICBhc3luYyAoZ2V0KSA9PiB7XHJcbiAgICBjb25zdCBjdXN0b21lciA9IGF3YWl0IGdldChjdXN0b21lckF0b20pO1xyXG4gICAgY29uc3QgcHJvZmlsZSA9IGN1c3RvbWVyLnByb2ZpbGU7XHJcbiAgICBjb25zdCBwcml2YWN5ID0gYXdhaXQgZ2V0KHByb2ZpbGUucHJpdmFjeSQpO1xyXG4gICAgY29uc3Qgc2VnbWVudCA9IGF3YWl0IGdldChjdXN0b21lci5zZWdtZW50KTtcclxuICAgIGNvbnN0IGxlZ2FsUmVwcmVzZW50YXRpdmUgPSBhd2FpdCBnZXQocHJvZmlsZS5sZWdhbFJlcHJlc2VudGF0aXZlJCk7XHJcbiAgICBjb25zdCBob21lQWRkcmVzcyA9IChhd2FpdCBnZXQocHJvZmlsZS5hZGRyZXNzJCkpPy5hc0xlYWRGb3JtYXQoe1xyXG4gICAgICBmYWxsYmFja0lmRm9yZWlnbjogYXdhaXQgZ2V0KHN1cHBseUFkZHJlc3NTZWxlY3RlZEF0b20pLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZGF0YTogRGF0YSA9IHtcclxuICAgICAgc2VnbWVudDogc2VnbWVudCxcclxuICAgICAgY29uc2VudFBob25lQ29udGFjdDogZ2V0KGNvbnNlbnRQaG9uZUNvbnRhY3RBdG9tKSB8fCBmYWxzZSxcclxuICAgICAgdXNlclR5cGU6IGdldChjdXN0b21lci50eXBlKSA/PyBudWxsLFxyXG4gICAgICBwZXJzb25hbERhdGE6IHtcclxuICAgICAgICBjdXN0b21lckNvZGU6IGdldChjdXN0b21lci5jdXN0b21lckNvZGUpID8/ICcnLFxyXG4gICAgICAgIC4uLihhd2FpdCBnZXQoYnVsa09yZGVyVGVsZXBob25lJCkpLFxyXG4gICAgICAgIGVtYWlsOiAoYXdhaXQgZ2V0KHByb2ZpbGUuZW1haWwkKSkgPz8gJycsXHJcbiAgICAgICAgZW1haWxDcnlwdDogYXdhaXQgZ2V0KHByb2ZpbGUuZW1haWxDcnlwdCQpLFxyXG4gICAgICAgIC8vIGVtYWlsQXppZW5kYWxlOiAnJyxcclxuICAgICAgICAvLyBtYXRyaWNvbGFEaXBlbmRlbnRlOiAnJyxcclxuICAgICAgICBmaXNjYWxDb2RlOiAoYXdhaXQgZ2V0KHByb2ZpbGUudGF4SWQkKSkgPz8gJycsXHJcbiAgICAgICAgLi4uKHNlZ21lbnQgPT09IFNlZ21lbnQuU01BTExcclxuICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgIGNvbXBhbnlOYW1lOiAoYXdhaXQgZ2V0KHByb2ZpbGUuYnVzaW5lc3NOYW1lJCkpID8/ICcnLFxyXG4gICAgICAgICAgICAgIGNvbXBhbnlMZWdhbEZvcm06IChhd2FpdCBnZXQocHJvZmlsZS5sZWdhbEZvcm0kKSkgPz8gJycsXHJcbiAgICAgICAgICAgICAgdmF0Q29kZTogKGF3YWl0IGdldChwcm9maWxlLnZhdE51bWJlciQpKSA/PyAnJyxcclxuICAgICAgICAgICAgICBjb21wYW55QWRkcmVzczogaG9tZUFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgLy8gVmllbmUgdXRpbGl6emF0byBjb21lIHNoaXBwaW5nQWRkcmVzcyBwZXIgc21hbGxcclxuICAgICAgICAgICAgICBob21lQWRkcmVzczogaG9tZUFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgYXRlY29Db2RlOiBnZXQoYXRlY29Db2RlQXRvbSksXHJcbiAgICAgICAgICAgICAgbnVtV29ya2VyczogZ2V0KG51bVdvcmtlcnNBdG9tKSxcclxuICAgICAgICAgICAgICBzYWxlc1ZvbHVtZTogZ2V0KHNhbGVzVm9sdW1lQXRvbSksXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgIG5hbWU6IChhd2FpdCBnZXQocHJvZmlsZS5naXZlbk5hbWUkKSkgPz8gJycsXHJcbiAgICAgICAgICAgICAgc3VybmFtZTogKGF3YWl0IGdldChwcm9maWxlLmZhbWlseU5hbWUkKSkgPz8gJycsXHJcbiAgICAgICAgICAgICAgaG9tZUFkZHJlc3M6IGhvbWVBZGRyZXNzLFxyXG4gICAgICAgICAgICAgIC4uLmdldChidWxrT3JkZXJWdWxuZXJhYmlsaXR5JCksXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICB9LFxyXG4gICAgICBjb25zZW50c0RhdGE6IHtcclxuICAgICAgICBwcm9tb1BsZW5pdHVkZUFwcHJvdmVkOiBwcml2YWN5LnByb21vUGxlbml0dWRlLFxyXG4gICAgICAgIG1hcmtldFJlc2VhcmNoQXBwcm92ZWQ6IHByaXZhY3kubWFya2V0UmVzZWFyY2gsXHJcbiAgICAgICAgcHJvbW9UaGlyZFBhcnRpZXNBcHByb3ZlZDogcHJpdmFjeS5wcm9tb1RoaXJkUGFydGllcyxcclxuICAgICAgfSxcclxuICAgICAgLi4uKHNlZ21lbnQgPT09IFNlZ21lbnQuU01BTEwgJiYgbGVnYWxSZXByZXNlbnRhdGl2ZVxyXG4gICAgICAgID8ge1xyXG4gICAgICAgICAgICBsZWdhbFJlcHJlc2VudGF0aXZlRGF0YToge1xyXG4gICAgICAgICAgICAgIG5hbWU6IGxlZ2FsUmVwcmVzZW50YXRpdmUuZ2l2ZW5OYW1lLFxyXG4gICAgICAgICAgICAgIHN1cm5hbWU6IGxlZ2FsUmVwcmVzZW50YXRpdmUuZmFtaWx5TmFtZSxcclxuICAgICAgICAgICAgICBmaXNjYWxDb2RlOiBsZWdhbFJlcHJlc2VudGF0aXZlLnRheElkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDoge30pLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9LFxyXG4gIGFzeW5jIChcclxuICAgIF9nZXQsXHJcbiAgICBzZXQsXHJcbiAgICB7XHJcbiAgICAgIGNvbnNlbnRQaG9uZUNvbnRhY3QsXHJcbiAgICAgIHVzZXJUeXBlLFxyXG4gICAgICBwZXJzb25hbERhdGE6IHAsXHJcbiAgICAgIGNvbnNlbnRzRGF0YTogYyxcclxuICAgICAgbGVnYWxSZXByZXNlbnRhdGl2ZURhdGEsXHJcbiAgICB9XHJcbiAgKSA9PiB7XHJcbiAgICBzZXQoYnVsa09yZGVyVnVsbmVyYWJpbGl0eSQsIHApO1xyXG4gICAgc2V0KGNvbnNlbnRQaG9uZUNvbnRhY3RBdG9tLCBjb25zZW50UGhvbmVDb250YWN0KTtcclxuXHJcbiAgICBpZiAodXNlclR5cGUpIGF3YWl0IHNldChjdXN0b21lclR5cGVBdG9tLCB1c2VyVHlwZSk7XHJcblxyXG4gICAgaWYgKHAuY3VzdG9tZXJDb2RlKSBhd2FpdCBzZXQoY3VzdG9tZXJDb2RlQXRvbSwgcC5jdXN0b21lckNvZGUpO1xyXG4gICAgaWYgKHAubmFtZSkgYXdhaXQgc2V0KGdpdmVuTmFtZUF0b20sIHAubmFtZSk7XHJcbiAgICBpZiAocC5zdXJuYW1lKSBhd2FpdCBzZXQoZmFtaWx5TmFtZUF0b20sIHAuc3VybmFtZSk7XHJcbiAgICBpZiAocC5waG9uZU51bWJlciB8fCBwLnByZWZpeE51bWJlcikgYXdhaXQgc2V0KGJ1bGtPcmRlclRlbGVwaG9uZSQsIHApO1xyXG4gICAgaWYgKHAuZW1haWwpIGF3YWl0IHNldChlbWFpbEF0b20sIHAuZW1haWwpO1xyXG4gICAgaWYgKHAuZW1haWxDcnlwdCkgYXdhaXQgc2V0KGVtYWlsQ3J5cHRBdG9tLCBwLmVtYWlsQ3J5cHQpO1xyXG4gICAgaWYgKHAuZmlzY2FsQ29kZSkgYXdhaXQgc2V0KHRheElkQXRvbSwgcC5maXNjYWxDb2RlKTtcclxuICAgIGlmIChwLnZhdENvZGUpIGF3YWl0IHNldCh2YXROdW1iZXJBdG9tLCBwLnZhdENvZGUpO1xyXG4gICAgaWYgKHAuY29tcGFueU5hbWUpIGF3YWl0IHNldChidXNpbmVzc05hbWVBdG9tLCBwLmNvbXBhbnlOYW1lKTtcclxuICAgIGlmIChwLmNvbXBhbnlMZWdhbEZvcm0pIGF3YWl0IHNldChsZWdhbEZvcm1BdG9tLCBwLmNvbXBhbnlMZWdhbEZvcm0pO1xyXG4gICAgaWYgKHAuYXRlY29Db2RlKSBhd2FpdCBzZXQoYXRlY29Db2RlQXRvbSwgcC5hdGVjb0NvZGUpO1xyXG4gICAgaWYgKHAubnVtV29ya2VycykgYXdhaXQgc2V0KG51bVdvcmtlcnNBdG9tLCBwLm51bVdvcmtlcnMpO1xyXG4gICAgaWYgKHAuc2FsZXNWb2x1bWUpIGF3YWl0IHNldChzYWxlc1ZvbHVtZUF0b20sIHAuc2FsZXNWb2x1bWUpO1xyXG4gICAgaWYgKHAuY29tcGFueUFkZHJlc3MpXHJcbiAgICAgIGF3YWl0IHNldChhZGRyZXNzQXRvbSwgRWdvbkFkZHJlc3MuZnJvbUxlYWRGb3JtYXQocC5jb21wYW55QWRkcmVzcykpO1xyXG4gICAgaWYgKHAuaG9tZUFkZHJlc3MpXHJcbiAgICAgIGF3YWl0IHNldChhZGRyZXNzQXRvbSwgRWdvbkFkZHJlc3MuZnJvbUxlYWRGb3JtYXQocC5ob21lQWRkcmVzcykpO1xyXG5cclxuICAgIGlmIChsZWdhbFJlcHJlc2VudGF0aXZlRGF0YSkge1xyXG4gICAgICBhd2FpdCBzZXQobGVnYWxSZXByZXNlbnRhdGl2ZUF0b20sIHtcclxuICAgICAgICB0eXBlOiAnaW5kaXZpZHVhbCcsXHJcbiAgICAgICAgZ2l2ZW5OYW1lOiBsZWdhbFJlcHJlc2VudGF0aXZlRGF0YS5uYW1lLFxyXG4gICAgICAgIGZhbWlseU5hbWU6IGxlZ2FsUmVwcmVzZW50YXRpdmVEYXRhLnN1cm5hbWUsXHJcbiAgICAgICAgdGF4SWQ6IGxlZ2FsUmVwcmVzZW50YXRpdmVEYXRhLmZpc2NhbENvZGUsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjKVxyXG4gICAgICBhd2FpdCBzZXQocHJpdmFjeUF0b20sIHtcclxuICAgICAgICBwcm9tb1BsZW5pdHVkZTogYy5wcm9tb1BsZW5pdHVkZUFwcHJvdmVkLFxyXG4gICAgICAgIG1hcmtldFJlc2VhcmNoOiBjLm1hcmtldFJlc2VhcmNoQXBwcm92ZWQsXHJcbiAgICAgICAgcHJvbW9UaGlyZFBhcnRpZXM6IGMucHJvbW9UaGlyZFBhcnRpZXNBcHByb3ZlZCxcclxuICAgICAgfSk7XHJcbiAgfVxyXG4pO1xyXG5cclxuY29uc3QgYnVsa09yZGVyVGVsZXBob25lJDogQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tPFxyXG4gIFBpY2s8UGVyc29uYWxEYXRhLCAncGhvbmVOdW1iZXInIHwgJ3ByZWZpeE51bWJlcic+XHJcbj4gPSBhdG9tKFxyXG4gIGFzeW5jIChnZXQpID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgcHJvZmlsZTogeyB0ZWxlcGhvbmVXaXRoQ291bnRyeUNvZGUkIH0sXHJcbiAgICB9ID0gYXdhaXQgZ2V0KGN1c3RvbWVyQXRvbSk7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGdldCh0ZWxlcGhvbmVXaXRoQ291bnRyeUNvZGUkKTtcclxuICAgIC8vIFRPRE8gc2F2ZSBzb21ld2hlcmUgYHZhbHVlLnZlcmlmaWVkYFxyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcGhvbmVOdW1iZXI6IHZhbHVlLnRlbGVwaG9uZSA/PyAnJyxcclxuICAgICAgICBwcmVmaXhOdW1iZXI6IHZhbHVlLmNvdW50cnk/LnBob25lID8/ICcnLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGhvbmVOdW1iZXI6ICcnLFxyXG4gICAgICBwcmVmaXhOdW1iZXI6ICcnLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBhc3luYyAoZ2V0LCBzZXQsIGRhdGEpID0+IHtcclxuICAgIGlmIChkYXRhLnByZWZpeE51bWJlciAmJiBkYXRhLnBob25lTnVtYmVyKSB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBwcm9maWxlOiB7IHRlbGVwaG9uZVdpdGhDb3VudHJ5Q29kZSQgfSxcclxuICAgICAgfSA9IGF3YWl0IGdldChjdXN0b21lckF0b20pO1xyXG4gICAgICBhd2FpdCBzZXQodGVsZXBob25lV2l0aENvdW50cnlDb2RlJCwge1xyXG4gICAgICAgIGFjdGlvbjogJ1NFVCcsXHJcbiAgICAgICAgY291bnRyeUNvZGU6IGRhdGEucHJlZml4TnVtYmVyLFxyXG4gICAgICAgIHRlbGVwaG9uZTogZGF0YS5waG9uZU51bWJlcixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1bGtPcmRlclZ1bG5lcmFiaWxpdHkkOiBCdWxrT3JkZXJIZWxwZXJBdG9tPFxyXG4gIFBpY2s8XHJcbiAgICBQZXJzb25hbERhdGEsXHJcbiAgICB8ICd2dWxuZXJhYmlsaXR5U2FlbWFwcmUnXHJcbiAgICB8ICd2dWxuZXJhYmlsaXR5RGlzYWJpbGl0eSdcclxuICAgIHwgJ3Z1bG5lcmFiaWxpdHlTb2NpYWxib251cydcclxuICA+XHJcbj4gPSBhdG9tKFxyXG4gIChnZXQpID0+IHtcclxuICAgIGNvbnN0IGZsYWdzID0gZ2V0KHZ1bG5lcmFiaWxpdHlTZWxmQ2VydGlmaWNhdGlvbkZsYWdzJCk7XHJcbiAgICBpZiAoIWZsYWdzKSB7XHJcbiAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2dWxuZXJhYmlsaXR5RGlzYWJpbGl0eTogZmxhZ3MuaW5jbHVkZXMoVnVsbmVyYWJpbGl0eUZsYWcuZGlzYWJpbGl0eSksXHJcbiAgICAgIHZ1bG5lcmFiaWxpdHlTYWVtYXByZTogZmxhZ3MuaW5jbHVkZXMoVnVsbmVyYWJpbGl0eUZsYWcuc2FlTWFwcmUpLFxyXG4gICAgICB2dWxuZXJhYmlsaXR5U29jaWFsYm9udXM6IGZsYWdzLmluY2x1ZGVzKFZ1bG5lcmFiaWxpdHlGbGFnLnNvY2lhbEJvbnVzKSxcclxuICAgIH07XHJcbiAgfSxcclxuICAoX2dldCwgc2V0LCBkYXRhKSA9PiB7XHJcbiAgICBpZiAoZGF0YS52dWxuZXJhYmlsaXR5U2FlbWFwcmUgIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBkaXNhYmlsaXRpZXMgPSBbXHJcbiAgICAgICAgZGF0YS52dWxuZXJhYmlsaXR5RGlzYWJpbGl0eSAmJiBWdWxuZXJhYmlsaXR5RmxhZy5kaXNhYmlsaXR5LFxyXG4gICAgICAgIGRhdGEudnVsbmVyYWJpbGl0eVNhZW1hcHJlICYmIFZ1bG5lcmFiaWxpdHlGbGFnLnNhZU1hcHJlLFxyXG4gICAgICAgIGRhdGEudnVsbmVyYWJpbGl0eVNvY2lhbGJvbnVzICYmIFZ1bG5lcmFiaWxpdHlGbGFnLnNvY2lhbEJvbnVzLFxyXG4gICAgICBdLmZpbHRlcigoeCkgPT4gISF4KTtcclxuXHJcbiAgICAgIHNldCh2dWxuZXJhYmlsaXR5U2VsZkNlcnRpZmljYXRpb25GbGFncyQsIGRpc2FiaWxpdGllcyk7XHJcbiAgICB9XHJcbiAgfVxyXG4pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXRvbXMvY29udHJhY3QvaGVscGVycy9jdXN0b21lci50cyJ9