globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  powerAtom,
  Segment,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
class PowerConsumptionBusinessStep extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(20);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/supply/PowerConsumptionBusinessStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "power-consumption-business";
  }
  async isInFlux(get) {
    return !!(get(powerAtom) && get(operativeModeAtom) !== OperativeMode.CHANGE_OFFER && !get(workingOnPanelStandaloneAtom) && get(operativeModeEnabled$) && await get(customerSegmentAtom) === Segment.SMALL);
  }
  depends() {
    return [];
  }
  provides() {
    return ["PowerConsumptionBusiness"];
  }
}
export const powerConsumptionBusiness = new PowerConsumptionBusinessStep();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFFOUIsTUFBTUMscUNBQXFDSCxLQUFLO0FBQUEsRUFBaEQ7QUFBQTtBQUNFSSxvQkFBVyxJQUFJSCxhQUFhLEVBQUU7QUFFOUJJLGdCQUFPQSxNQUFNLE9BQU8sZ0NBQWdDO0FBQ3BEQyw0QkFBbUJKO0FBQUFBO0FBQUFBLEVBRW5CSyxXQUFXO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLE1BQWdCQyxTQUFTQyxLQUFhO0FBQ3BDLFdBQU8sQ0FBQyxFQUNOQSxJQUFJWixTQUFTLEtBQ2JZLElBQUlkLGlCQUFpQixNQUFNRCxjQUFjZ0IsZ0JBQ3pDLENBQUNELElBQUlWLDRCQUE0QixLQUNqQ1UsSUFBSWIscUJBQXFCLEtBQ3hCLE1BQU1hLElBQUloQixtQkFBbUIsTUFBT0ssUUFBUWE7QUFBQUEsRUFFakQ7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBQyxXQUFXO0FBQ1QsV0FBTyxDQUFDLDBCQUEwQjtBQUFBLEVBQ3BDO0FBQ0Y7QUFFTyxhQUFNQywyQkFBMkIsSUFBSVgsNkJBQTZCIiwibmFtZXMiOlsiY3VzdG9tZXJTZWdtZW50QXRvbSIsIk9wZXJhdGl2ZU1vZGUiLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGVFbmFibGVkJCIsInBvd2VyQXRvbSIsIlNlZ21lbnQiLCJ3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tIiwiU3RlcCIsIlN0ZXBQcmlvcml0eSIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiUG93ZXJDb25zdW1wdGlvbkJ1c2luZXNzU3RlcCIsInByaW9yaXR5IiwibGF6eSIsIldyYXBwZXJDb21wb25lbnQiLCJ0b1N0cmluZyIsImlzSW5GbHV4IiwiZ2V0IiwiQ0hBTkdFX09GRkVSIiwiU01BTEwiLCJkZXBlbmRzIiwicHJvdmlkZXMiLCJwb3dlckNvbnN1bXB0aW9uQnVzaW5lc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsicG93ZXItY29uc3VtcHRpb24tYnVzaW5lc3MudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgY3VzdG9tZXJTZWdtZW50QXRvbSxcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxuICBwb3dlckF0b20sXHJcbiAgU2VnbWVudCxcclxuICB3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tLFxyXG59IGZyb20gJ0BuYWotd28vZGF0YS1hY2Nlc3MnO1xyXG5pbXBvcnQgeyBTdGVwLCBTdGVwUHJpb3JpdHkgfSBmcm9tICdAbmFqLXdvL2VuZ2luZSc7XHJcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJ2pvdGFpL3ZhbmlsbGEvdHlwZVV0aWxzJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuXHJcbmNsYXNzIFBvd2VyQ29uc3VtcHRpb25CdXNpbmVzc1N0ZXAgZXh0ZW5kcyBTdGVwIHtcclxuICBwcmlvcml0eSA9IG5ldyBTdGVwUHJpb3JpdHkoMjApO1xyXG5cclxuICBsYXp5ID0gKCkgPT4gaW1wb3J0KCcuL1Bvd2VyQ29uc3VtcHRpb25CdXNpbmVzc1N0ZXAnKTtcclxuICBXcmFwcGVyQ29tcG9uZW50ID0gU3RlcEVycm9yQm91bmRhcnk7XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICdwb3dlci1jb25zdW1wdGlvbi1idXNpbmVzcyc7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgaXNJbkZsdXgoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIHJldHVybiAhIShcclxuICAgICAgZ2V0KHBvd2VyQXRvbSkgJiZcclxuICAgICAgZ2V0KG9wZXJhdGl2ZU1vZGVBdG9tKSAhPT0gT3BlcmF0aXZlTW9kZS5DSEFOR0VfT0ZGRVIgJiZcclxuICAgICAgIWdldCh3b3JraW5nT25QYW5lbFN0YW5kYWxvbmVBdG9tKSAmJlxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUVuYWJsZWQkKSAmJlxyXG4gICAgICAoYXdhaXQgZ2V0KGN1c3RvbWVyU2VnbWVudEF0b20pKSA9PT0gU2VnbWVudC5TTUFMTFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGRlcGVuZHMoKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBwcm92aWRlcygpIHtcclxuICAgIHJldHVybiBbJ1Bvd2VyQ29uc3VtcHRpb25CdXNpbmVzcyddO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBvd2VyQ29uc3VtcHRpb25CdXNpbmVzcyA9IG5ldyBQb3dlckNvbnN1bXB0aW9uQnVzaW5lc3NTdGVwKCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvc3RlcHMvc3JjL2xpYi9zdXBwbHkvcG93ZXItY29uc3VtcHRpb24tYnVzaW5lc3MudHN4In0=