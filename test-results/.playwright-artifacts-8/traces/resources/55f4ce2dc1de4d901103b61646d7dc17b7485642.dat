globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { ImmediateEffect } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/types.ts";
import { effectiveDate$, immediateEffectAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/index.ts";
import { formatDate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
export const bulkOrderImmediateEffect$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\immediate-effect.ts/bulkOrderImmediateEffect$", atom(async (get) => {
  const value = await get(immediateEffectAtom);
  if (value === ImmediateEffect.NOT_SELECTED) {
    return;
  }
  const dataDecorrenza = await get(effectiveDate$);
  return {
    immediateEffect: value === ImmediateEffect.PRIORITY,
    dataDecorrenza: formatDate(dataDecorrenza)
  };
}, async (get, set, lead) => {
  if (lead?.immediateEffect != null) {
    set(immediateEffectAtom, lead.immediateEffect ? ImmediateEffect.PRIORITY : ImmediateEffect.STANDARD);
  }
}));
bulkOrderImmediateEffect$.debugLabel = "bulkOrderImmediateEffect$";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFFckIsU0FBU0MsdUJBQXVCO0FBRWhDLFNBQVNDLGdCQUFnQkMsMkJBQTJCO0FBQ3BELFNBQVNDLGtCQUFrQjtBQUUzQixhQUFBQyw0QkFBQUMsV0FBQUMsZUFBQUMsSUFBQSx1SkFFSVIsS0FDRixPQUFPUSxRQUFRO0FBQ2IsUUFBTUMsUUFBUSxNQUFNRCxJQUFJTCxtQkFBbUI7QUFDM0MsTUFBSU0sVUFBVVIsZ0JBQWdCUyxjQUFjO0FBQzFDO0FBQUEsRUFDRjtBQUNBLFFBQU1DLGlCQUFpQixNQUFNSCxJQUFJTixjQUFjO0FBRS9DLFNBQU87QUFBQSxJQUNMVSxpQkFBaUJILFVBQVVSLGdCQUFnQlk7QUFBQUEsSUFDM0NGLGdCQUFnQlAsV0FBV08sY0FBYztBQUFBLEVBQzNDO0FBQ0YsR0FDQSxPQUFPSCxLQUFLTSxLQUFLQyxTQUFTO0FBQ3hCLE1BQUlBLE1BQU1ILG1CQUFtQixNQUFNO0FBQ2pDRSxRQUNFWCxxQkFDQVksS0FBS0gsa0JBQ0RYLGdCQUFnQlksV0FDaEJaLGdCQUFnQmUsUUFDdEI7QUFBQSxFQUNGO0FBQ0YsQ0FDRixDQUFDO0FBQUNYLDBCQUFBWSxhQUFBIiwibmFtZXMiOlsiYXRvbSIsIkltbWVkaWF0ZUVmZmVjdCIsImVmZmVjdGl2ZURhdGUkIiwiaW1tZWRpYXRlRWZmZWN0QXRvbSIsImZvcm1hdERhdGUiLCJidWxrT3JkZXJJbW1lZGlhdGVFZmZlY3QkIiwiZ2xvYmFsVGhpcyIsImpvdGFpQXRvbUNhY2hlIiwiZ2V0IiwidmFsdWUiLCJOT1RfU0VMRUNURUQiLCJkYXRhRGVjb3JyZW56YSIsImltbWVkaWF0ZUVmZmVjdCIsIlBSSU9SSVRZIiwic2V0IiwibGVhZCIsIlNUQU5EQVJEIiwiZGVidWdMYWJlbCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJpbW1lZGlhdGUtZWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB0eXBlIHsgTW9uZ29MZWFkIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2xlYWQnO1xyXG5pbXBvcnQgeyBJbW1lZGlhdGVFZmZlY3QgfSBmcm9tICcuLi8uLi8uLi9lZmZlY3RpdmUtZGF0ZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBBc3luY0J1bGtPcmRlckhlbHBlckF0b20gfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgZWZmZWN0aXZlRGF0ZSQsIGltbWVkaWF0ZUVmZmVjdEF0b20gfSBmcm9tICcuLi8uLi8uLi9lZmZlY3RpdmUtZGF0ZXMnO1xyXG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuXHJcbmV4cG9ydCBjb25zdCBidWxrT3JkZXJJbW1lZGlhdGVFZmZlY3QkOiBBc3luY0J1bGtPcmRlckhlbHBlckF0b208XHJcbiAgUGljazxNb25nb0xlYWQsICdpbW1lZGlhdGVFZmZlY3QnIHwgJ2RhdGFEZWNvcnJlbnphJz4gfCB1bmRlZmluZWRcclxuPiA9IGF0b20oXHJcbiAgYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCBnZXQoaW1tZWRpYXRlRWZmZWN0QXRvbSk7XHJcbiAgICBpZiAodmFsdWUgPT09IEltbWVkaWF0ZUVmZmVjdC5OT1RfU0VMRUNURUQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YURlY29ycmVuemEgPSBhd2FpdCBnZXQoZWZmZWN0aXZlRGF0ZSQpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGltbWVkaWF0ZUVmZmVjdDogdmFsdWUgPT09IEltbWVkaWF0ZUVmZmVjdC5QUklPUklUWSxcclxuICAgICAgZGF0YURlY29ycmVuemE6IGZvcm1hdERhdGUoZGF0YURlY29ycmVuemEpLFxyXG4gICAgfTtcclxuICB9LFxyXG4gIGFzeW5jIChnZXQsIHNldCwgbGVhZCkgPT4ge1xyXG4gICAgaWYgKGxlYWQ/LmltbWVkaWF0ZUVmZmVjdCAhPSBudWxsKSB7XHJcbiAgICAgIHNldChcclxuICAgICAgICBpbW1lZGlhdGVFZmZlY3RBdG9tLFxyXG4gICAgICAgIGxlYWQuaW1tZWRpYXRlRWZmZWN0XHJcbiAgICAgICAgICA/IEltbWVkaWF0ZUVmZmVjdC5QUklPUklUWVxyXG4gICAgICAgICAgOiBJbW1lZGlhdGVFZmZlY3QuU1RBTkRBUkRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcbik7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy9jb250cmFjdC9oZWxwZXJzL2ltbWVkaWF0ZS1lZmZlY3QudHMifQ==