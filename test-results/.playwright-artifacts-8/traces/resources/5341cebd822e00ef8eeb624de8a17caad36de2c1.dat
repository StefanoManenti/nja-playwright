globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { getActivationTypeGas, getActivationTypePower } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/activation-questions.tsx";
import { gasAtom, operativeModeAtom, powerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { tsActivationGas$, tsActivationPower$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
export const atomWithOperativeModeDisplay = (operativeMode$ = operativeModeAtom, power$ = powerAtom, gas$ = gasAtom) => atom((get) => {
  const operativeMode = get(operativeMode$);
  const power = get(power$);
  const gas = get(gas$);
  const activationGas = get(tsActivationGas$);
  const activationPower = get(tsActivationPower$);
  switch (operativeMode) {
    case OperativeMode.SWITCH_IN:
      return "Cambio fornitore";
    case OperativeMode.SWITCH_IN_TRANSFER:
      return "Voltura con cambio fornitore";
    case OperativeMode.NEW_ACTIVATION: {
      const operativeModeActivationPower = power && getActivationTypePower(activationPower);
      const operativeModeActivationGas = gas && getActivationTypeGas(activationGas);
      return operativeModeActivationPower || operativeModeActivationGas || "Nuova attivazione";
    }
    case OperativeMode.TRANSFER:
      return "Voltura";
    case OperativeMode.CHANGE_OFFER:
      return "Cambio offerta";
    default:
      return;
  }
});
export const operativeModeDisplay$ = atomWithOperativeModeDisplay();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFDckIsU0FDRUMsc0JBQ0FDLDhCQUNLO0FBQ1AsU0FBU0MsU0FBU0MsbUJBQW1CQyxpQkFBaUI7QUFDdEQsU0FBU0MscUJBQXFCO0FBQzlCLFNBQVNDLGtCQUFrQkMsMEJBQTBCO0FBRTlDLGFBQU1DLCtCQUErQkEsQ0FDMUNDLGlCQUFpQk4sbUJBQ2pCTyxTQUFTTixXQUNUTyxPQUFPVCxZQUVQSCxLQUFNYSxTQUFRO0FBQ1osUUFBTUMsZ0JBQWdCRCxJQUFJSCxjQUFjO0FBQ3hDLFFBQU1LLFFBQVFGLElBQUlGLE1BQU07QUFDeEIsUUFBTUssTUFBTUgsSUFBSUQsSUFBSTtBQUNwQixRQUFNSyxnQkFBZ0JKLElBQUlOLGdCQUFnQjtBQUMxQyxRQUFNVyxrQkFBa0JMLElBQUlMLGtCQUFrQjtBQUU5QyxVQUFRTSxlQUFhO0FBQUEsSUFDbkIsS0FBS1IsY0FBY2E7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS2IsY0FBY2M7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS2QsY0FBY2UsZ0JBQWdCO0FBQ2pDLFlBQU1DLCtCQUNKUCxTQUFTYix1QkFBdUJnQixlQUFlO0FBRWpELFlBQU1LLDZCQUNKUCxPQUFPZixxQkFBcUJnQixhQUFhO0FBRTNDLGFBQ0VLLGdDQUNBQyw4QkFDQTtBQUFBLElBRUo7QUFBQSxJQUNBLEtBQUtqQixjQUFja0I7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS2xCLGNBQWNtQjtBQUNqQixhQUFPO0FBQUEsSUFDVDtBQUNFO0FBQUEsRUFDSjtBQUNGLENBQUM7QUFFSSxhQUFNQyx3QkFBd0JqQiw2QkFBNkIiLCJuYW1lcyI6WyJhdG9tIiwiZ2V0QWN0aXZhdGlvblR5cGVHYXMiLCJnZXRBY3RpdmF0aW9uVHlwZVBvd2VyIiwiZ2FzQXRvbSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwicG93ZXJBdG9tIiwiT3BlcmF0aXZlTW9kZSIsInRzQWN0aXZhdGlvbkdhcyQiLCJ0c0FjdGl2YXRpb25Qb3dlciQiLCJhdG9tV2l0aE9wZXJhdGl2ZU1vZGVEaXNwbGF5Iiwib3BlcmF0aXZlTW9kZSQiLCJwb3dlciQiLCJnYXMkIiwiZ2V0Iiwib3BlcmF0aXZlTW9kZSIsInBvd2VyIiwiZ2FzIiwiYWN0aXZhdGlvbkdhcyIsImFjdGl2YXRpb25Qb3dlciIsIlNXSVRDSF9JTiIsIlNXSVRDSF9JTl9UUkFOU0ZFUiIsIk5FV19BQ1RJVkFUSU9OIiwib3BlcmF0aXZlTW9kZUFjdGl2YXRpb25Qb3dlciIsIm9wZXJhdGl2ZU1vZGVBY3RpdmF0aW9uR2FzIiwiVFJBTlNGRVIiLCJDSEFOR0VfT0ZGRVIiLCJvcGVyYXRpdmVNb2RlRGlzcGxheSQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiZGVyaXZlZC1hdG9tcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdG9tIH0gZnJvbSAnam90YWknO1xyXG5pbXBvcnQge1xyXG4gIGdldEFjdGl2YXRpb25UeXBlR2FzLFxyXG4gIGdldEFjdGl2YXRpb25UeXBlUG93ZXIsXHJcbn0gZnJvbSAnLi9hY3RpdmF0aW9uLXF1ZXN0aW9ucyc7XHJcbmltcG9ydCB7IGdhc0F0b20sIG9wZXJhdGl2ZU1vZGVBdG9tLCBwb3dlckF0b20gfSBmcm9tICcuL2F0b21zJztcclxuaW1wb3J0IHsgT3BlcmF0aXZlTW9kZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyB0c0FjdGl2YXRpb25HYXMkLCB0c0FjdGl2YXRpb25Qb3dlciQgfSBmcm9tICcuL3Ryb3VibGVzaG9vdGluZyc7XHJcblxyXG5leHBvcnQgY29uc3QgYXRvbVdpdGhPcGVyYXRpdmVNb2RlRGlzcGxheSA9IChcclxuICBvcGVyYXRpdmVNb2RlJCA9IG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIHBvd2VyJCA9IHBvd2VyQXRvbSxcclxuICBnYXMkID0gZ2FzQXRvbVxyXG4pID0+XHJcbiAgYXRvbSgoZ2V0KSA9PiB7XHJcbiAgICBjb25zdCBvcGVyYXRpdmVNb2RlID0gZ2V0KG9wZXJhdGl2ZU1vZGUkKTtcclxuICAgIGNvbnN0IHBvd2VyID0gZ2V0KHBvd2VyJCk7XHJcbiAgICBjb25zdCBnYXMgPSBnZXQoZ2FzJCk7XHJcbiAgICBjb25zdCBhY3RpdmF0aW9uR2FzID0gZ2V0KHRzQWN0aXZhdGlvbkdhcyQpO1xyXG4gICAgY29uc3QgYWN0aXZhdGlvblBvd2VyID0gZ2V0KHRzQWN0aXZhdGlvblBvd2VyJCk7XHJcblxyXG4gICAgc3dpdGNoIChvcGVyYXRpdmVNb2RlKSB7XHJcbiAgICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU46XHJcbiAgICAgICAgcmV0dXJuICdDYW1iaW8gZm9ybml0b3JlJztcclxuICAgICAgY2FzZSBPcGVyYXRpdmVNb2RlLlNXSVRDSF9JTl9UUkFOU0ZFUjpcclxuICAgICAgICByZXR1cm4gJ1ZvbHR1cmEgY29uIGNhbWJpbyBmb3JuaXRvcmUnO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuTkVXX0FDVElWQVRJT046IHtcclxuICAgICAgICBjb25zdCBvcGVyYXRpdmVNb2RlQWN0aXZhdGlvblBvd2VyID1cclxuICAgICAgICAgIHBvd2VyICYmIGdldEFjdGl2YXRpb25UeXBlUG93ZXIoYWN0aXZhdGlvblBvd2VyKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3BlcmF0aXZlTW9kZUFjdGl2YXRpb25HYXMgPVxyXG4gICAgICAgICAgZ2FzICYmIGdldEFjdGl2YXRpb25UeXBlR2FzKGFjdGl2YXRpb25HYXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgb3BlcmF0aXZlTW9kZUFjdGl2YXRpb25Qb3dlciB8fFxyXG4gICAgICAgICAgb3BlcmF0aXZlTW9kZUFjdGl2YXRpb25HYXMgfHxcclxuICAgICAgICAgICdOdW92YSBhdHRpdmF6aW9uZSdcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5UUkFOU0ZFUjpcclxuICAgICAgICByZXR1cm4gJ1ZvbHR1cmEnO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuQ0hBTkdFX09GRkVSOlxyXG4gICAgICAgIHJldHVybiAnQ2FtYmlvIG9mZmVydGEnO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbmV4cG9ydCBjb25zdCBvcGVyYXRpdmVNb2RlRGlzcGxheSQgPSBhdG9tV2l0aE9wZXJhdGl2ZU1vZGVEaXNwbGF5KCk7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi90cm91Ymxlc2hvb3RpbmcvZGVyaXZlZC1hdG9tcy50cyJ9