globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
export function mapPower(src, tariffSelected) {
  return {
    document: src.document,
    tariffs_template: src.tariffs_template,
    tariffs_options: src.tariffs_options,
    tariffs: mapTariffs(src.tariffs_template, src.tariffs)
  };
}
function mapTariffs(template, t) {
  switch (template) {
    case "FIX":
    case "DEFAULT":
      return {
        tariffs_template: "FIX",
        "24h": t["24h"],
        f1: t.f1,
        f2: t.f2,
        f3: t.f3,
        commercializzazione: t.commercializzazione
      };
    case "INDEX":
    case "INDEXED":
      return {
        tariffs_template: "INDEX",
        index: t.index,
        commercializzazione: t.commercializzazione
      };
    case "PLACET":
    default:
      return {
        tariffs_template: "PLACET",
        commercializzazione: t.commercializzazione
      };
  }
}
function filterByOption(list, pick) {
  if (!pick) return list;
  return list.includes(pick) ? [pick] : [];
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUlPLGdCQUFTQSxTQUNkQyxLQUNBQyxnQkFDYTtBQUNiLFNBQU87QUFBQSxJQUNMQyxVQUFVRixJQUFJRTtBQUFBQSxJQUNkQyxrQkFBa0JILElBQUlHO0FBQUFBLElBQ3RCQyxpQkFBaUJKLElBQUlJO0FBQUFBLElBQ3JCQyxTQUFTQyxXQUFXTixJQUFJRyxrQkFBa0JILElBQUlLLE9BQU87QUFBQSxFQUN2RDtBQUNGO0FBRUEsU0FBU0MsV0FDUEMsVUFDQUMsR0FDd0I7QUFDeEIsVUFBUUQsVUFBUTtBQUFBLElBQ2QsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNILGFBQU87QUFBQSxRQUNMSixrQkFBa0I7QUFBQSxRQUNsQixPQUFPSyxFQUFFLEtBQUs7QUFBQSxRQUNkQyxJQUFJRCxFQUFFQztBQUFBQSxRQUNOQyxJQUFJRixFQUFFRTtBQUFBQSxRQUNOQyxJQUFJSCxFQUFFRztBQUFBQSxRQUNOQyxxQkFBcUJKLEVBQUVJO0FBQUFBLE1BQ3pCO0FBQUEsSUFDRixLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0gsYUFBTztBQUFBLFFBQ0xULGtCQUFrQjtBQUFBLFFBQ2xCVSxPQUFPTCxFQUFFSztBQUFBQSxRQUNURCxxQkFBcUJKLEVBQUVJO0FBQUFBLE1BQ3pCO0FBQUEsSUFDRixLQUFLO0FBQUEsSUFDTDtBQUNFLGFBQU87QUFBQSxRQUNMVCxrQkFBa0I7QUFBQSxRQUNsQlMscUJBQXFCSixFQUFFSTtBQUFBQSxNQUN6QjtBQUFBLEVBQ0o7QUFDRjtBQUVBLFNBQVNFLGVBQWtCQyxNQUFXQyxNQUFlO0FBQ25ELE1BQUksQ0FBQ0EsS0FBTSxRQUFPRDtBQUNsQixTQUFPQSxLQUFLRSxTQUFTRCxJQUFJLElBQUksQ0FBQ0EsSUFBSSxJQUFJO0FBQ3hDIiwibmFtZXMiOlsibWFwUG93ZXIiLCJzcmMiLCJ0YXJpZmZTZWxlY3RlZCIsImRvY3VtZW50IiwidGFyaWZmc190ZW1wbGF0ZSIsInRhcmlmZnNfb3B0aW9ucyIsInRhcmlmZnMiLCJtYXBUYXJpZmZzIiwidGVtcGxhdGUiLCJ0IiwiZjEiLCJmMiIsImYzIiwiY29tbWVyY2lhbGl6emF6aW9uZSIsImluZGV4IiwiZmlsdGVyQnlPcHRpb24iLCJsaXN0IiwicGljayIsImluY2x1ZGVzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInBvd2VyLmFkYXB0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21tb2RpdHlGRX0gZnJvbSBcIi4uL21vZGVscy9pbmZvLW9mZmVydGEtZnJvbnRlbmRcIjtcclxuaW1wb3J0IHtQb3dlciwgVGFyaWZmT3B0aW9uLCBUYXJpZmZUZW1wbGF0ZX0gZnJvbSBcIi4uL21vZGVscy9pbmZvLW9mZmVydGEtcm9vdFwiO1xyXG5cclxuLyoqIGxvZ2ljYSBpZGVudGljYSBwZXIgR2FzOiBlc3RyYWlsYSBpbiB1bmEgZnVuemlvbmUgY29tdW5lIHNlIHZ1b2kgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcFBvd2VyKFxyXG4gIHNyYzogUG93ZXIsXHJcbiAgdGFyaWZmU2VsZWN0ZWQ/OiBUYXJpZmZPcHRpb25cclxuKTogQ29tbW9kaXR5RkUge1xyXG4gIHJldHVybiB7XHJcbiAgICBkb2N1bWVudDogc3JjLmRvY3VtZW50LFxyXG4gICAgdGFyaWZmc190ZW1wbGF0ZTogc3JjLnRhcmlmZnNfdGVtcGxhdGUsXHJcbiAgICB0YXJpZmZzX29wdGlvbnM6IHNyYy50YXJpZmZzX29wdGlvbnMsXHJcbiAgICB0YXJpZmZzOiBtYXBUYXJpZmZzKHNyYy50YXJpZmZzX3RlbXBsYXRlLCBzcmMudGFyaWZmcyksXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwVGFyaWZmcyhcclxuICB0ZW1wbGF0ZTogVGFyaWZmVGVtcGxhdGUsXHJcbiAgdDogUG93ZXJbXCJ0YXJpZmZzXCJdXHJcbik6IENvbW1vZGl0eUZFW1widGFyaWZmc1wiXSB7XHJcbiAgc3dpdGNoICh0ZW1wbGF0ZSkge1xyXG4gICAgY2FzZSBcIkZJWFwiOlxyXG4gICAgY2FzZSBcIkRFRkFVTFRcIjpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0YXJpZmZzX3RlbXBsYXRlOiBcIkZJWFwiLFxyXG4gICAgICAgIFwiMjRoXCI6IHRbXCIyNGhcIl0hLFxyXG4gICAgICAgIGYxOiB0LmYxLFxyXG4gICAgICAgIGYyOiB0LmYyLFxyXG4gICAgICAgIGYzOiB0LmYzLFxyXG4gICAgICAgIGNvbW1lcmNpYWxpenphemlvbmU6IHQuY29tbWVyY2lhbGl6emF6aW9uZSxcclxuICAgICAgfTtcclxuICAgIGNhc2UgXCJJTkRFWFwiOlxyXG4gICAgY2FzZSBcIklOREVYRURcIjpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0YXJpZmZzX3RlbXBsYXRlOiBcIklOREVYXCIsXHJcbiAgICAgICAgaW5kZXg6IHQuaW5kZXghLFxyXG4gICAgICAgIGNvbW1lcmNpYWxpenphemlvbmU6IHQuY29tbWVyY2lhbGl6emF6aW9uZSxcclxuICAgICAgfTtcclxuICAgIGNhc2UgXCJQTEFDRVRcIjpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdGFyaWZmc190ZW1wbGF0ZTogXCJQTEFDRVRcIixcclxuICAgICAgICBjb21tZXJjaWFsaXp6YXppb25lOiB0LmNvbW1lcmNpYWxpenphemlvbmUsXHJcbiAgICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJCeU9wdGlvbjxUPihsaXN0OiBUW10sIHBpY2s/OiBUKTogVFtdIHtcclxuICBpZiAoIXBpY2spIHJldHVybiBsaXN0O1xyXG4gIHJldHVybiBsaXN0LmluY2x1ZGVzKHBpY2spID8gW3BpY2tdIDogW107XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9vZmZlcnMvc3JjL2FkYXB0ZXJzL3Bvd2VyLmFkYXB0ZXIudHMifQ==