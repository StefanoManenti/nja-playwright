globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  broadband$,
  normalizeAddressFromId,
  store,
  workingOnBroadbandAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
class BroadbandAddress extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(0);
    this.WrapperComponent = StepErrorBoundary;
    this.skipIfDone = true;
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/broadband/BroadbandAddressStep.tsx");
  }
  toString() {
    return "broadbandAddress";
  }
  depends() {
    return [];
  }
  provides() {
    return ["broadbandAddress"];
  }
  isInFlux(get) {
    return get(workingOnBroadbandAtom);
  }
  async toDo(get) {
    const broadband = await get(broadband$);
    const address = await get(broadband.address$);
    if (address) {
      return false;
    }
    const addressIdFromQueryString = this.getAddressIdFromQueryString();
    if (!addressIdFromQueryString) {
      return true;
    }
    const egonAddress = await normalizeAddressFromId(addressIdFromQueryString);
    await store.set(broadband.address$, egonAddress);
    return false;
  }
  /**
   * Funzione di controllo per capire se l'indirizzo arriva da query string
   */
  getAddressIdFromQueryString() {
    const url = new URLSearchParams(window.location.search);
    const id = url.get("egonid");
    return id;
  }
}
export const broadbandAddress = new BroadbandAddress();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUEsRUFDRUE7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsT0FDSztBQUNQLFNBQVNDLE1BQU1DLG9CQUFvQjtBQUVuQyxPQUFPQyx1QkFBdUI7QUFFOUIsTUFBTUMseUJBQXlCSCxLQUFLO0FBQUEsRUFBcEM7QUFBQTtBQUNFSSxvQkFBVyxJQUFJSCxhQUFhLENBQUM7QUFDN0JJLDRCQUFtQkg7QUFDbkJJLHNCQUFhO0FBRWJDLGdCQUFPQSxNQUFNLE9BQU8sd0JBQXdCO0FBQUE7QUFBQSxFQUU1Q0MsV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsVUFBVTtBQUNSLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU8sQ0FBQyxrQkFBa0I7QUFBQSxFQUM1QjtBQUFBLEVBRVVDLFNBQVNDLEtBQWE7QUFDOUIsV0FBT0EsSUFBSWIsc0JBQXNCO0FBQUEsRUFDbkM7QUFBQSxFQUVBLE1BQWdCYyxLQUFLRCxLQUFhO0FBQ2hDLFVBQU1FLFlBQVksTUFBTUYsSUFBSWhCLFVBQVU7QUFDdEMsVUFBTW1CLFVBQVUsTUFBTUgsSUFBSUUsVUFBVUUsUUFBUTtBQUM1QyxRQUFJRCxTQUFTO0FBQ1gsYUFBTztBQUFBLElBQ1Q7QUFFQSxVQUFNRSwyQkFBMkIsS0FBS0MsNEJBQTRCO0FBQ2xFLFFBQUksQ0FBQ0QsMEJBQTBCO0FBQzdCLGFBQU87QUFBQSxJQUNUO0FBRUEsVUFBTUUsY0FBYyxNQUFNdEIsdUJBQXVCb0Isd0JBQXdCO0FBQ3pFLFVBQU1uQixNQUFNc0IsSUFBSU4sVUFBVUUsVUFBVUcsV0FBVztBQUUvQyxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1FELDhCQUE4QjtBQUNwQyxVQUFNRyxNQUFNLElBQUlDLGdCQUFnQkMsT0FBT0MsU0FBU0MsTUFBTTtBQUN0RCxVQUFNQyxLQUFLTCxJQUFJVCxJQUFJLFFBQVE7QUFDM0IsV0FBT2M7QUFBQUEsRUFDVDtBQUNGO0FBRU8sYUFBTUMsbUJBQW1CLElBQUl4QixpQkFBaUIiLCJuYW1lcyI6WyJicm9hZGJhbmQkIiwibm9ybWFsaXplQWRkcmVzc0Zyb21JZCIsInN0b3JlIiwid29ya2luZ09uQnJvYWRiYW5kQXRvbSIsIlN0ZXAiLCJTdGVwUHJpb3JpdHkiLCJTdGVwRXJyb3JCb3VuZGFyeSIsIkJyb2FkYmFuZEFkZHJlc3MiLCJwcmlvcml0eSIsIldyYXBwZXJDb21wb25lbnQiLCJza2lwSWZEb25lIiwibGF6eSIsInRvU3RyaW5nIiwiZGVwZW5kcyIsInByb3ZpZGVzIiwiaXNJbkZsdXgiLCJnZXQiLCJ0b0RvIiwiYnJvYWRiYW5kIiwiYWRkcmVzcyIsImFkZHJlc3MkIiwiYWRkcmVzc0lkRnJvbVF1ZXJ5U3RyaW5nIiwiZ2V0QWRkcmVzc0lkRnJvbVF1ZXJ5U3RyaW5nIiwiZWdvbkFkZHJlc3MiLCJzZXQiLCJ1cmwiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImlkIiwiYnJvYWRiYW5kQWRkcmVzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJicm9hZGJhbmQtYWRkcmVzcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBicm9hZGJhbmQkLFxyXG4gIG5vcm1hbGl6ZUFkZHJlc3NGcm9tSWQsXHJcbiAgc3RvcmUsXHJcbiAgd29ya2luZ09uQnJvYWRiYW5kQXRvbSxcclxufSBmcm9tICdAbmFqLXdvL2RhdGEtYWNjZXNzJztcclxuaW1wb3J0IHsgU3RlcCwgU3RlcFByaW9yaXR5IH0gZnJvbSAnQG5hai13by9lbmdpbmUnO1xyXG5pbXBvcnQgeyBHZXR0ZXIgfSBmcm9tICdqb3RhaS92YW5pbGxhL3R5cGVVdGlscyc7XHJcbmltcG9ydCBTdGVwRXJyb3JCb3VuZGFyeSBmcm9tICcuLi9TdGVwRXJyb3JCb3VuZGFyeSc7XHJcblxyXG5jbGFzcyBCcm9hZGJhbmRBZGRyZXNzIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDApO1xyXG4gIFdyYXBwZXJDb21wb25lbnQgPSBTdGVwRXJyb3JCb3VuZGFyeTtcclxuICBza2lwSWZEb25lID0gdHJ1ZTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9Ccm9hZGJhbmRBZGRyZXNzU3RlcCcpO1xyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAnYnJvYWRiYW5kQWRkcmVzcyc7XHJcbiAgfVxyXG5cclxuICBkZXBlbmRzKCkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZXMoKSB7XHJcbiAgICByZXR1cm4gWydicm9hZGJhbmRBZGRyZXNzJ107XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgaXNJbkZsdXgoZ2V0OiBHZXR0ZXIpIHtcclxuICAgIHJldHVybiBnZXQod29ya2luZ09uQnJvYWRiYW5kQXRvbSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgdG9EbyhnZXQ6IEdldHRlcikge1xyXG4gICAgY29uc3QgYnJvYWRiYW5kID0gYXdhaXQgZ2V0KGJyb2FkYmFuZCQpO1xyXG4gICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IGdldChicm9hZGJhbmQuYWRkcmVzcyQpO1xyXG4gICAgaWYgKGFkZHJlc3MpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFkZHJlc3NJZEZyb21RdWVyeVN0cmluZyA9IHRoaXMuZ2V0QWRkcmVzc0lkRnJvbVF1ZXJ5U3RyaW5nKCk7XHJcbiAgICBpZiAoIWFkZHJlc3NJZEZyb21RdWVyeVN0cmluZykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlZ29uQWRkcmVzcyA9IGF3YWl0IG5vcm1hbGl6ZUFkZHJlc3NGcm9tSWQoYWRkcmVzc0lkRnJvbVF1ZXJ5U3RyaW5nKTtcclxuICAgIGF3YWl0IHN0b3JlLnNldChicm9hZGJhbmQuYWRkcmVzcyQsIGVnb25BZGRyZXNzKTtcclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGdW56aW9uZSBkaSBjb250cm9sbG8gcGVyIGNhcGlyZSBzZSBsJ2luZGlyaXp6byBhcnJpdmEgZGEgcXVlcnkgc3RyaW5nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRBZGRyZXNzSWRGcm9tUXVlcnlTdHJpbmcoKSB7XHJcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgY29uc3QgaWQgPSB1cmwuZ2V0KCdlZ29uaWQnKTtcclxuICAgIHJldHVybiBpZDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBicm9hZGJhbmRBZGRyZXNzID0gbmV3IEJyb2FkYmFuZEFkZHJlc3MoKTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9zdGVwcy9zcmMvbGliL2Jyb2FkYmFuZC9icm9hZGJhbmQtYWRkcmVzcy50c3gifQ==