globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, atomWithRetryableQuery, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
export async function checkPayment(payload) {
  const logHash = generateOperationID();
  const queryParams = new URLSearchParams({
    logHash
  });
  const response = await fetch(`${API}/webOrderCommonServices/cambio-prodotto/pagamento/v1/check?${queryParams}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(payload)
  });
  if (response.status === 400) {
    throw new ServiceUnhandledResponseError("Codice cliente vuoto", logHash, response);
  }
  if (response.status === 500) {
    throw new ServiceUnhandledResponseError("Errore imprevisto", logHash, response);
  }
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  return data;
}
export const atomWithCheckPayment = (codiceCliente, codicePlico, idLead) => {
  return atomWithRetryableQuery(async () => {
    return {
      queryKey: ["checkPayment", codiceCliente, codicePlico, idLead],
      queryFn: () => checkPayment({
        codiceCliente,
        codicePlico,
        idLead
      })
    };
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFDQUFxQztBQUM5QyxTQUFTQyxLQUFLQyx3QkFBd0JDLDJCQUEyQjtBQXNFakUsc0JBQXNCQyxhQUNwQkMsU0FDK0I7QUFDL0IsUUFBTUMsVUFBVUgsb0JBQW9CO0FBQ3BDLFFBQU1JLGNBQWMsSUFBSUMsZ0JBQWdCO0FBQUEsSUFBRUY7QUFBQUEsRUFBUSxDQUFDO0FBQ25ELFFBQU1HLFdBQVcsTUFBTUMsTUFDckIsR0FBR1QsR0FBRyw4REFBOERNLFdBQVcsSUFDL0U7QUFBQSxJQUNFSSxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQUMsTUFBTUMsS0FBS0MsVUFBVVgsT0FBTztBQUFBLEVBQzlCLENBQ0Y7QUFFQSxNQUFJSSxTQUFTUSxXQUFXLEtBQUs7QUFDM0IsVUFBTSxJQUFJakIsOEJBQ1Isd0JBQ0FNLFNBQ0FHLFFBQ0Y7QUFBQSxFQUNGO0FBQ0EsTUFBSUEsU0FBU1EsV0FBVyxLQUFLO0FBQzNCLFVBQU0sSUFBSWpCLDhCQUNSLHFCQUNBTSxTQUNBRyxRQUNGO0FBQUEsRUFDRjtBQUNBLE1BQUlBLFNBQVNRLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUlqQiw4QkFDUlMsU0FBU1MsWUFDVFosU0FDQUcsUUFDRjtBQUFBLEVBQ0Y7QUFFQSxRQUFNVSxPQUFPLE1BQU1WLFNBQVNXLEtBQUs7QUFDakMsU0FBT0Q7QUFDVDtBQVNPLGFBQU1FLHVCQUF1QkEsQ0FDbENDLGVBQ0FDLGFBQ0FDLFdBQ0c7QUFDSCxTQUFPdEIsdUJBQXVCLFlBQVk7QUFDeEMsV0FBTztBQUFBLE1BQ0x1QixVQUFVLENBQUMsZ0JBQWdCSCxlQUFlQyxhQUFhQyxNQUFNO0FBQUEsTUFDN0RFLFNBQVNBLE1BQ1B0QixhQUFhO0FBQUEsUUFDWGtCO0FBQUFBLFFBQ0FDO0FBQUFBLFFBQ0FDO0FBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNGLENBQUM7QUFDSCIsIm5hbWVzIjpbIlNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIiwiQVBJIiwiYXRvbVdpdGhSZXRyeWFibGVRdWVyeSIsImdlbmVyYXRlT3BlcmF0aW9uSUQiLCJjaGVja1BheW1lbnQiLCJwYXlsb2FkIiwibG9nSGFzaCIsInF1ZXJ5UGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiIsImF0b21XaXRoQ2hlY2tQYXltZW50IiwiY29kaWNlQ2xpZW50ZSIsImNvZGljZVBsaWNvIiwiaWRMZWFkIiwicXVlcnlLZXkiLCJxdWVyeUZuIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImNoZWNrUGF5bWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvciB9IGZyb20gJ0BuYWotd28vdXRpbCc7XHJcbmltcG9ydCB7IEFQSSwgYXRvbVdpdGhSZXRyeWFibGVRdWVyeSwgZ2VuZXJhdGVPcGVyYXRpb25JRCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgU2VnbWVudCB9IGZyb20gJy4uLy4uL2F0b21zL2VudW1zJztcclxuXHJcbi8qKlxyXG4gKiBSZXF1ZXN0IGludGVyZmFjZSBmb3IgdGhlIHBheW1lbnQgY2hlY2sgc2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDaGVja1BheW1lbnRSZXF1ZXN0IHtcclxuICAvKiogQ3VzdG9tZXIgY29kZSAocmVxdWlyZWQpICovXHJcbiAgY29kaWNlQ2xpZW50ZTogc3RyaW5nO1xyXG4gIC8qKiBQbGljbyBjb2RlIChvcHRpb25hbCkgKi9cclxuICBjb2RpY2VQbGljbz86IHN0cmluZztcclxuICAvKiogTGVhZCBJRCAob3B0aW9uYWwpICovXHJcbiAgaWRMZWFkPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUmVzcG9uc2UgaW50ZXJmYWNlIGZvciB0aGUgcGF5bWVudCBjaGVjayBzZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrUGF5bWVudFJlc3BvbnNlIHtcclxuICBlc2l0bzogQ2hlY2tQYXltZW50RXNpdG87XHJcbiAgZGF0aVBhZ2FtZW50bz86IFBheW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXltZW50IGRhdGEgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2lkZW50aWFsUGF5bWVudCB7XHJcbiAgZG9taWNpbGlhemlvbmU6IGJvb2xlYW47XHJcbiAgaWJhbj86IHN0cmluZyB8IG51bGw7XHJcbiAgc2VnbWVudG9JbnRlc3RhdGFyaW86IFNlZ21lbnQuUkVTSUQ7XHJcbiAgbm9tZUludGVzdGF0YXJpbzogc3RyaW5nO1xyXG4gIGNvZ25vbWVJbnRlc3RhdGFyaW86IHN0cmluZztcclxuICBjb2RGaXNjSW50ZXN0YXRhcmlvOiBzdHJpbmc7XHJcbiAgcGFydGl0YUl2YUludGVzdGF0YXJpbz86IG51bGw7XHJcbiAgcmFnU29jSW50ZXN0YXRhcmlvPzogbnVsbDtcclxuICBub21lU290dG9zY3JpdHRvcmU/OiBzdHJpbmcgfCBudWxsO1xyXG4gIGNvZ25vbWVTb3R0b3Njcml0dG9yZT86IHN0cmluZyB8IG51bGw7XHJcbiAgY29kRmlzY1NvdHRvc2NyaXR0b3JlPzogc3RyaW5nIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTbWFsbEJ1c2luZXNzUGF5bWVudCB7XHJcbiAgZG9taWNpbGlhemlvbmU6IGJvb2xlYW47XHJcbiAgaWJhbj86IHN0cmluZyB8IG51bGw7XHJcbiAgc2VnbWVudG9JbnRlc3RhdGFyaW86IFNlZ21lbnQuU01BTEw7XHJcbiAgbm9tZUludGVzdGF0YXJpbz86IG51bGw7XHJcbiAgY29nbm9tZUludGVzdGF0YXJpbz86IG51bGw7XHJcbiAgY29kRmlzY0ludGVzdGF0YXJpbzogc3RyaW5nO1xyXG4gIHBhcnRpdGFJdmFJbnRlc3RhdGFyaW86IHN0cmluZztcclxuICByYWdTb2NJbnRlc3RhdGFyaW86IHN0cmluZztcclxuICBub21lU290dG9zY3JpdHRvcmU/OiBzdHJpbmcgfCBudWxsO1xyXG4gIGNvZ25vbWVTb3R0b3Njcml0dG9yZT86IHN0cmluZyB8IG51bGw7XHJcbiAgY29kRmlzY1NvdHRvc2NyaXR0b3JlPzogc3RyaW5nIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUGF5bWVudCA9IFJlc2lkZW50aWFsUGF5bWVudCB8IFNtYWxsQnVzaW5lc3NQYXltZW50O1xyXG4vKipcclxuICogUG9zc2libGUgcmVzcG9uc2Ugc3RhdHVzIHZhbHVlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2hlY2tQYXltZW50RXNpdG8gPVxyXG4gIHwgJ0NPRElDRV9DTElFTlRFX1ZVT1RPJ1xyXG4gIHwgJ0NMSUVOVEVfSU5FU0lTVEVOVEUnXHJcbiAgfCAnTkVTU1VOX0RBVE9fRElfUEFHQU1FTlRPX0FUVElWTydcclxuICB8ICdFUlJPUkVfSU1QUkVWSVNUTydcclxuICB8ICdPSyc7XHJcblxyXG4vKipcclxuICogQ2hlY2tzIHRoZSBwYXltZW50IGRhdGEgZm9yIGEgY3VzdG9tZXJcclxuICogQHBhcmFtIHBheWxvYWQgUmVxdWVzdCBwYXlsb2FkIGNvbnRhaW5pbmcgY3VzdG9tZXIgaW5mb3JtYXRpb25cclxuICogQHJldHVybnMgUGF5bWVudCBkYXRhIHJlc3BvbnNlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tQYXltZW50KFxyXG4gIHBheWxvYWQ6IENoZWNrUGF5bWVudFJlcXVlc3RcclxuKTogUHJvbWlzZTxDaGVja1BheW1lbnRSZXNwb25zZT4ge1xyXG4gIGNvbnN0IGxvZ0hhc2ggPSBnZW5lcmF0ZU9wZXJhdGlvbklEKCk7XHJcbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHsgbG9nSGFzaCB9KTtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYCR7QVBJfS93ZWJPcmRlckNvbW1vblNlcnZpY2VzL2NhbWJpby1wcm9kb3R0by9wYWdhbWVudG8vdjEvY2hlY2s/JHtxdWVyeVBhcmFtc31gLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxyXG4gICAgfVxyXG4gICk7XHJcbiAgLy8gSGFuZGxlIGRpZmZlcmVudCByZXNwb25zZSBzdGF0dXMgY29kZXNcclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihcclxuICAgICAgJ0NvZGljZSBjbGllbnRlIHZ1b3RvJyxcclxuICAgICAgbG9nSGFzaCxcclxuICAgICAgcmVzcG9uc2VcclxuICAgICk7XHJcbiAgfVxyXG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDUwMCkge1xyXG4gICAgdGhyb3cgbmV3IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yKFxyXG4gICAgICAnRXJyb3JlIGltcHJldmlzdG8nLFxyXG4gICAgICBsb2dIYXNoLFxyXG4gICAgICByZXNwb25zZVxyXG4gICAgKTtcclxuICB9XHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICB0aHJvdyBuZXcgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IoXHJcbiAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQsXHJcbiAgICAgIGxvZ0hhc2gsXHJcbiAgICAgIHJlc3BvbnNlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICByZXR1cm4gZGF0YSBhcyBDaGVja1BheW1lbnRSZXNwb25zZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gYXRvbSBmb3IgY2hlY2tpbmcgcGF5bWVudCBkYXRhXHJcbiAqIEBwYXJhbSBjb2RpY2VDbGllbnRlIEN1c3RvbWVyIGNvZGVcclxuICogQHBhcmFtIGNvZGljZVBsaWNvIE9wdGlvbmFsIHBsaWNvIGNvZGVcclxuICogQHBhcmFtIGlkTGVhZCBPcHRpb25hbCBsZWFkIElEXHJcbiAqIEByZXR1cm5zIEF0b20gd2l0aCBwYXltZW50IGRhdGEgcmVzcG9uc2VcclxuICovXHJcbmV4cG9ydCBjb25zdCBhdG9tV2l0aENoZWNrUGF5bWVudCA9IChcclxuICBjb2RpY2VDbGllbnRlOiBzdHJpbmcsXHJcbiAgY29kaWNlUGxpY28/OiBzdHJpbmcsXHJcbiAgaWRMZWFkPzogc3RyaW5nXHJcbikgPT4ge1xyXG4gIHJldHVybiBhdG9tV2l0aFJldHJ5YWJsZVF1ZXJ5KGFzeW5jICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHF1ZXJ5S2V5OiBbJ2NoZWNrUGF5bWVudCcsIGNvZGljZUNsaWVudGUsIGNvZGljZVBsaWNvLCBpZExlYWRdLFxyXG4gICAgICBxdWVyeUZuOiAoKSA9PlxyXG4gICAgICAgIGNoZWNrUGF5bWVudCh7XHJcbiAgICAgICAgICBjb2RpY2VDbGllbnRlLFxyXG4gICAgICAgICAgY29kaWNlUGxpY28sXHJcbiAgICAgICAgICBpZExlYWQsXHJcbiAgICAgICAgfSksXHJcbiAgICB9O1xyXG4gIH0pO1xyXG59O1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3dlYm9yZGVyL2NoZWNrUGF5bWVudC50cyJ9