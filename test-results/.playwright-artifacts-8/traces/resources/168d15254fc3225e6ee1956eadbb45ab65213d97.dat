import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const Fragment = __vite__cjsImport0_react_jsxDevRuntime["Fragment"]; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { Popup } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@mui_base_Unstable_Popup_Popup.js?v=0189a8d1";
import { useAutocomplete } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@mui_base_useAutocomplete.js?v=0189a8d1";
import { unstable_useForkRef as useForkRef } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@mui_utils.js?v=0189a8d1";
import clsx from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/clsx.js?v=0189a8d1";
import { middleware } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.tsx";
import classes from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Select.module.less";
import { TextField } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/TextField.tsx";
export const Autocomplete = function Autocomplete2({
  inputRef,
  renderOption,
  InputProps: textFieldProps,
  className,
  ...autoComplete
}) {
  _s();
  const {
    getRootProps,
    getInputProps,
    getListboxProps,
    getOptionProps,
    groupedOptions,
    popupOpen,
    anchorEl,
    setAnchorEl
  } = useAutocomplete({
    ...autoComplete
  });
  const rootProps = getRootProps();
  const inputProps = getInputProps();
  const rootRef = setAnchorEl;
  const inputRefForked = useForkRef(inputRef, inputProps.ref);
  return /* @__PURE__ */ jsxDEV(Fragment, { children: [
    /* @__PURE__ */ jsxDEV(
      "div",
      {
        ...rootProps,
        ref: rootRef,
        className: clsx(
          inputProps["aria-expanded"] && "base--expanded",
          className
        ),
        children: /* @__PURE__ */ jsxDEV(
          TextField,
          {
            ...textFieldProps,
            ...inputProps,
            ref: inputRefForked
          },
          void 0,
          false,
          {
            fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
            lineNumber: 67,
            columnNumber: 9
          },
          this
        )
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
        lineNumber: 59,
        columnNumber: 7
      },
      this
    ),
    anchorEl && groupedOptions.length > 0 && /* @__PURE__ */ jsxDEV(
      Popup,
      {
        open: popupOpen,
        anchor: anchorEl,
        className: classes.popup,
        middleware,
        children: /* @__PURE__ */ jsxDEV("ul", { ...getListboxProps(), className: classes.listbox, children: groupedOptions.map((option, index) => {
          const { key, ...optionProps } = getOptionProps({
            option,
            index
          });
          return /* @__PURE__ */ jsxDEV(
            "li",
            {
              ...optionProps,
              className: clsx(
                optionProps["aria-selected"] && "base--selected"
              ),
              children: renderOption(option)
            },
            key,
            false,
            {
              fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
              lineNumber: 90,
              columnNumber: 15
            },
            this
          );
        }) }, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
          lineNumber: 82,
          columnNumber: 11
        }, this)
      },
      void 0,
      false,
      {
        fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
        lineNumber: 76,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, true, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx",
    lineNumber: 58,
    columnNumber: 5
  }, this);
};
_s(Autocomplete, "Kiom0riNdFXpsmkxh9bbELcl1eQ=", false, function() {
  return [useAutocomplete, useForkRef];
});
_c = Autocomplete;
var _c;
$RefreshReg$(_c, "Autocomplete");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/Autocomplete.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,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cmtSZWYiLCJ1c2VGb3JrUmVmIiwiY2xzeCIsIm1pZGRsZXdhcmUiLCJjbGFzc2VzIiwiVGV4dEZpZWxkIiwiQXV0b2NvbXBsZXRlIiwiaW5wdXRSZWYiLCJyZW5kZXJPcHRpb24iLCJJbnB1dFByb3BzIiwidGV4dEZpZWxkUHJvcHMiLCJjbGFzc05hbWUiLCJhdXRvQ29tcGxldGUiLCJfcyIsImdldFJvb3RQcm9wcyIsImdldElucHV0UHJvcHMiLCJnZXRMaXN0Ym94UHJvcHMiLCJnZXRPcHRpb25Qcm9wcyIsImdyb3VwZWRPcHRpb25zIiwicG9wdXBPcGVuIiwiYW5jaG9yRWwiLCJzZXRBbmNob3JFbCIsInJvb3RQcm9wcyIsImlucHV0UHJvcHMiLCJyb290UmVmIiwiaW5wdXRSZWZGb3JrZWQiLCJyZWYiLCJsZW5ndGgiLCJwb3B1cCIsImxpc3Rib3giLCJtYXAiLCJvcHRpb24iLCJpbmRleCIsImtleSIsIm9wdGlvblByb3BzIiwiX2MiLCIkUmVmcmVzaFJlZyQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiQXV0b2NvbXBsZXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3B1cCB9IGZyb20gJ0BtdWkvYmFzZS9VbnN0YWJsZV9Qb3B1cC9Qb3B1cCc7XHJcbmltcG9ydCB7IHVzZUF1dG9jb21wbGV0ZSB9IGZyb20gJ0BtdWkvYmFzZS91c2VBdXRvY29tcGxldGUnO1xyXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcclxuaW1wb3J0IGNsc3gsIHsgQ2xhc3NWYWx1ZSB9IGZyb20gJ2Nsc3gnO1xyXG5pbXBvcnQgeyB0eXBlIEZvcndhcmRlZFJlZiwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1pZGRsZXdhcmUgfSBmcm9tICcuL1NlbGVjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vU2VsZWN0Lm1vZHVsZS5sZXNzJztcclxuaW1wb3J0IHsgVGV4dEZpZWxkLCB0eXBlIFRleHRGaWVsZFByb3BzIH0gZnJvbSAnLi9UZXh0RmllbGQnO1xyXG5cclxuZXhwb3J0IHR5cGUgQXV0b2NvbXBsZXRlUHJvcHM8XHJcbiAgVmFsdWUsXHJcbiAgTXVsdGlwbGUgZXh0ZW5kcyBib29sZWFuIHwgdW5kZWZpbmVkID0gZmFsc2UsXHJcbiAgRGlzYWJsZUNsZWFyYWJsZSBleHRlbmRzIGJvb2xlYW4gfCB1bmRlZmluZWQgPSBmYWxzZSxcclxuICBGcmVlU29sbyBleHRlbmRzIGJvb2xlYW4gfCB1bmRlZmluZWQgPSBmYWxzZVxyXG4+ID0ge1xyXG4gIGlucHV0UmVmPzogRm9yd2FyZGVkUmVmPEhUTUxJbnB1dEVsZW1lbnQ+O1xyXG4gIHJlbmRlck9wdGlvbjogKG9wdGlvbjogVmFsdWUpID0+IFJlYWN0Tm9kZTtcclxuICBJbnB1dFByb3BzOiBUZXh0RmllbGRQcm9wcztcclxuICBjbGFzc05hbWU/OiBDbGFzc1ZhbHVlO1xyXG59ICYgUGFyYW1ldGVyczxcclxuICB0eXBlb2YgdXNlQXV0b2NvbXBsZXRlPFZhbHVlLCBNdWx0aXBsZSwgRGlzYWJsZUNsZWFyYWJsZSwgRnJlZVNvbG8+XHJcbj5bMF07XHJcblxyXG5leHBvcnQgY29uc3QgQXV0b2NvbXBsZXRlID0gZnVuY3Rpb24gQXV0b2NvbXBsZXRlPFxyXG4gIFZhbHVlLFxyXG4gIE11bHRpcGxlIGV4dGVuZHMgYm9vbGVhbiB8IHVuZGVmaW5lZCA9IGZhbHNlLFxyXG4gIERpc2FibGVDbGVhcmFibGUgZXh0ZW5kcyBib29sZWFuIHwgdW5kZWZpbmVkID0gZmFsc2UsXHJcbiAgRnJlZVNvbG8gZXh0ZW5kcyBib29sZWFuIHwgdW5kZWZpbmVkID0gZmFsc2VcclxuPih7XHJcbiAgaW5wdXRSZWYsXHJcbiAgcmVuZGVyT3B0aW9uLFxyXG4gIElucHV0UHJvcHM6IHRleHRGaWVsZFByb3BzLFxyXG4gIGNsYXNzTmFtZSxcclxuICAuLi5hdXRvQ29tcGxldGVcclxufTogQXV0b2NvbXBsZXRlUHJvcHM8VmFsdWUsIE11bHRpcGxlLCBEaXNhYmxlQ2xlYXJhYmxlLCBGcmVlU29sbz4pIHtcclxuICBjb25zdCB7XHJcbiAgICBnZXRSb290UHJvcHMsXHJcbiAgICBnZXRJbnB1dFByb3BzLFxyXG4gICAgZ2V0TGlzdGJveFByb3BzLFxyXG4gICAgZ2V0T3B0aW9uUHJvcHMsXHJcbiAgICBncm91cGVkT3B0aW9ucyxcclxuICAgIHBvcHVwT3BlbixcclxuICAgIGFuY2hvckVsLFxyXG4gICAgc2V0QW5jaG9yRWwsXHJcbiAgfSA9IHVzZUF1dG9jb21wbGV0ZSh7XHJcbiAgICAuLi5hdXRvQ29tcGxldGUsXHJcbiAgfSk7XHJcblxyXG4gIC8vIGNvbnN0IHJvb3RSZWYgPSB1c2VGb3JrUmVmKHJlZiwgc2V0QW5jaG9yRWwpO1xyXG5cclxuICBjb25zdCByb290UHJvcHMgPSBnZXRSb290UHJvcHMoKTtcclxuICBjb25zdCBpbnB1dFByb3BzID0gZ2V0SW5wdXRQcm9wcygpO1xyXG5cclxuICBjb25zdCByb290UmVmID0gc2V0QW5jaG9yRWw7XHJcbiAgY29uc3QgaW5wdXRSZWZGb3JrZWQgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBpbnB1dFByb3BzLnJlZik7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgey4uLnJvb3RQcm9wc31cclxuICAgICAgICByZWY9e3Jvb3RSZWZ9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxyXG4gICAgICAgICAgaW5wdXRQcm9wc1snYXJpYS1leHBhbmRlZCddICYmICdiYXNlLS1leHBhbmRlZCcsXHJcbiAgICAgICAgICBjbGFzc05hbWVcclxuICAgICAgICApfVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgLy8gZW5kQWRvcm5tZW50PXs8Q2hldnJvbjE2TGlnaHRJY29uIGNsYXNzTmFtZT17Y2xhc3Nlcy5pY29ufSAvPn1cclxuICAgICAgICAgIHsuLi50ZXh0RmllbGRQcm9wc31cclxuICAgICAgICAgIHsuLi5pbnB1dFByb3BzfVxyXG4gICAgICAgICAgcmVmPXtpbnB1dFJlZkZvcmtlZH1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIHthbmNob3JFbCAmJiBncm91cGVkT3B0aW9ucy5sZW5ndGggPiAwICYmIChcclxuICAgICAgICA8UG9wdXBcclxuICAgICAgICAgIG9wZW49e3BvcHVwT3Blbn1cclxuICAgICAgICAgIGFuY2hvcj17YW5jaG9yRWx9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucG9wdXB9XHJcbiAgICAgICAgICBtaWRkbGV3YXJlPXttaWRkbGV3YXJlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDx1bCB7Li4uZ2V0TGlzdGJveFByb3BzKCl9IGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0Ym94fT5cclxuICAgICAgICAgICAgeyhncm91cGVkT3B0aW9ucyBhcyBWYWx1ZVtdKS5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGtleSBpcyBwcmVzZW50XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBrZXksIC4uLm9wdGlvblByb3BzIH0gPSBnZXRPcHRpb25Qcm9wcyh7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24sXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGxpXHJcbiAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICB7Li4ub3B0aW9uUHJvcHN9XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25Qcm9wc1snYXJpYS1zZWxlY3RlZCddICYmICdiYXNlLS1zZWxlY3RlZCdcclxuICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge3JlbmRlck9wdGlvbihvcHRpb24pfVxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9Qb3B1cD5cclxuICAgICAgKX1cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvdWktYXRvbXMvc3JjL2xpYi9BdXRvY29tcGxldGUudHN4In0=