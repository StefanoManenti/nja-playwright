import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import __vite__cjsImport3_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react; const useEffect = __vite__cjsImport3_react["useEffect"]; const useState = __vite__cjsImport3_react["useState"];
import "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/Modal.module.less";
import { ButtonPln } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/ButtonPln.tsx";
import { FormControlLabel } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/FormControlLabel.tsx";
import { Modal } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/Modal.tsx";
import { ModalBox, ModalButtonsBox } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalBox.tsx";
import { ModalGenericContent } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalGenericContent.tsx";
import { ModalWrapper } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/ModalWrapper.tsx";
export function PrintModal({
  title,
  icon,
  children,
  noButtons = false,
  buttons = [],
  defaultButton = {
    text: "OK",
    color: "primary",
    onButtonClick: () => console.log("Default button action"),
    type: "button",
    closeOnAction: true
  },
  contentAlign = "default",
  onOpen,
  onClose,
  closeButton = true,
  footer = null
}) {
  _s();
  const [isOpen, setIsOpen] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  useEffect(() => {
    setIsOpen(true);
    if (onOpen) {
      onOpen();
    }
    return () => {
    };
  }, [onOpen]);
  const handleClose = () => {
    setIsOpen(false);
    if (onClose) {
      onClose();
    }
  };
  const handleAction = (button) => {
    if (button.onButtonClick) {
      button.onButtonClick();
    }
  };
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxDEV(ModalWrapper, { children: /* @__PURE__ */ jsxDEV(Modal, { children: /* @__PURE__ */ jsxDEV(
    ModalGenericContent,
    {
      showClose: closeButton,
      onClose: handleClose,
      title,
      icon,
      children: [
        /* @__PURE__ */ jsxDEV(ModalBox, { align: contentAlign, gap: 2, children: React.Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            if (child.type === FormControlLabel && child.props?.type === "checkbox") {
              return React.cloneElement(child, {
                ...child.props,
                inputProps: {
                  ...child.props.inputProps,
                  onChange: (event) => {
                    setIsChecked(event.target.checked);
                    if (child.props.inputProps?.onChange) {
                      child.props.inputProps.onChange(event);
                    }
                  }
                }
              });
            }
            if (child.type === ButtonPln && child.props?.dataOnNext) {
              alert("trigger OK");
              return child;
            }
          }
          return child;
        }) }, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
          lineNumber: 139,
          columnNumber: 11
        }, this),
        !noButtons && /* @__PURE__ */ jsxDEV(ModalButtonsBox, { children: (buttons.length > 0 ? buttons : [defaultButton]).map(
          (button, index) => {
            const isLastButton = index === buttons.length - 1;
            let disabled = false;
            React.Children.forEach(children, (child) => {
              if (React.isValidElement(child) && child.props?.type === "checkbox") {
                disabled = isLastButton && !isChecked;
              }
            });
            return (
              // Render effettivo del bottone
              /* @__PURE__ */ jsxDEV(
                ButtonPln,
                {
                  color: button.color || defaultButton.color,
                  onClick: () => handleAction(button),
                  disabled,
                  children: [
                    button.icon,
                    button.text
                  ]
                },
                index,
                true,
                {
                  fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
                  lineNumber: 197,
                  columnNumber: 19
                },
                this
              )
            );
          }
        ) }, void 0, false, {
          fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
          lineNumber: 179,
          columnNumber: 11
        }, this),
        footer
      ]
    },
    void 0,
    true,
    {
      fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
      lineNumber: 132,
      columnNumber: 9
    },
    this
  ) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
    lineNumber: 131,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx",
    lineNumber: 130,
    columnNumber: 5
  }, this);
}
_s(PrintModal, "C7wOG6bGpPoCqhvPeDhNvF1tPzc=");
_c = PrintModal;
export default PrintModal;
var _c;
$RefreshReg$(_c, "PrintModal");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/lib/modal/PrintModal.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,