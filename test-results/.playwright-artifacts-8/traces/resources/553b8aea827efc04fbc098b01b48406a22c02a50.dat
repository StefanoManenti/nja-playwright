globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import {
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class ChangeOfferRecap extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(21);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/change-offer/ChangeOfferRecapStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "changeOfferRecap";
  }
  isInFlux(get) {
    const operativeMode = get(operativeModeAtom);
    return equals(operativeMode, OperativeMode.CHANGE_OFFER) && get(operativeModeEnabled$);
  }
  provides() {
    return [StepDependencies.NAME, StepDependencies.TAX_ID];
  }
}
export const changeOfferRecap = new ChangeOfferRecap();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFDOUI7QUFBQSxFQUNFQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxPQUNLO0FBRVAsU0FBU0MsY0FBYztBQUN2QixTQUFTQyx3QkFBd0I7QUFFakMsTUFBTUMseUJBQXlCUixLQUFLO0FBQUEsRUFBcEM7QUFBQTtBQUNFUyxvQkFBVyxJQUFJUixhQUFhLEVBQUU7QUFFOUJTLGdCQUFPQSxNQUFNLE9BQU8sd0JBQXdCO0FBQzVDQyw0QkFBbUJUO0FBQUFBO0FBQUFBLEVBRW5CVSxXQUFXO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVVQyxTQUFTQyxLQUFhO0FBQzlCLFVBQU1DLGdCQUFnQkQsSUFBSVYsaUJBQWlCO0FBRTNDLFdBQ0VFLE9BQU9TLGVBQWVaLGNBQWNhLFlBQVksS0FDaERGLElBQUlULHFCQUFxQjtBQUFBLEVBRTdCO0FBQUEsRUFFQVksV0FBVztBQUNULFdBQU8sQ0FBQ1YsaUJBQWlCVyxNQUFNWCxpQkFBaUJZLE1BQU07QUFBQSxFQUN4RDtBQUNGO0FBRU8sYUFBTUMsbUJBQW1CLElBQUlaLGlCQUFpQiIsIm5hbWVzIjpbIlN0ZXAiLCJTdGVwUHJpb3JpdHkiLCJTdGVwRXJyb3JCb3VuZGFyeSIsIk9wZXJhdGl2ZU1vZGUiLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGVFbmFibGVkJCIsImVxdWFscyIsIlN0ZXBEZXBlbmRlbmNpZXMiLCJDaGFuZ2VPZmZlclJlY2FwIiwicHJpb3JpdHkiLCJsYXp5IiwiV3JhcHBlckNvbXBvbmVudCIsInRvU3RyaW5nIiwiaXNJbkZsdXgiLCJnZXQiLCJvcGVyYXRpdmVNb2RlIiwiQ0hBTkdFX09GRkVSIiwicHJvdmlkZXMiLCJOQU1FIiwiVEFYX0lEIiwiY2hhbmdlT2ZmZXJSZWNhcCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJjaGFuZ2Utb2ZmZXItcmVjYXAudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHtcclxuICBPcGVyYXRpdmVNb2RlLFxyXG4gIG9wZXJhdGl2ZU1vZGVBdG9tLFxyXG4gIG9wZXJhdGl2ZU1vZGVFbmFibGVkJCxcclxufSBmcm9tICdAbmFqLXdvL2RhdGEtYWNjZXNzJztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBTdGVwRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vU3RlcERlcGVuZGVuY2llcyc7XHJcblxyXG5jbGFzcyBDaGFuZ2VPZmZlclJlY2FwIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDIxKTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9DaGFuZ2VPZmZlclJlY2FwU3RlcCcpO1xyXG4gIFdyYXBwZXJDb21wb25lbnQgPSBTdGVwRXJyb3JCb3VuZGFyeTtcclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJ2NoYW5nZU9mZmVyUmVjYXAnO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICBjb25zdCBvcGVyYXRpdmVNb2RlID0gZ2V0KG9wZXJhdGl2ZU1vZGVBdG9tKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBlcXVhbHMob3BlcmF0aXZlTW9kZSwgT3BlcmF0aXZlTW9kZS5DSEFOR0VfT0ZGRVIpICYmXHJcbiAgICAgIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZXMoKSB7XHJcbiAgICByZXR1cm4gW1N0ZXBEZXBlbmRlbmNpZXMuTkFNRSwgU3RlcERlcGVuZGVuY2llcy5UQVhfSURdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNoYW5nZU9mZmVyUmVjYXAgPSBuZXcgQ2hhbmdlT2ZmZXJSZWNhcCgpO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL3N0ZXBzL3NyYy9saWIvY2hhbmdlLW9mZmVyL2NoYW5nZS1vZmZlci1yZWNhcC50c3gifQ==