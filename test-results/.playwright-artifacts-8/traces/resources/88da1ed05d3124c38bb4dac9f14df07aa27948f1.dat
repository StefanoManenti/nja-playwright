globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { useQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/@tanstack_react-query.js?v=0189a8d1";
import __vite__cjsImport1_react from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react.js?v=0189a8d1"; const useState = __vite__cjsImport1_react["useState"];
import { useDebounce } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/use-debounce.js?v=0189a8d1";
export async function suggestAteco(code, signal) {
  const {
    ATECO_RECORDS: ATECO_RECORDS2
  } = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/ATECO_RECORDS.ts");
  let filteredRecords = ATECO_RECORDS2;
  if (code) {
    if (code.includes("*")) {
      const [prefix, suffix] = code.split("*");
      filteredRecords = ATECO_RECORDS2.filter((record) => record.code.startsWith(prefix) && record.code.endsWith(suffix));
    } else {
      filteredRecords = ATECO_RECORDS2.filter((record) => record.code.startsWith(code));
    }
  }
  return filteredRecords;
}
export function useSuggestAteco() {
  const [searchText, setSearchText] = useState("");
  const [searchTextDebounced] = useDebounce(searchText, 100);
  const query = useQuery({
    queryKey: ["ateco", searchTextDebounced],
    queryFn: (context) => suggestAteco(searchTextDebounced, context.signal),
    enabled: searchTextDebounced.match(/^[0-9]{2}\.[0-9]{2}|[0-9]{2}\.\*\.[0-9]{2}/) !== null
  });
  return [query, setSearchText];
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLGdCQUFnQjtBQUN6QixTQUFTQyxnQkFBZ0I7QUFDekIsU0FBU0MsbUJBQW1CO0FBNkQ1QixzQkFBc0JDLGFBQWFDLE1BQWNDLFFBQXNCO0FBRXJFLFFBQU07QUFBQSxJQUFFQztBQUFBQSxFQUFjLElBQUksTUFBTSxPQUFPLGlCQUFpQjtBQUV4RCxNQUFJQyxrQkFBa0JEO0FBRXRCLE1BQUlGLE1BQU07QUFFUixRQUFJQSxLQUFLSSxTQUFTLEdBQUcsR0FBRztBQUN0QixZQUFNLENBQUNDLFFBQVFDLE1BQU0sSUFBSU4sS0FBS08sTUFBTSxHQUFHO0FBQ3ZDSix3QkFBa0JELGVBQWNNLE9BQzdCQyxZQUNDQSxPQUFPVCxLQUFLVSxXQUFXTCxNQUFPLEtBQUtJLE9BQU9ULEtBQUtXLFNBQVNMLE1BQU8sQ0FDbkU7QUFBQSxJQUNGLE9BRUs7QUFDSEgsd0JBQWtCRCxlQUFjTSxPQUFRQyxZQUN0Q0EsT0FBT1QsS0FBS1UsV0FBV1YsSUFBSSxDQUM3QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsU0FBT0c7QUFDVDtBQU1PLGdCQUFTUyxrQkFBa0I7QUFDaEMsUUFBTSxDQUFDQyxZQUFZQyxhQUFhLElBQUlqQixTQUFTLEVBQUU7QUFDL0MsUUFBTSxDQUFDa0IsbUJBQW1CLElBQUlqQixZQUFZZSxZQUFZLEdBQUc7QUFFekQsUUFBTUcsUUFBUXBCLFNBQVM7QUFBQSxJQUNyQnFCLFVBQVUsQ0FBQyxTQUFTRixtQkFBbUI7QUFBQSxJQUN2Q0csU0FBVUMsYUFBWXBCLGFBQWFnQixxQkFBcUJJLFFBQVFsQixNQUFNO0FBQUEsSUFDdEVtQixTQUNFTCxvQkFBb0JNLE1BQ2xCLDRDQUNGLE1BQU07QUFBQSxFQUNWLENBQUM7QUFFRCxTQUFPLENBQUNMLE9BQU9GLGFBQWE7QUFDOUIiLCJuYW1lcyI6WyJ1c2VRdWVyeSIsInVzZVN0YXRlIiwidXNlRGVib3VuY2UiLCJzdWdnZXN0QXRlY28iLCJjb2RlIiwic2lnbmFsIiwiQVRFQ09fUkVDT1JEUyIsImZpbHRlcmVkUmVjb3JkcyIsImluY2x1ZGVzIiwicHJlZml4Iiwic3VmZml4Iiwic3BsaXQiLCJmaWx0ZXIiLCJyZWNvcmQiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJ1c2VTdWdnZXN0QXRlY28iLCJzZWFyY2hUZXh0Iiwic2V0U2VhcmNoVGV4dCIsInNlYXJjaFRleHREZWJvdW5jZWQiLCJxdWVyeSIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsImNvbnRleHQiLCJlbmFibGVkIiwibWF0Y2giXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsic3VnZ2VzdEF0ZWNvTG9jYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRGVib3VuY2UgfSBmcm9tICd1c2UtZGVib3VuY2UnO1xyXG5pbXBvcnQgeyBBVEVDT19SRUNPUkRTIH0gZnJvbSAnLi9BVEVDT19SRUNPUkRTJztcclxuXHJcbi8qKlxyXG4gKiBUeXBlIGRlZmluaXRpb24gZm9yIGFuIEFURUNPIHJlY29yZCByZXR1cm5lZCBieSB0aGUgQVBJXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBdGVjb1JlY29yZCA9IHtcclxuICAvKiogQ29kaWNlIEFURUNPICovXHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIC8qKiBEZXNjcml6aW9uZSBBVEVDTyAqL1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgLyoqIEF0dGl2aXTDoCBtZXJjZW9sb2dpY2EgKi9cclxuICBwcm9kdWN0QWN0aXZpdHk6IHN0cmluZztcclxuICAvKiogU2V0dG9yZSBtZXJjZW9sb2dpY28gKi9cclxuICBwcm9kdWN0U2VjdG9yOiBzdHJpbmc7XHJcbn07XHJcblxyXG4vKipcclxuICogVHlwZSBkZWZpbml0aW9uIGZvciB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgQVRFQ08gQVBJXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBdGVjb1Jlc3BvbnNlID0ge1xyXG4gIHN0YXR1czogJ09LJyB8ICdLTyc7XHJcbiAgYXRlY29SZWNvcmRzOiBBdGVjb1JlY29yZFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGNhbGwgdGhlIEFURUNPIHdlYnNlcnZpY2UgZm9yIGF1dG9jb21wbGV0ZS5cclxuICpcclxuICogRGkgc2VndWl0byBsZSByZWdvbGUgcGVyIGlsIGNvcnJldHRvIGludmlvIGRlbGxhIHJlcXVlc3QgYWwgTVM6XHJcbiAqIDEuIENvZGljZSBBVEVDTyBjb21wbGV0b1xyXG4gKiAgICAtIERldmUgZXNzZXJlIGNvbXBvc3RvIGRhIHRyZSBjb3BwaWUgZGkgZHVlIGRpZ2l0cyBs4oCZdW5vIHNlcGFyYXRlIGRhIHVuIHB1bnRvICguKVxyXG4gKiAgICAtIE5vbiBzb25vIGFtbWVzc2kgY2FyYXR0ZXJpIG5vbiBudW1lcmljaSwgZWNjZXR0byBpIHB1bnRpIGRpIHNlcGFyYXppb25lXHJcbiAqIEVzZW1waW86IDU1LjIwLjEwXHJcbiAqXHJcbiAqIDIuIENvZGljZSBBVEVDTyBwYXJ6aWFsZVxyXG4gKiAgICAtIERldmUgY29udGVuZXJlIGFsbWVubyBsZSBwcmltZSBkdWUgY29wcGllIGRpIGRpZ2l0cywgc2VwYXJhdGUgZGEgdW4gcHVudG8gKC4pXHJcbiAqICAgIC0gTGEgdGVyemEgY29wcGlhIMOoIG9wemlvbmFsZSBlIHB1w7IgZXNzZXJlOlxyXG4gKiAgICAgICAtIEFzc2VudGUgKGVzLiA1NS4yMClcclxuICogICAgICAgLSBQcmVzZW50ZSBzZW56YSBwdW50byBmaW5hbGUgKGVzLiA1NS4yMC4xKVxyXG4gKiAgICAgICAtIFByZXNlbnRlIGNvbiBwdW50byBmaW5hbGUgKGVzLiA1NS4yMC4pXHJcbiAqICAgIC0gTm9uIHNvbm8gYW1tZXNzaSBjYXJhdHRlcmkgbm9uIG51bWVyaWNpLCBlY2NldHRvIGkgcHVudGkgZGkgc2VwYXJhemlvbmVcclxuICpcclxuICogMy4gQ29kaWNlIEFURUNPIHBhcnppYWxlIChGb3JtYXRvIGNvbiBXaWxkY2FyZClcclxuICogICAgLSBEZXZlIGNvbnRlbmVyZSBkdWUgY29wcGllIGRpIGNpZnJlIG51bWVyaWNoZSwgdW5hIGFsbCdpbml6aW8gZSB1bmEgYWxsYSBmaW5lLlxyXG4gKiAgICAtIElsIHZhbG9yZSBjZW50cmFsZSBkZXZlIGVzc2VyZSByYXBwcmVzZW50YXRvIGRhIHVuIGNhcmF0dGVyZSAqLCBjaGUgaW5kaWNhIHVuYSBxdWFsc2lhc2kgc2VxdWVuemEgZGkgY2lmcmUuXHJcbiAqICAgIC0gTm9uIHNvbm8gYW1tZXNzaSBjYXJhdHRlcmkgbm9uIG51bWVyaWNpLCBlY2NldHRvIOKAnC7igJ0gZSAqLlxyXG4gKlxyXG4gKiAjIyBFc2VtcGlvIGRpIHV0aWxpenpvIGRlbGxhIHdpbGRjYXJkICpcclxuICpcclxuICogX19jb2RlX18gaW4gaW5wdXQ6IDU1LiouMTBcclxuICpcclxuICogX19SaXN1bHRhdGk6X18gNTUuMjAuMTAsIDU1LjMwLjEwLCA1NS45OS4xMCBldGMuXHJcbiAqXHJcbiAqIElsICogcGVybWV0dGUgZGkgZWZmZXR0dWFyZSB1bmEgcmljZXJjYSBwacO5IGFtcGlhLCBzZW56YSBzcGVjaWZpY2FyZSBlc2F0dGFtZW50ZSBpbCB2YWxvcmUgZGVsbGEgc2Vjb25kYSBjb3BwaWFcclxuICogZGkgY2lmcmUsIGVtdWxhbmRvIGlsIGNvbXBvcnRhbWVudG8gQVMtSVMgc3VsIHNpc3RlbWEgYSBGRS5cclxuICpcclxuXHJcbiAqIEBwYXJhbSBjb2RlIFRoZSBzZWFyY2ggc3RyaW5nIHRvIGZpbmQgbWF0Y2hpbmcgQVRFQ08gY29kZXNcclxuICogQHBhcmFtIHNpZ25hbCBPcHRpb25hbCBBYm9ydFNpZ25hbCBmb3IgY2FuY2VsbGluZyB0aGUgcmVxdWVzdFxyXG4gKiBAcmV0dXJucyBUaGUgbGlzdCBvZiBtYXRjaGluZyBBVEVDTyByZWNvcmRzIG9yIGFuIGVycm9yIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN1Z2dlc3RBdGVjbyhjb2RlOiBzdHJpbmcsIHNpZ25hbD86IEFib3J0U2lnbmFsKSB7XHJcbiAgLy8gRmlsdGVyIHJlY29yZHMgYmFzZWQgb24gdGhlIHNlYXJjaCBjb2RlXHJcbiAgY29uc3QgeyBBVEVDT19SRUNPUkRTIH0gPSBhd2FpdCBpbXBvcnQoJy4vQVRFQ09fUkVDT1JEUycpO1xyXG5cclxuICBsZXQgZmlsdGVyZWRSZWNvcmRzID0gQVRFQ09fUkVDT1JEUztcclxuXHJcbiAgaWYgKGNvZGUpIHtcclxuICAgIC8vIEhhbmRsZSB3aWxkY2FyZCBzZWFyY2hcclxuICAgIGlmIChjb2RlLmluY2x1ZGVzKCcqJykpIHtcclxuICAgICAgY29uc3QgW3ByZWZpeCwgc3VmZml4XSA9IGNvZGUuc3BsaXQoJyonKTtcclxuICAgICAgZmlsdGVyZWRSZWNvcmRzID0gQVRFQ09fUkVDT1JEUy5maWx0ZXIoXHJcbiAgICAgICAgKHJlY29yZCkgPT5cclxuICAgICAgICAgIHJlY29yZC5jb2RlLnN0YXJ0c1dpdGgocHJlZml4ISkgJiYgcmVjb3JkLmNvZGUuZW5kc1dpdGgoc3VmZml4ISlcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIC8vIEhhbmRsZSBwYXJ0aWFsIG9yIGNvbXBsZXRlIGNvZGUgc2VhcmNoXHJcbiAgICBlbHNlIHtcclxuICAgICAgZmlsdGVyZWRSZWNvcmRzID0gQVRFQ09fUkVDT1JEUy5maWx0ZXIoKHJlY29yZCkgPT5cclxuICAgICAgICByZWNvcmQuY29kZS5zdGFydHNXaXRoKGNvZGUpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmlsdGVyZWRSZWNvcmRzO1xyXG59XHJcblxyXG4vKipcclxuICogQ3VzdG9tIGhvb2sgZm9yIHVzaW5nIHRoZSBBVEVDTyBhdXRvY29tcGxldGUgd2l0aCBkZWJvdW5jaW5nXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1Z2dlc3RBdGVjbygpIHtcclxuICBjb25zdCBbc2VhcmNoVGV4dCwgc2V0U2VhcmNoVGV4dF0gPSB1c2VTdGF0ZSgnJyk7XHJcbiAgY29uc3QgW3NlYXJjaFRleHREZWJvdW5jZWRdID0gdXNlRGVib3VuY2Uoc2VhcmNoVGV4dCwgMTAwKTtcclxuXHJcbiAgY29uc3QgcXVlcnkgPSB1c2VRdWVyeSh7XHJcbiAgICBxdWVyeUtleTogWydhdGVjbycsIHNlYXJjaFRleHREZWJvdW5jZWRdLFxyXG4gICAgcXVlcnlGbjogKGNvbnRleHQpID0+IHN1Z2dlc3RBdGVjbyhzZWFyY2hUZXh0RGVib3VuY2VkLCBjb250ZXh0LnNpZ25hbCksXHJcbiAgICBlbmFibGVkOlxyXG4gICAgICBzZWFyY2hUZXh0RGVib3VuY2VkLm1hdGNoKFxyXG4gICAgICAgIC9eWzAtOV17Mn1cXC5bMC05XXsyfXxbMC05XXsyfVxcLlxcKlxcLlswLTldezJ9L1xyXG4gICAgICApICE9PSBudWxsLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gW3F1ZXJ5LCBzZXRTZWFyY2hUZXh0XSBhcyBjb25zdDtcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3dlYm9yZGVyL3N1Z2dlc3RBdGVjb0xvY2FsLnRzIn0=