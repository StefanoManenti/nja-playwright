globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { atomWithLazy } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { restoreOfferFromUrl, restorePowerRateFromUrl } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { getMonoProductCode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { tryOr } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
export const powerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/powerAtom", atom((get) => get(workingProductAtom)?.commodity?.power));
powerAtom.debugLabel = "powerAtom";
export const gasAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/gasAtom", atom((get) => get(workingProductAtom)?.commodity?.gas));
gasAtom.debugLabel = "gasAtom";
export const commodityDescriptionAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/commodityDescriptionAtom", atom((get) => get(workingProductAtom)?.commodity?.description));
commodityDescriptionAtom.debugLabel = "commodityDescriptionAtom";
export const operativeModeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/operativeModeAtom", atom((get) => {
  return get(workingProductAtom)?.operativeMode;
}));
operativeModeAtom.debugLabel = "operativeModeAtom";
export const offerIdAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/offerIdAtom", atomWithLazy(restoreOfferFromUrl));
offerIdAtom.debugLabel = "offerIdAtom";
offerIdAtom.debugLabel = "offerAtom";
export const hasOfferAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/hasOfferAtom", atom((get) => {
  const offer = get(offerIdAtom);
  return !!(offer.code && offer.channel && offer.touchpoint);
}));
hasOfferAtom.debugLabel = "hasOfferAtom";
export const powerRateAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/powerRateAtom", atomWithLazy(restorePowerRateFromUrl));
powerRateAtom.debugLabel = "powerRateAtom";
powerRateAtom.debugLabel = "powerRateAtom";
export const monoProductCodeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/monoProductCodeAtom", atom((get) => {
  const productCodeGeneric = get(offerIdAtom).code;
  const workingProduct = get(workingProductAtom);
  const commodity = workingProduct?.commodity?.toString();
  if (!commodity) {
    return productCodeGeneric;
  }
  return tryOr(() => getMonoProductCode(productCodeGeneric, commodity), productCodeGeneric);
}));
monoProductCodeAtom.debugLabel = "monoProductCodeAtom";
export const troubleshootingConcludedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\atoms.ts/troubleshootingConcludedAtom", atom(false));
troubleshootingConcludedAtom.debugLabel = "troubleshootingConcludedAtom";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFDckIsU0FBU0Msb0JBQW9CO0FBQzdCLFNBQVNDLHFCQUFxQkMsK0JBQStCO0FBQzdELFNBQVNDLDBCQUEwQjtBQUVuQyxTQUFTQywwQkFBMEI7QUFDbkMsU0FBU0MsYUFBYTtBQUV0QixhQUFBQyxZQUFBQyxXQUFBQyxlQUFBQyxJQUFBLG1IQUF5QlYsS0FDdEJVLFNBQVFBLElBQUlOLGtCQUFrQixHQUFHTyxXQUFXQyxLQUMvQyxDQUFDO0FBQUNMLFVBQUFNLGFBQUE7QUFFRixhQUFBQyxVQUFBTixXQUFBQyxlQUFBQyxJQUFBLGlIQUF1QlYsS0FBTVUsU0FBUUEsSUFBSU4sa0JBQWtCLEdBQUdPLFdBQVdJLEdBQUcsQ0FBQztBQUFDRCxRQUFBRCxhQUFBO0FBRTlFLGFBQUFHLDJCQUFBUixXQUFBQyxlQUFBQyxJQUFBLGtJQUF3Q1YsS0FDckNVLFNBQVFBLElBQUlOLGtCQUFrQixHQUFHTyxXQUFXTSxXQUMvQyxDQUFDO0FBRURELHlCQUFBSCxhQUFBO0FBR0EsYUFBQUssb0JBQUFWLFdBQUFDLGVBQUFDLElBQUEsMkhBQWlDVixLQUFNVSxTQUFRO0FBQzdDLFNBQU9BLElBQUlOLGtCQUFrQixHQUFHZTtBQUNsQyxDQUFDLENBQUM7QUFBQ0Qsa0JBQUFMLGFBQUE7QUFFSCxhQUFBTyxjQUFBWixXQUFBQyxlQUFBQyxJQUFBLHFIQUEyQlQsYUFBb0JDLG1CQUFtQixDQUFDO0FBQUNrQixZQUFBUCxhQUFBO0FBQ3BFTyxZQUFZUCxhQUFhO0FBRXpCLGFBQUFRLGVBQUFiLFdBQUFDLGVBQUFDLElBQUEsc0hBQTRCVixLQUFNVSxTQUFRO0FBQ3hDLFFBQU1ZLFFBQVFaLElBQUlVLFdBQVc7QUFDN0IsU0FBTyxDQUFDLEVBQUVFLE1BQU1DLFFBQVFELE1BQU1FLFdBQVdGLE1BQU1HO0FBQ2pELENBQUMsQ0FBQztBQUFDSixhQUFBUixhQUFBO0FBRUgsYUFBQWEsZ0JBQUFsQixXQUFBQyxlQUFBQyxJQUFBLHVIQUE2QlQsYUFBd0JFLHVCQUF1QixDQUFDO0FBQUN1QixjQUFBYixhQUFBO0FBQzlFYSxjQUFjYixhQUFhO0FBaUIzQixhQUFBYyxzQkFBQW5CLFdBQUFDLGVBQUFDLElBQUEsNkhBQW1DVixLQUFNVSxTQUFRO0FBQy9DLFFBQU1rQixxQkFBcUJsQixJQUFJVSxXQUFXLEVBQUVHO0FBQzVDLFFBQU1NLGlCQUFpQm5CLElBQUlOLGtCQUFrQjtBQUM3QyxRQUFNTyxZQUFZa0IsZ0JBQWdCbEIsV0FBV21CLFNBQVM7QUFFdEQsTUFBSSxDQUFDbkIsV0FBVztBQUNkLFdBQU9pQjtBQUFBQSxFQUNUO0FBRUEsU0FBT3RCLE1BQ0wsTUFBTUQsbUJBQW1CdUIsb0JBQW9CakIsU0FBUyxHQUN0RGlCLGtCQUNGO0FBQ0YsQ0FBQyxDQUFDO0FBQUNELG9CQUFBZCxhQUFBO0FBRUgsYUFBQWtCLCtCQUFBdkIsV0FBQUMsZUFBQUMsSUFBQSxzSUFBNENWLEtBQUssS0FBSyxDQUFDO0FBQUMrQiw2QkFBQWxCLGFBQUEiLCJuYW1lcyI6WyJhdG9tIiwiYXRvbVdpdGhMYXp5IiwicmVzdG9yZU9mZmVyRnJvbVVybCIsInJlc3RvcmVQb3dlclJhdGVGcm9tVXJsIiwid29ya2luZ1Byb2R1Y3RBdG9tIiwiZ2V0TW9ub1Byb2R1Y3RDb2RlIiwidHJ5T3IiLCJwb3dlckF0b20iLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJjb21tb2RpdHkiLCJwb3dlciIsImRlYnVnTGFiZWwiLCJnYXNBdG9tIiwiZ2FzIiwiY29tbW9kaXR5RGVzY3JpcHRpb25BdG9tIiwiZGVzY3JpcHRpb24iLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGUiLCJvZmZlcklkQXRvbSIsImhhc09mZmVyQXRvbSIsIm9mZmVyIiwiY29kZSIsImNoYW5uZWwiLCJ0b3VjaHBvaW50IiwicG93ZXJSYXRlQXRvbSIsIm1vbm9Qcm9kdWN0Q29kZUF0b20iLCJwcm9kdWN0Q29kZUdlbmVyaWMiLCJ3b3JraW5nUHJvZHVjdCIsInRvU3RyaW5nIiwidHJvdWJsZXNob290aW5nQ29uY2x1ZGVkQXRvbSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJhdG9tcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdG9tIH0gZnJvbSAnam90YWknO1xyXG5pbXBvcnQgeyBhdG9tV2l0aExhenkgfSBmcm9tICdqb3RhaS91dGlscyc7XHJcbmltcG9ydCB7IHJlc3RvcmVPZmZlckZyb21VcmwsIHJlc3RvcmVQb3dlclJhdGVGcm9tVXJsIH0gZnJvbSAnLi9zdGF0ZS11cmwnO1xyXG5pbXBvcnQgeyB3b3JraW5nUHJvZHVjdEF0b20gfSBmcm9tICcuL3Ryb3VibGVzaG9vdGluZyc7XHJcbmltcG9ydCB7IE9mZmVyLCBQb3dlclJhdGUgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgZ2V0TW9ub1Byb2R1Y3RDb2RlIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyB0cnlPciB9IGZyb20gJ0BuYWotd28vdXRpbCc7XHJcblxyXG5leHBvcnQgY29uc3QgcG93ZXJBdG9tID0gYXRvbShcclxuICAoZ2V0KSA9PiBnZXQod29ya2luZ1Byb2R1Y3RBdG9tKT8uY29tbW9kaXR5Py5wb3dlclxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdhc0F0b20gPSBhdG9tKChnZXQpID0+IGdldCh3b3JraW5nUHJvZHVjdEF0b20pPy5jb21tb2RpdHk/Lmdhcyk7XHJcblxyXG5leHBvcnQgY29uc3QgY29tbW9kaXR5RGVzY3JpcHRpb25BdG9tID0gYXRvbShcclxuICAoZ2V0KSA9PiBnZXQod29ya2luZ1Byb2R1Y3RBdG9tKT8uY29tbW9kaXR5Py5kZXNjcmlwdGlvblxyXG4pO1xyXG5cclxuLyoqXHJcbiAqIEN1cnJlbnQgb3BlcmF0aXZlIG1vZGUgZm9yIHRoZSBjdXJyZW50IGNvbW1vZGl0eVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG9wZXJhdGl2ZU1vZGVBdG9tID0gYXRvbSgoZ2V0KSA9PiB7XHJcbiAgcmV0dXJuIGdldCh3b3JraW5nUHJvZHVjdEF0b20pPy5vcGVyYXRpdmVNb2RlO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBvZmZlcklkQXRvbSA9IGF0b21XaXRoTGF6eTxPZmZlcj4ocmVzdG9yZU9mZmVyRnJvbVVybCk7XHJcbm9mZmVySWRBdG9tLmRlYnVnTGFiZWwgPSAnb2ZmZXJBdG9tJztcclxuXHJcbmV4cG9ydCBjb25zdCBoYXNPZmZlckF0b20gPSBhdG9tKChnZXQpID0+IHtcclxuICBjb25zdCBvZmZlciA9IGdldChvZmZlcklkQXRvbSk7XHJcbiAgcmV0dXJuICEhKG9mZmVyLmNvZGUgJiYgb2ZmZXIuY2hhbm5lbCAmJiBvZmZlci50b3VjaHBvaW50KTtcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcG93ZXJSYXRlQXRvbSA9IGF0b21XaXRoTGF6eTxQb3dlclJhdGU+KHJlc3RvcmVQb3dlclJhdGVGcm9tVXJsKTtcclxucG93ZXJSYXRlQXRvbS5kZWJ1Z0xhYmVsID0gJ3Bvd2VyUmF0ZUF0b20nO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBKb3RhaSBhdG9tIHRoYXQgZGVyaXZlcyB0aGUgbW9ub2xpdGhpYyBwcm9kdWN0IGNvZGUgYmFzZWQgb24gdGhlIGN1cnJlbnQgb2ZmZXIgSUQgYW5kIHdvcmtpbmcgcHJvZHVjdCBzdGF0ZS5cclxuICogVGhlIGBtb25vUHJvZHVjdENvZGVBdG9tYCBjb21wdXRlcyB0aGUgcHJvZHVjdCBjb2RlIGJ5IGNvbWJpbmluZyB0aGUgZ2VuZXJpYyBwcm9kdWN0IGNvZGUgd2l0aFxyXG4gKiB0aGUgc3BlY2lmaWMgY29tbW9kaXR5IGluZm9ybWF0aW9uIG9mIHRoZSB3b3JraW5nIHByb2R1Y3QuIElmIHRoZSBjb21tb2RpdHkgaXMgdW5hdmFpbGFibGUsXHJcbiAqIHRoZSBnZW5lcmljIHByb2R1Y3QgY29kZSBpcyByZXR1cm5lZCBhcyBhIGZhbGxiYWNrLlxyXG4gKlxyXG4gKiBUaGUgY29tcHV0YXRpb24gaXMgcmVzaWxpZW50IHRvIGVycm9ycyB1c2luZyBhIGB0cnlPcmAgbWV0aG9kLCBlbnN1cmluZyBhIGZhbGxiYWNrIHRvXHJcbiAqIHRoZSBnZW5lcmljIHByb2R1Y3QgY29kZSBpbiBjYXNlIG9mIGV4Y2VwdGlvbnMgd2hlbiBkZXJpdmluZyB0aGUgbW9ub2xpdGhpYyBwcm9kdWN0IGNvZGUuXHJcbiAqXHJcbiAqIERlcGVuZGVuY2llczpcclxuICogLSBSZWxpZXMgb24gdGhlIGBvZmZlcklkQXRvbWAgYXRvbSB0byByZXRyaWV2ZSB0aGUgZ2VuZXJpYyBwcm9kdWN0IGNvZGUuXHJcbiAqIC0gUmVsaWVzIG9uIHRoZSBgd29ya2luZ1Byb2R1Y3RBdG9tYCBhdG9tIHRvIGV4dHJhY3QgdGhlIGNvbW1vZGl0eSBmcm9tIHRoZSB3b3JraW5nIHByb2R1Y3QuXHJcbiAqXHJcbiAqIEBjb25zdGFudCAgbW9ub1Byb2R1Y3RDb2RlQXRvbSAtIFRoZSBkZXJpdmVkIGF0b20gZm9yIHRoZSBtb25vbGl0aGljIHByb2R1Y3QgY29kZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBtb25vUHJvZHVjdENvZGVBdG9tID0gYXRvbSgoZ2V0KSA9PiB7XHJcbiAgY29uc3QgcHJvZHVjdENvZGVHZW5lcmljID0gZ2V0KG9mZmVySWRBdG9tKS5jb2RlO1xyXG4gIGNvbnN0IHdvcmtpbmdQcm9kdWN0ID0gZ2V0KHdvcmtpbmdQcm9kdWN0QXRvbSk7XHJcbiAgY29uc3QgY29tbW9kaXR5ID0gd29ya2luZ1Byb2R1Y3Q/LmNvbW1vZGl0eT8udG9TdHJpbmcoKTtcclxuXHJcbiAgaWYgKCFjb21tb2RpdHkpIHtcclxuICAgIHJldHVybiBwcm9kdWN0Q29kZUdlbmVyaWM7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ5T3IoXHJcbiAgICAoKSA9PiBnZXRNb25vUHJvZHVjdENvZGUocHJvZHVjdENvZGVHZW5lcmljLCBjb21tb2RpdHkpLFxyXG4gICAgcHJvZHVjdENvZGVHZW5lcmljXHJcbiAgKTtcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgdHJvdWJsZXNob290aW5nQ29uY2x1ZGVkQXRvbSA9IGF0b20oZmFsc2UpO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvdHJvdWJsZXNob290aW5nL2F0b21zLnRzIn0=