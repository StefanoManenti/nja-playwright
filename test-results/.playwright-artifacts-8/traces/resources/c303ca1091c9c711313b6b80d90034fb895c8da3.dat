globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { delay, http, HttpResponse } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/msw.js?v=0189a8d1";
import { IS_LOGGED } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access-mock/src/lib/handlers/_flags.ts";
export default http.get(/\/contiServices\/conti\/\d+$/, async () => {
  await delay();
  if (!IS_LOGGED) {
    return HttpResponse.json(void 0, {
      status: 401
    });
  }
  return HttpResponse.json({
    conto: [{
      codice: "900012345678",
      alias: "LUCE E GAS",
      selezionato: "true",
      tipo: "ATTIVO",
      indirizzoFornitura: "Via MILANO 82 ROMA 01234 RM",
      residente: true,
      commodity: "DUAL",
      forniture: [],
      dataAttivazione: "01/01/2023",
      indirizzoFatturazione: "Via MILANO 82, 01234 ROMA (RM)",
      productTypeExtraCommodity: null,
      orderCode: null,
      productNameExtraCommodity: null,
      indirizzoSpedizione: null,
      prodottoCommodityCombinata: null,
      dettagliPagamento: null,
      dettagliPolizza: null,
      integrationId: null,
      userMigratedExtraCommodity: false,
      terminationDate: "2099-12-31"
    }, {
      codice: "900000000123",
      alias: "GAS",
      selezionato: "true",
      tipo: "ATTIVO",
      indirizzoFornitura: "Via MILANO 82 ROMA 01234 RM",
      residente: true,
      commodity: "GAS",
      forniture: [],
      dataAttivazione: "01/01/2023",
      indirizzoFatturazione: "Via MILANO 82, 01234 ROMA (RM)",
      productTypeExtraCommodity: null,
      orderCode: null,
      productNameExtraCommodity: null,
      indirizzoSpedizione: null,
      prodottoCommodityCombinata: null,
      dettagliPagamento: null,
      dettagliPolizza: null,
      integrationId: null,
      userMigratedExtraCommodity: false,
      terminationDate: "2099-12-31"
    }],
    logHash: "a",
    tipoCliente: "RETAIL"
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLE9BQU9DLE1BQU1DLG9CQUFvQjtBQUMxQyxTQUFTQyxpQkFBaUI7QUFFMUIsZUFBZUYsS0FBS0csSUFBSSxnQ0FBZ0MsWUFBWTtBQUNsRSxRQUFNSixNQUFNO0FBRVosTUFBSSxDQUFDRyxXQUFXO0FBQ2QsV0FBT0QsYUFBYUcsS0FBS0MsUUFBVztBQUFBLE1BQ2xDQyxRQUFRO0FBQUEsSUFDVixDQUFDO0FBQUEsRUFDSDtBQUVBLFNBQU9MLGFBQWFHLEtBQUs7QUFBQSxJQUN2QkcsT0FBTyxDQUNMO0FBQUEsTUFDRUMsUUFBUTtBQUFBLE1BQ1JDLE9BQU87QUFBQSxNQUNQQyxhQUFhO0FBQUEsTUFDYkMsTUFBTTtBQUFBLE1BQ05DLG9CQUFvQjtBQUFBLE1BQ3BCQyxXQUFXO0FBQUEsTUFDWEMsV0FBVztBQUFBLE1BQ1hDLFdBQVc7QUFBQSxNQUNYQyxpQkFBaUI7QUFBQSxNQUNqQkMsdUJBQXVCO0FBQUEsTUFDdkJDLDJCQUEyQjtBQUFBLE1BQzNCQyxXQUFXO0FBQUEsTUFDWEMsMkJBQTJCO0FBQUEsTUFDM0JDLHFCQUFxQjtBQUFBLE1BQ3JCQyw0QkFBNEI7QUFBQSxNQUM1QkMsbUJBQW1CO0FBQUEsTUFDbkJDLGlCQUFpQjtBQUFBLE1BQ2pCQyxlQUFlO0FBQUEsTUFDZkMsNEJBQTRCO0FBQUEsTUFDNUJDLGlCQUFpQjtBQUFBLElBQ25CLEdBQ0E7QUFBQSxNQUNFbkIsUUFBUTtBQUFBLE1BQ1JDLE9BQU87QUFBQSxNQUNQQyxhQUFhO0FBQUEsTUFDYkMsTUFBTTtBQUFBLE1BQ05DLG9CQUFvQjtBQUFBLE1BQ3BCQyxXQUFXO0FBQUEsTUFDWEMsV0FBVztBQUFBLE1BQ1hDLFdBQVc7QUFBQSxNQUNYQyxpQkFBaUI7QUFBQSxNQUNqQkMsdUJBQXVCO0FBQUEsTUFDdkJDLDJCQUEyQjtBQUFBLE1BQzNCQyxXQUFXO0FBQUEsTUFDWEMsMkJBQTJCO0FBQUEsTUFDM0JDLHFCQUFxQjtBQUFBLE1BQ3JCQyw0QkFBNEI7QUFBQSxNQUM1QkMsbUJBQW1CO0FBQUEsTUFDbkJDLGlCQUFpQjtBQUFBLE1BQ2pCQyxlQUFlO0FBQUEsTUFDZkMsNEJBQTRCO0FBQUEsTUFDNUJDLGlCQUFpQjtBQUFBLElBQ25CLENBQUM7QUFBQSxJQUVIQyxTQUFTO0FBQUEsSUFDVEMsYUFBYTtBQUFBLEVBQ2YsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6WyJkZWxheSIsImh0dHAiLCJIdHRwUmVzcG9uc2UiLCJJU19MT0dHRUQiLCJnZXQiLCJqc29uIiwidW5kZWZpbmVkIiwic3RhdHVzIiwiY29udG8iLCJjb2RpY2UiLCJhbGlhcyIsInNlbGV6aW9uYXRvIiwidGlwbyIsImluZGlyaXp6b0Zvcm5pdHVyYSIsInJlc2lkZW50ZSIsImNvbW1vZGl0eSIsImZvcm5pdHVyZSIsImRhdGFBdHRpdmF6aW9uZSIsImluZGlyaXp6b0ZhdHR1cmF6aW9uZSIsInByb2R1Y3RUeXBlRXh0cmFDb21tb2RpdHkiLCJvcmRlckNvZGUiLCJwcm9kdWN0TmFtZUV4dHJhQ29tbW9kaXR5IiwiaW5kaXJpenpvU3BlZGl6aW9uZSIsInByb2RvdHRvQ29tbW9kaXR5Q29tYmluYXRhIiwiZGV0dGFnbGlQYWdhbWVudG8iLCJkZXR0YWdsaVBvbGl6emEiLCJpbnRlZ3JhdGlvbklkIiwidXNlck1pZ3JhdGVkRXh0cmFDb21tb2RpdHkiLCJ0ZXJtaW5hdGlvbkRhdGUiLCJsb2dIYXNoIiwidGlwb0NsaWVudGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiY29udGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVsYXksIGh0dHAsIEh0dHBSZXNwb25zZSB9IGZyb20gJ21zdyc7XHJcbmltcG9ydCB7IElTX0xPR0dFRCB9IGZyb20gJy4vX2ZsYWdzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGh0dHAuZ2V0KC9cXC9jb250aVNlcnZpY2VzXFwvY29udGlcXC9cXGQrJC8sIGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBkZWxheSgpO1xyXG5cclxuICBpZiAoIUlTX0xPR0dFRCkge1xyXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHVuZGVmaW5lZCwge1xyXG4gICAgICBzdGF0dXM6IDQwMSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcclxuICAgIGNvbnRvOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBjb2RpY2U6ICc5MDAwMTIzNDU2NzgnLFxyXG4gICAgICAgIGFsaWFzOiAnTFVDRSBFIEdBUycsXHJcbiAgICAgICAgc2VsZXppb25hdG86ICd0cnVlJyxcclxuICAgICAgICB0aXBvOiAnQVRUSVZPJyxcclxuICAgICAgICBpbmRpcml6em9Gb3JuaXR1cmE6ICdWaWEgTUlMQU5PIDgyIFJPTUEgMDEyMzQgUk0nLFxyXG4gICAgICAgIHJlc2lkZW50ZTogdHJ1ZSxcclxuICAgICAgICBjb21tb2RpdHk6ICdEVUFMJyxcclxuICAgICAgICBmb3JuaXR1cmU6IFtdLFxyXG4gICAgICAgIGRhdGFBdHRpdmF6aW9uZTogJzAxLzAxLzIwMjMnLFxyXG4gICAgICAgIGluZGlyaXp6b0ZhdHR1cmF6aW9uZTogJ1ZpYSBNSUxBTk8gODIsIDAxMjM0IFJPTUEgKFJNKScsXHJcbiAgICAgICAgcHJvZHVjdFR5cGVFeHRyYUNvbW1vZGl0eTogbnVsbCxcclxuICAgICAgICBvcmRlckNvZGU6IG51bGwsXHJcbiAgICAgICAgcHJvZHVjdE5hbWVFeHRyYUNvbW1vZGl0eTogbnVsbCxcclxuICAgICAgICBpbmRpcml6em9TcGVkaXppb25lOiBudWxsLFxyXG4gICAgICAgIHByb2RvdHRvQ29tbW9kaXR5Q29tYmluYXRhOiBudWxsLFxyXG4gICAgICAgIGRldHRhZ2xpUGFnYW1lbnRvOiBudWxsLFxyXG4gICAgICAgIGRldHRhZ2xpUG9saXp6YTogbnVsbCxcclxuICAgICAgICBpbnRlZ3JhdGlvbklkOiBudWxsLFxyXG4gICAgICAgIHVzZXJNaWdyYXRlZEV4dHJhQ29tbW9kaXR5OiBmYWxzZSxcclxuICAgICAgICB0ZXJtaW5hdGlvbkRhdGU6ICcyMDk5LTEyLTMxJyxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGNvZGljZTogJzkwMDAwMDAwMDEyMycsXHJcbiAgICAgICAgYWxpYXM6ICdHQVMnLFxyXG4gICAgICAgIHNlbGV6aW9uYXRvOiAndHJ1ZScsXHJcbiAgICAgICAgdGlwbzogJ0FUVElWTycsXHJcbiAgICAgICAgaW5kaXJpenpvRm9ybml0dXJhOiAnVmlhIE1JTEFOTyA4MiBST01BIDAxMjM0IFJNJyxcclxuICAgICAgICByZXNpZGVudGU6IHRydWUsXHJcbiAgICAgICAgY29tbW9kaXR5OiAnR0FTJyxcclxuICAgICAgICBmb3JuaXR1cmU6IFtdLFxyXG4gICAgICAgIGRhdGFBdHRpdmF6aW9uZTogJzAxLzAxLzIwMjMnLFxyXG4gICAgICAgIGluZGlyaXp6b0ZhdHR1cmF6aW9uZTogJ1ZpYSBNSUxBTk8gODIsIDAxMjM0IFJPTUEgKFJNKScsXHJcbiAgICAgICAgcHJvZHVjdFR5cGVFeHRyYUNvbW1vZGl0eTogbnVsbCxcclxuICAgICAgICBvcmRlckNvZGU6IG51bGwsXHJcbiAgICAgICAgcHJvZHVjdE5hbWVFeHRyYUNvbW1vZGl0eTogbnVsbCxcclxuICAgICAgICBpbmRpcml6em9TcGVkaXppb25lOiBudWxsLFxyXG4gICAgICAgIHByb2RvdHRvQ29tbW9kaXR5Q29tYmluYXRhOiBudWxsLFxyXG4gICAgICAgIGRldHRhZ2xpUGFnYW1lbnRvOiBudWxsLFxyXG4gICAgICAgIGRldHRhZ2xpUG9saXp6YTogbnVsbCxcclxuICAgICAgICBpbnRlZ3JhdGlvbklkOiBudWxsLFxyXG4gICAgICAgIHVzZXJNaWdyYXRlZEV4dHJhQ29tbW9kaXR5OiBmYWxzZSxcclxuICAgICAgICB0ZXJtaW5hdGlvbkRhdGU6ICcyMDk5LTEyLTMxJyxcclxuICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBsb2dIYXNoOiAnYScsXHJcbiAgICB0aXBvQ2xpZW50ZTogJ1JFVEFJTCcsXHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzLW1vY2svc3JjL2xpYi9oYW5kbGVycy9jb250aS50cyJ9