globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { vasInfo$, vasValues$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/offer-atoms.ts";
export const bulkOrderVas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\vas.ts/bulkOrderVas$", atom(async (get) => {
  const infoVasInterattivo = await get(vasInfo$);
  if (!infoVasInterattivo.enabled) {
    return {};
  }
  const vas = get(vasValues$);
  if (vas == null) {
    return {};
  }
  const campiVasContratto = {
    vas: infoVasInterattivo.infoEstese?.codiceVAS || "VAS"
  };
  let index = 1;
  for (const {
    labelID
  } of infoVasInterattivo.defCampiVasInterattivo) {
    campiVasContratto[`campo${index}`] = vas[labelID];
    index++;
  }
  return {
    campiVasContratto
  };
}, async (get, set, {
  campiVasContratto
}) => {
  const infoVasInterattivo = await get(vasInfo$);
  if (!infoVasInterattivo.enabled || !campiVasContratto) {
    return;
  }
  const vas = {};
  let index = 1;
  for (const {
    labelID
  } of infoVasInterattivo.defCampiVasInterattivo) {
    vas[labelID] = campiVasContratto[`campo${index}`];
    index++;
  }
  set(vasValues$, vas);
}));
bulkOrderVas$.debugLabel = "bulkOrderVas$";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFFckIsU0FBU0MsVUFBMEJDLGtCQUFrQjtBQUtyRCxhQUFBQyxnQkFBQUMsV0FBQUMsZUFBQUMsSUFBQSw4SEFBNkROLEtBQzNELE9BQU9NLFFBQVE7QUFDYixRQUFNQyxxQkFBcUIsTUFBTUQsSUFBSUwsUUFBUTtBQUM3QyxNQUFJLENBQUNNLG1CQUFtQkMsU0FBUztBQUMvQixXQUFPLENBQUM7QUFBQSxFQUNWO0FBQ0EsUUFBTUMsTUFBTUgsSUFBSUosVUFBVTtBQUMxQixNQUFJTyxPQUFPLE1BQU07QUFDZixXQUFPLENBQUM7QUFBQSxFQUNWO0FBRUEsUUFBTUMsb0JBQW9EO0FBQUEsSUFDeERELEtBQUtGLG1CQUFtQkksWUFBWUMsYUFBYTtBQUFBLEVBQ25EO0FBRUEsTUFBSUMsUUFBUTtBQUNaLGFBQVc7QUFBQSxJQUFFQztBQUFBQSxFQUFRLEtBQUtQLG1CQUFtQlEsd0JBQXdCO0FBQ25FTCxzQkFBa0IsUUFBUUcsS0FBSyxFQUFFLElBQUlKLElBQUlLLE9BQU87QUFDaEREO0FBQUFBLEVBQ0Y7QUFDQSxTQUFPO0FBQUEsSUFBRUg7QUFBQUEsRUFBa0I7QUFDN0IsR0FDQSxPQUFPSixLQUFLVSxLQUFLO0FBQUEsRUFBRU47QUFBa0IsTUFBTTtBQUN6QyxRQUFNSCxxQkFBcUIsTUFBTUQsSUFBSUwsUUFBUTtBQUM3QyxNQUFJLENBQUNNLG1CQUFtQkMsV0FBVyxDQUFDRSxtQkFBbUI7QUFDckQ7QUFBQSxFQUNGO0FBRUEsUUFBTUQsTUFBaUIsQ0FBQztBQUN4QixNQUFJSSxRQUFRO0FBQ1osYUFBVztBQUFBLElBQUVDO0FBQUFBLEVBQVEsS0FBS1AsbUJBQW1CUSx3QkFBd0I7QUFDbkVOLFFBQUlLLE9BQU8sSUFBSUosa0JBQWtCLFFBQVFHLEtBQUssRUFBRTtBQUNoREE7QUFBQUEsRUFDRjtBQUVBRyxNQUFJZCxZQUFZTyxHQUFHO0FBQ3JCLENBQ0YsQ0FBQztBQUFDTixjQUFBYyxhQUFBIiwibmFtZXMiOlsiYXRvbSIsInZhc0luZm8kIiwidmFzVmFsdWVzJCIsImJ1bGtPcmRlclZhcyQiLCJnbG9iYWxUaGlzIiwiam90YWlBdG9tQ2FjaGUiLCJnZXQiLCJpbmZvVmFzSW50ZXJhdHRpdm8iLCJlbmFibGVkIiwidmFzIiwiY2FtcGlWYXNDb250cmF0dG8iLCJpbmZvRXN0ZXNlIiwiY29kaWNlVkFTIiwiaW5kZXgiLCJsYWJlbElEIiwiZGVmQ2FtcGlWYXNJbnRlcmF0dGl2byIsInNldCIsImRlYnVnTGFiZWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsidmFzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7IHR5cGUgTW9uZ29MZWFkIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2xlYWQnO1xyXG5pbXBvcnQgeyB2YXNJbmZvJCwgdHlwZSBWYXNWYWx1ZXMsIHZhc1ZhbHVlcyQgfSBmcm9tICcuLi8uLi9vZmZlci1hdG9tcyc7XHJcbmltcG9ydCB7IEFzeW5jQnVsa09yZGVySGVscGVyQXRvbSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxudHlwZSBEYXRhID0gUGljazxNb25nb0xlYWQsICdjYW1waVZhc0NvbnRyYXR0byc+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1bGtPcmRlclZhcyQ6IEFzeW5jQnVsa09yZGVySGVscGVyQXRvbTxEYXRhPiA9IGF0b20oXHJcbiAgYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3QgaW5mb1Zhc0ludGVyYXR0aXZvID0gYXdhaXQgZ2V0KHZhc0luZm8kKTtcclxuICAgIGlmICghaW5mb1Zhc0ludGVyYXR0aXZvLmVuYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFzID0gZ2V0KHZhc1ZhbHVlcyQpO1xyXG4gICAgaWYgKHZhcyA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjYW1waVZhc0NvbnRyYXR0bzogTW9uZ29MZWFkWydjYW1waVZhc0NvbnRyYXR0byddID0ge1xyXG4gICAgICB2YXM6IGluZm9WYXNJbnRlcmF0dGl2by5pbmZvRXN0ZXNlPy5jb2RpY2VWQVMgfHwgJ1ZBUycsXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBpbmRleCA9IDE7XHJcbiAgICBmb3IgKGNvbnN0IHsgbGFiZWxJRCB9IG9mIGluZm9WYXNJbnRlcmF0dGl2by5kZWZDYW1waVZhc0ludGVyYXR0aXZvKSB7XHJcbiAgICAgIGNhbXBpVmFzQ29udHJhdHRvW2BjYW1wbyR7aW5kZXh9YF0gPSB2YXNbbGFiZWxJRF0hO1xyXG4gICAgICBpbmRleCsrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgY2FtcGlWYXNDb250cmF0dG8gfTtcclxuICB9LFxyXG4gIGFzeW5jIChnZXQsIHNldCwgeyBjYW1waVZhc0NvbnRyYXR0byB9KSA9PiB7XHJcbiAgICBjb25zdCBpbmZvVmFzSW50ZXJhdHRpdm8gPSBhd2FpdCBnZXQodmFzSW5mbyQpO1xyXG4gICAgaWYgKCFpbmZvVmFzSW50ZXJhdHRpdm8uZW5hYmxlZCB8fCAhY2FtcGlWYXNDb250cmF0dG8pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhczogVmFzVmFsdWVzID0ge307XHJcbiAgICBsZXQgaW5kZXggPSAxO1xyXG4gICAgZm9yIChjb25zdCB7IGxhYmVsSUQgfSBvZiBpbmZvVmFzSW50ZXJhdHRpdm8uZGVmQ2FtcGlWYXNJbnRlcmF0dGl2bykge1xyXG4gICAgICB2YXNbbGFiZWxJRF0gPSBjYW1waVZhc0NvbnRyYXR0b1tgY2FtcG8ke2luZGV4fWBdITtcclxuICAgICAgaW5kZXgrKztcclxuICAgIH1cclxuXHJcbiAgICBzZXQodmFzVmFsdWVzJCwgdmFzKTtcclxuICB9XHJcbik7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy9jb250cmFjdC9oZWxwZXJzL3Zhcy50cyJ9