globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import { Step, StepPriority } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/engine/src/index.ts";
import StepErrorBoundary from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepErrorBoundary.tsx";
import {
  customerSegmentAtom,
  OperativeMode,
  operativeModeAtom,
  operativeModeEnabled$,
  Segment
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { StepDependencies } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/StepDependencies.ts";
class SupplyPointStep extends Step {
  constructor() {
    super(...arguments);
    this.priority = new StepPriority(15);
    this.lazy = () => import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/steps/src/lib/transfer/SupplyPointStep.tsx");
    this.WrapperComponent = StepErrorBoundary;
  }
  toString() {
    return "supply-point";
  }
  async isInFlux(get) {
    return get(operativeModeAtom) === OperativeMode.TRANSFER && get(operativeModeEnabled$) && await get(customerSegmentAtom) === Segment.SMALL;
  }
  depends() {
    return [StepDependencies.POD, StepDependencies.PDR];
  }
  provides() {
    return [StepDependencies.SUPPLY_ADDRESS];
  }
}
export const supplyPoint = new SupplyPointStep();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLE1BQU1DLG9CQUFvQjtBQUNuQyxPQUFPQyx1QkFBdUI7QUFFOUI7QUFBQSxFQUNFQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxPQUNLO0FBQ1AsU0FBU0Msd0JBQXdCO0FBRWpDLE1BQU1DLHdCQUF3QlQsS0FBSztBQUFBLEVBQW5DO0FBQUE7QUFDRVUsb0JBQVcsSUFBSVQsYUFBYSxFQUFFO0FBRTlCVSxnQkFBT0EsTUFBTSxPQUFPLG1CQUFtQjtBQUN2Q0MsNEJBQW1CVjtBQUFBQTtBQUFBQSxFQUVuQlcsV0FBVztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFnQkMsU0FBU0MsS0FBYTtBQUNwQyxXQUNFQSxJQUFJVixpQkFBaUIsTUFBTUQsY0FBY1ksWUFDekNELElBQUlULHFCQUFxQixLQUN4QixNQUFNUyxJQUFJWixtQkFBbUIsTUFBT0ksUUFBUVU7QUFBQUEsRUFFakQ7QUFBQSxFQUVBQyxVQUFVO0FBQ1IsV0FBTyxDQUFDVixpQkFBaUJXLEtBQUtYLGlCQUFpQlksR0FBRztBQUFBLEVBQ3BEO0FBQUEsRUFFQUMsV0FBVztBQUNULFdBQU8sQ0FBQ2IsaUJBQWlCYyxjQUFjO0FBQUEsRUFDekM7QUFDRjtBQUVPLGFBQU1DLGNBQWMsSUFBSWQsZ0JBQWdCIiwibmFtZXMiOlsiU3RlcCIsIlN0ZXBQcmlvcml0eSIsIlN0ZXBFcnJvckJvdW5kYXJ5IiwiY3VzdG9tZXJTZWdtZW50QXRvbSIsIk9wZXJhdGl2ZU1vZGUiLCJvcGVyYXRpdmVNb2RlQXRvbSIsIm9wZXJhdGl2ZU1vZGVFbmFibGVkJCIsIlNlZ21lbnQiLCJTdGVwRGVwZW5kZW5jaWVzIiwiU3VwcGx5UG9pbnRTdGVwIiwicHJpb3JpdHkiLCJsYXp5IiwiV3JhcHBlckNvbXBvbmVudCIsInRvU3RyaW5nIiwiaXNJbkZsdXgiLCJnZXQiLCJUUkFOU0ZFUiIsIlNNQUxMIiwiZGVwZW5kcyIsIlBPRCIsIlBEUiIsInByb3ZpZGVzIiwiU1VQUExZX0FERFJFU1MiLCJzdXBwbHlQb2ludCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJzdXBwbHktcG9pbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXAsIFN0ZXBQcmlvcml0eSB9IGZyb20gJ0BuYWotd28vZW5naW5lJztcclxuaW1wb3J0IFN0ZXBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL1N0ZXBFcnJvckJvdW5kYXJ5JztcclxuaW1wb3J0IHsgR2V0dGVyIH0gZnJvbSAnam90YWkvdmFuaWxsYS90eXBlVXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGN1c3RvbWVyU2VnbWVudEF0b20sXHJcbiAgT3BlcmF0aXZlTW9kZSxcclxuICBvcGVyYXRpdmVNb2RlQXRvbSxcclxuICBvcGVyYXRpdmVNb2RlRW5hYmxlZCQsXHJcbiAgU2VnbWVudCxcclxufSBmcm9tICdAbmFqLXdvL2RhdGEtYWNjZXNzJztcclxuaW1wb3J0IHsgU3RlcERlcGVuZGVuY2llcyB9IGZyb20gJy4uL1N0ZXBEZXBlbmRlbmNpZXMnO1xyXG5cclxuY2xhc3MgU3VwcGx5UG9pbnRTdGVwIGV4dGVuZHMgU3RlcCB7XHJcbiAgcHJpb3JpdHkgPSBuZXcgU3RlcFByaW9yaXR5KDE1KTtcclxuXHJcbiAgbGF6eSA9ICgpID0+IGltcG9ydCgnLi9TdXBwbHlQb2ludFN0ZXAnKTtcclxuICBXcmFwcGVyQ29tcG9uZW50ID0gU3RlcEVycm9yQm91bmRhcnk7XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICdzdXBwbHktcG9pbnQnO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGlzSW5GbHV4KGdldDogR2V0dGVyKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBnZXQob3BlcmF0aXZlTW9kZUF0b20pID09PSBPcGVyYXRpdmVNb2RlLlRSQU5TRkVSICYmXHJcbiAgICAgIGdldChvcGVyYXRpdmVNb2RlRW5hYmxlZCQpICYmXHJcbiAgICAgIChhd2FpdCBnZXQoY3VzdG9tZXJTZWdtZW50QXRvbSkpID09PSBTZWdtZW50LlNNQUxMXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVwZW5kcygpIHtcclxuICAgIHJldHVybiBbU3RlcERlcGVuZGVuY2llcy5QT0QsIFN0ZXBEZXBlbmRlbmNpZXMuUERSXTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVzKCkge1xyXG4gICAgcmV0dXJuIFtTdGVwRGVwZW5kZW5jaWVzLlNVUFBMWV9BRERSRVNTXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzdXBwbHlQb2ludCA9IG5ldyBTdXBwbHlQb2ludFN0ZXAoKTtcclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9zdGVwcy9zcmMvbGliL3RyYW5zZmVyL3N1cHBseS1wb2ludC50c3gifQ==