globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
export class DependenciesGraph {
  constructor(steps, ...args) {
    this.steps = steps;
    this.providers = /* @__PURE__ */ new Map();
    this.dipendenze = /* @__PURE__ */ new Map();
    this.dipendenti = /* @__PURE__ */ new Map();
    this.populateProviders(...args);
    this.popolateDependencies(...args);
    this.popolateDipendenti();
    console.groupCollapsed("Graph");
    console.debug("providers", this.providers);
    console.debug("dipendenze", this.dipendenze);
    console.debug("dipendenti", this.dipendenti);
    console.groupEnd();
  }
  /**
   * Per lo step passato come parametro, ritorna quali step sono necessari.
   * @param step
   * @private
   */
  getDipendenze(step) {
    return this.dipendenze.get(step);
  }
  /**
   * Ritorna quali step sono dipendenti da questo.
   * @param step
   */
  getDipendenti(step) {
    return this.dipendenti.get(step);
  }
  getDipendentiRicorsivo(step) {
    const daVisitare = [step];
    const visitati = /* @__PURE__ */ new Set();
    let s = daVisitare.pop();
    while (s) {
      visitati.add(s);
      const stepDipendenti = this.dipendenti.get(step);
      if (stepDipendenti) {
        for (const step2 of stepDipendenti) {
          if (!visitati.has(step2)) daVisitare.push(step2);
        }
      }
      s = daVisitare.pop();
    }
    return visitati;
  }
  /**
   * Ritorna quali step non hanno dipendenti
   * @private
   */
  getStepsConZeroDipendenti() {
    return [...this.steps].filter((step) => !this.dipendenti.has(step));
  }
  /**
   * Ritorna tutti gli step
   * @private
   */
  getSteps() {
    return this.steps;
  }
  populateProviders(...args) {
    for (const step of this.steps) {
      for (const provide of step.provides(...args)) {
        const step1 = this.providers.get(provide);
        if (step1 != null) {
          throw Error(`${step1} and ${step} already provides ${provide}`);
        }
        this.providers.set(provide, step);
      }
    }
  }
  popolateDependencies(...args) {
    for (const step of this.steps) {
      const set = /* @__PURE__ */ new Set();
      this.dipendenze.set(step, set);
      for (const depend of step.depends(...args)) {
        const dependency = this.providers.get(depend);
        if (dependency != null) {
          set.add(dependency);
        }
      }
    }
  }
  popolateDipendenti() {
    for (const [step, dependencies] of this.dipendenze.entries()) {
      for (const dependency of dependencies) {
        let steps = this.dipendenti.get(dependency);
        if (steps == null) {
          steps = /* @__PURE__ */ new Set();
          this.dipendenti.set(dependency, steps);
        }
        steps.add(step);
      }
    }
  }
}

//# sourceMappingURL=data:application/json;base64,