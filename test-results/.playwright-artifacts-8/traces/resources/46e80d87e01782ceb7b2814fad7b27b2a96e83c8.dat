globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, generateOperationID, getLogHashQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
var EsitoTaskVoltura = /* @__PURE__ */ ((EsitoTaskVoltura2) => {
  EsitoTaskVoltura2["INPUT_NULLO"] = "INPUT_NULLO";
  EsitoTaskVoltura2["CODICE_PROPOSTA_VUOTO"] = "CODICE_PROPOSTA_VUOTO";
  EsitoTaskVoltura2["VOLTURA_INESISTENTE"] = "VOLTURA_INESISTENTE";
  EsitoTaskVoltura2["VOLTURA_SENZA_CODICE_FISCALE"] = "VOLTURA_SENZA_CODICE_FISCALE";
  EsitoTaskVoltura2["VOLTURA_SENZA_DENOMINAZIONE_CLIENTE"] = "VOLTURA_SENZA_DENOMINAZIONE_CLIENTE";
  EsitoTaskVoltura2["VOLTURA_SENZA_COMMODITY"] = "VOLTURA_SENZA_COMMODITY";
  EsitoTaskVoltura2["VOLTURA_SENZA_FORNITURE"] = "VOLTURA_SENZA_FORNITURE";
  EsitoTaskVoltura2["EMAIL_VUOTA"] = "EMAIL_VUOTA";
  EsitoTaskVoltura2["EMAI_NON_VALIDA"] = "EMAI_NON_VALIDA";
  EsitoTaskVoltura2["ERRORE_IMPREVISTO"] = "ERRORE_IMPREVISTO";
  EsitoTaskVoltura2["OK"] = "OK";
  return EsitoTaskVoltura2;
})(EsitoTaskVoltura || {});
export async function creazioneTask(params) {
  const logHash = generateOperationID();
  const url = `${API}/webOrderCommonServices/voltura/upsertTaskVolturaLead?${getLogHashQuery(logHash)}`;
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify(params)
  });
  if (response.status === 200) {
    const data = await response.json();
    if (data.esito === "OK" /* OK */) {
      return data;
    } else {
      throw new ServiceUnhandledResponseError(data.esito, logHash, response);
    }
  }
  throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFDQUFxQztBQUM5QyxTQUFTQyxLQUFLQyxxQkFBcUJDLHVCQUF1QjtBQUUxRCxJQUFLQyxtQkFBTCxrQkFBS0Esc0JBQUw7QUFFRUMscUNBQWM7QUFFZEMsK0NBQXdCO0FBRXhCQyw2Q0FBc0I7QUFFdEJDLHNEQUErQjtBQUUvQkMsNkRBQXNDO0FBRXRDQyxpREFBMEI7QUFFMUJDLGlEQUEwQjtBQUUxQkMscUNBQWM7QUFFZEMseUNBQWtCO0FBRWxCQywyQ0FBb0I7QUFFcEJDLDRCQUFLO0FBdEJGWDtBQUFBQTtBQXdDTCxzQkFBc0JZLGNBQWNDLFFBQWlCO0FBQ25ELFFBQU1DLFVBQVVoQixvQkFBb0I7QUFDcEMsUUFBTWlCLE1BQU0sR0FBR2xCLEdBQUcseURBQXlERSxnQkFDekVlLE9BQ0YsQ0FBQztBQUNELFFBQU1FLFdBQVcsTUFBTUMsTUFBTUYsS0FBSztBQUFBLElBQ2hDRyxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQUMsTUFBTUMsS0FBS0MsVUFBVVYsTUFBTTtBQUFBLEVBQzdCLENBQUM7QUFFRCxNQUFJRyxTQUFTUSxXQUFXLEtBQUs7QUFDM0IsVUFBTUMsT0FBUSxNQUFNVCxTQUFTVSxLQUFLO0FBQ2xDLFFBQUlELEtBQUtFLFVBQVUzQixlQUFxQjtBQUN0QyxhQUFPeUI7QUFBQUEsSUFDVCxPQUFPO0FBQ0wsWUFBTSxJQUFJN0IsOEJBQThCNkIsS0FBS0UsT0FBT2IsU0FBU0UsUUFBUTtBQUFBLElBQ3ZFO0FBQUEsRUFDRjtBQUNBLFFBQU0sSUFBSXBCLDhCQUNSb0IsU0FBU1ksWUFDVGQsU0FDQUUsUUFDRjtBQUNGIiwibmFtZXMiOlsiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJBUEkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiZ2V0TG9nSGFzaFF1ZXJ5IiwiRXNpdG9UYXNrVm9sdHVyYSIsIklOUFVUX05VTExPIiwiQ09ESUNFX1BST1BPU1RBX1ZVT1RPIiwiVk9MVFVSQV9JTkVTSVNURU5URSIsIlZPTFRVUkFfU0VOWkFfQ09ESUNFX0ZJU0NBTEUiLCJWT0xUVVJBX1NFTlpBX0RFTk9NSU5BWklPTkVfQ0xJRU5URSIsIlZPTFRVUkFfU0VOWkFfQ09NTU9ESVRZIiwiVk9MVFVSQV9TRU5aQV9GT1JOSVRVUkUiLCJFTUFJTF9WVU9UQSIsIkVNQUlfTk9OX1ZBTElEQSIsIkVSUk9SRV9JTVBSRVZJU1RPIiwiT0siLCJjcmVhemlvbmVUYXNrIiwicGFyYW1zIiwibG9nSGFzaCIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsImVzaXRvIiwic3RhdHVzVGV4dCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJjcmVhemlvbmVUYXNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgQVBJLCBnZW5lcmF0ZU9wZXJhdGlvbklELCBnZXRMb2dIYXNoUXVlcnkgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5lbnVtIEVzaXRvVGFza1ZvbHR1cmEge1xyXG4gIC8qKiBzZSBpbCBKU09OIGRpIGlucHV0IGFsIHNlcnZpemlvIMOoIG51bGxvICovXHJcbiAgSU5QVVRfTlVMTE8gPSAnSU5QVVRfTlVMTE8nLFxyXG4gIC8qKiBzZSBpbCBjb2RpY2UgcHJvcG9zdGEgbWFuY2EgbmVsbOKAmWlucHV0ICovXHJcbiAgQ09ESUNFX1BST1BPU1RBX1ZVT1RPID0gJ0NPRElDRV9QUk9QT1NUQV9WVU9UTycsXHJcbiAgLyoqIHNlIGxhIHZvbHR1cmEgaW5kaWNhdGEgbm9uIGVzaXN0ZSAqL1xyXG4gIFZPTFRVUkFfSU5FU0lTVEVOVEUgPSAnVk9MVFVSQV9JTkVTSVNURU5URScsXHJcbiAgLyoqIHNlIG5lbGxhIHZvbHR1cmEgbWFuY2EgaWwgY29kaWNlIGZpc2NhbGUgKi9cclxuICBWT0xUVVJBX1NFTlpBX0NPRElDRV9GSVNDQUxFID0gJ1ZPTFRVUkFfU0VOWkFfQ09ESUNFX0ZJU0NBTEUnLFxyXG4gIC8qKiBzZSBuZWxsYSB2b2x0dXJhIG1hbmNhIGxhIGRlbm9taW5hemlvbmUgY2xpZW50ZSAqL1xyXG4gIFZPTFRVUkFfU0VOWkFfREVOT01JTkFaSU9ORV9DTElFTlRFID0gJ1ZPTFRVUkFfU0VOWkFfREVOT01JTkFaSU9ORV9DTElFTlRFJyxcclxuICAvKiogc2UgbmVsbGEgdm9sdHVyYSBtYW5jYSBsYSBjb21tb2RpdHkgKi9cclxuICBWT0xUVVJBX1NFTlpBX0NPTU1PRElUWSA9ICdWT0xUVVJBX1NFTlpBX0NPTU1PRElUWScsXHJcbiAgLyoqIHNlIG5lbGxhIHZvbHR1cmEgbWFuY2EgbGEgZm9ybml0dXJhICovXHJcbiAgVk9MVFVSQV9TRU5aQV9GT1JOSVRVUkUgPSAnVk9MVFVSQV9TRU5aQV9GT1JOSVRVUkUnLFxyXG4gIC8qKiBzZSBs4oCZZW1haWwgaW5zZXJpdGEgw6ggdnVvdGEgKi9cclxuICBFTUFJTF9WVU9UQSA9ICdFTUFJTF9WVU9UQScsXHJcbiAgLyoqIHNlIGzigJllbWFpbCBpbnNlcml0YSBub24gw6ggdmFsaWRhICovXHJcbiAgRU1BSV9OT05fVkFMSURBID0gJ0VNQUlfTk9OX1ZBTElEQScsXHJcbiAgLyoqIGluIGNhc28gZGkgYWx0cmkgZXJyb3JpIG5lbGxhIGNoaWFtYXRhICovXHJcbiAgRVJST1JFX0lNUFJFVklTVE8gPSAnRVJST1JFX0lNUFJFVklTVE8nLFxyXG4gIC8qKiBzZSBsYSBjaGlhbWF0YSByaWVzY2UgKi9cclxuICBPSyA9ICdPSycsXHJcbn1cclxuXHJcbnR5cGUgV1NJbnB1dCA9IHtcclxuICBpZExlYWQ6IHN0cmluZztcclxuICBlbWFpbFJpY29udGF0dG86IHN0cmluZztcclxuICBjb25zZW5zb1JpY29udGF0dG9UZWxlZm9uaWNvOiBib29sZWFuO1xyXG4gIGFubnVsbGFWb2x0dXJhOiBib29sZWFuO1xyXG59O1xyXG50eXBlIFdTT3V0cHV0ID0ge1xyXG4gIGVzaXRvOiBFc2l0b1Rhc2tWb2x0dXJhO1xyXG4gIHRhc2tJRDogc3RyaW5nO1xyXG59O1xyXG4vKipcclxuICogU2Vydml6aW8gcGVyIGxhIGNyZWF6aW9uZSBkZWwgdGFza1xyXG4gKiBAcGFyYW0gcGFyYW1zXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXppb25lVGFzayhwYXJhbXM6IFdTSW5wdXQpIHtcclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG4gIGNvbnN0IHVybCA9IGAke0FQSX0vd2ViT3JkZXJDb21tb25TZXJ2aWNlcy92b2x0dXJhL3Vwc2VydFRhc2tWb2x0dXJhTGVhZD8ke2dldExvZ0hhc2hRdWVyeShcclxuICAgIGxvZ0hhc2hcclxuICApfWA7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgIH0sXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxyXG4gIH0pO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgIGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSBhcyBXU091dHB1dDtcclxuICAgIGlmIChkYXRhLmVzaXRvID09PSBFc2l0b1Rhc2tWb2x0dXJhLk9LKSB7XHJcbiAgICAgIHJldHVybiBkYXRhOyAvL1RPRE8gYWdnaXVuZ2VyZSB0aGFua3lvdXBhZ2UgZmluYWxlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IoZGF0YS5lc2l0bywgbG9nSGFzaCwgcmVzcG9uc2UpOyAvL2FnZ2l1bmdlcmUgbG8gc3RlcCB0b3JuYSBhbGxhIGhvbWUgcmVpbnNlcmlzY2kgaSBkYXRpIFRPRE9cclxuICAgIH1cclxuICB9XHJcbiAgdGhyb3cgbmV3IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yKFxyXG4gICAgcmVzcG9uc2Uuc3RhdHVzVGV4dCxcclxuICAgIGxvZ0hhc2gsXHJcbiAgICByZXNwb25zZVxyXG4gICk7XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy9kYXRhLWFjY2Vzcy9zcmMvbGliL2FwaS93ZWJvcmRlci9jcmVhemlvbmVUYXNrLnRzIn0=