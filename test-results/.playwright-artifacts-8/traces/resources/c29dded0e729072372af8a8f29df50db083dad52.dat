globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { equals } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { CommodityObj } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/CommodityObj.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
export function sortProducts(a, b) {
  if (a.panel !== b.panel) {
    return (b.panel ? 1 : 0) - (a.panel ? 1 : 0);
  }
  if (a.broadband !== b.broadband) {
    return (b.broadband ? 1 : 0) - (a.broadband ? 1 : 0);
  }
  if (a.commodity?.power !== b.commodity?.power) {
    return (b.commodity?.power ? 1 : 0) - (a.commodity?.power ? 1 : 0);
  }
  return 0;
}
export function combineProducts(products) {
  if (products.length < 2) {
    return products;
  }
  for (let j = 0; j < products.length; j++) {
    for (let i = j + 1; i < products.length; i++) {
      const joinResult = products[j].join(products[i]);
      if (joinResult) {
        const workingProducts = [...combineProducts([...products.slice(0, j), joinResult, ...products.slice(j + 1, i), ...products.slice(i + 1)])];
        console.log("b", products.toString(), "==>", workingProducts.toString());
        return workingProducts;
      }
    }
  }
  return products;
}
export class CommodityWorkingProduct {
  constructor(commodity, operativeMode, addons = {}) {
    this.commodity = commodity;
    this.operativeMode = operativeMode;
    this.addons = addons;
    this.broadband = addons.broadband;
    this.panel = addons.panel;
  }
  get key() {
    return this.commodity.toString();
  }
  get description() {
    return [this.commodity.power && "power", this.commodity.gas && "gas", this.addons.broadband && "broadband", this.addons.panel && "panel"].filter(Boolean).join("+");
  }
  toString() {
    return this.description;
  }
  join(product) {
    if (product.panel) {
      return;
    }
    const checkOperativeMode = (operativeModes) => equals(this.operativeMode, ...operativeModes) && equals(product.operativeMode, ...operativeModes);
    const broadbandCheck = !product.broadband || checkOperativeMode([OperativeMode.BROADBAND, OperativeMode.SWITCH_IN, OperativeMode.SWITCH_IN_TRANSFER]);
    const commodityCheck = !product.commodity || product.operativeMode === this.operativeMode && this.operativeMode !== OperativeMode.NEW_ACTIVATION && product.operativeMode !== OperativeMode.NEW_ACTIVATION && this.commodity.toString() !== product.commodity.toString();
    if (broadbandCheck && commodityCheck) {
      return new CommodityWorkingProduct(new CommodityObj({
        power: this.commodity.power || product.commodity?.power,
        gas: this.commodity.gas || product.commodity?.gas
      }), this.operativeMode, {
        broadband: this.broadband || product.broadband,
        panel: this.panel || product.panel
      });
    }
  }
}
export class BroadbandWorkingProduct {
  constructor() {
    this.operativeMode = OperativeMode.BROADBAND;
    this.broadband = true;
  }
  get key() {
    return "broadband-standalone";
  }
  get description() {
    return "broadband";
  }
  toString() {
    return this.description;
  }
  join(product) {
    if (product instanceof CommodityWorkingProduct) {
      return product.join(this);
    }
  }
}
export class PanelWorkingProduct {
  constructor() {
    this.operativeMode = OperativeMode.VIRTUAL_PANEL;
    this.panel = true;
  }
  get key() {
    return "panel-standalone";
  }
  get description() {
    return "panel";
  }
  toString() {
    return this.description;
  }
  join(product) {
    return;
  }
}

//# sourceMappingURL=data:application/json;base64,