globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { CheckModelloVolturaRedSignalError, CheckModelloVolturaYellowSignalError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/errors/index.ts";
import { OK, ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { currentIdLead } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/current-contract-info-atoms.ts";
import { consentPhoneContactAtom, emailAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/profile-atoms.ts";
import { API, generateOperationID, getLogHashQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
import { creazioneTask } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/creazioneTask.ts";
var EsitoModelloVoltura = /* @__PURE__ */ ((EsitoModelloVoltura2) => {
  EsitoModelloVoltura2["VOLTURA_INESISTENTE"] = "VOLTURA_INESISTENTE";
  EsitoModelloVoltura2["VOLTURA_SENZA_FORNITURE"] = "VOLTURA_SENZA_FORNITURE";
  EsitoModelloVoltura2["VOLTURA_SENZA_COMMODITY"] = "VOLTURA_SENZA_COMMODITY";
  EsitoModelloVoltura2["VOLTURA_SENZA_CODICE_PLICO"] = "VOLTURA_SENZA_CODICE_PLICO";
  EsitoModelloVoltura2["VOLTURA_SENZA_CODICE_FISCALE"] = "VOLTURA_SENZA_CODICE_FISCALE";
  EsitoModelloVoltura2["VOLTURA_SENZA_DENOMINAZIONE_CLIENTE"] = "VOLTURA_SENZA_DENOMINAZIONE_CLIENTE";
  EsitoModelloVoltura2["ERRORE_IMPREVISTO"] = "ERRORE_IMPREVISTO";
  EsitoModelloVoltura2["OK"] = "OK";
  return EsitoModelloVoltura2;
})(EsitoModelloVoltura || {});
var WSOutputRifiuto = /* @__PURE__ */ ((WSOutputRifiuto2) => {
  WSOutputRifiuto2["INPUT_VUOTI"] = "INPUT_VUOTI";
  WSOutputRifiuto2["VOLTURA_INESISTENTE"] = "VOLTURA_INESISTENTE";
  WSOutputRifiuto2["VOLTURA_SENZA_CODICE_PLICO"] = "VOLTURA_SENZA_CODICE_PLICO";
  WSOutputRifiuto2["DATI_CLIENTE_VUOTI"] = "DATI_CLIENTE_VUOTI";
  WSOutputRifiuto2["DATI_FORNITURA_VUOTI"] = "DATI_FORNITURA_VUOTI";
  WSOutputRifiuto2["VOLTURA_GIA_INVIATA"] = "VOLTURA_GIA_INVIATA";
  WSOutputRifiuto2["VOLTURA_GIA_RIFIUTATA"] = "VOLTURA_GIA_RIFIUTATA";
  WSOutputRifiuto2["OK"] = "OK";
  WSOutputRifiuto2["FALLITO"] = "FALLITO";
  return WSOutputRifiuto2;
})(WSOutputRifiuto || {});
async function checkModello(params) {
  const {
    idLead,
    rifiuta,
    ...yellowSignalProps
  } = params;
  const logHash = generateOperationID();
  const query = new URLSearchParams({
    idLead,
    rifiutaVolturaSuSemaforoRosso: rifiuta ? rifiuta.toString() : "false",
    logHash
  });
  const url = `${API}/webOrderCommonServices/voltura/checkModelloVolturaLead?${query}`;
  const response = await fetch(url, {
    method: "POST",
    headers: {
      Accept: "application/json"
    }
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  if (data.esito !== "OK" /* OK */) {
    throw new ServiceUnhandledResponseError(data.esito, logHash, response);
  }
  switch (data.esitoCheckSemaforico) {
    case "SEMAFORO_ROSSO": {
      const logHashRifiuto = generateOperationID();
      const urlRifiuto = `${API}/webOrderCommonServices/voltura/v1/${idLead}/refuse?${getLogHashQuery(logHashRifiuto)}`;
      const responseRifiuto = await fetch(urlRifiuto, {
        method: "POST",
        headers: {
          Accept: "application/json"
        }
      });
      if (responseRifiuto.status === 200) {
        const dataRifiuto = await response.json();
        if (dataRifiuto === "OK" /* OK */) throw new CheckModelloVolturaRedSignalError(dataRifiuto, logHash, response);
      }
      throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
    }
    case "NON_DISPONIBILE":
    case "SEMAFORO_VERDE":
      return OK;
    case "SEMAFORO_GIALLO":
      throw new CheckModelloVolturaYellowSignalError(yellowSignalProps, data.esitoCheckSemaforico, logHash, response);
    default:
      throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
}
export const checkModelloAtom = atomWithErrorReset(async (get) => {
  const idLead = get(currentIdLead) || "";
  const email = await get(emailAtom) || "";
  const consentPhoneContact = get(consentPhoneContactAtom) || false;
  await checkModello({
    idLead,
    rifiuta: true,
    email,
    consentPhoneContact,
    onYellowSubmit: async ({
      email: email2,
      consentPhoneContact: consentPhoneContact2
    }) => {
      try {
        await creazioneTask({
          idLead,
          emailRicontatto: email2,
          consensoRicontattoTelefonico: consentPhoneContact2,
          annullaVoltura: true
        });
        return "OK";
      } catch (error) {
        console.debug(error);
        return "KO";
      }
    }
  });
});

//# sourceMappingURL=data:application/json;base64,