globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { fetchPaymentTools } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/payment-tools.ts";
import { atomWithErrorReset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/atomWithRetryableQuery.ts";
export function atomWithPaymentTools(code) {
  return atomWithErrorReset(async () => {
    const data = await fetchPaymentTools(code);
    return data.filter((paymentTool) => paymentTool.status === "ATTIVA" && paymentTool.contoSelezionato).map((p) => {
      const paymentTool = {
        id: p.paymentToolId,
        profile: p.profiloSelezionato,
        status: p.status,
        requestDate: p.requestDate,
        iban: p.ibanIntestatarioConto,
        intestatario: {
          type: "individual",
          givenName: "",
          familyName: p.intestatarioConto,
          taxId: p.codiceFiscaleIntestatarioConto
        },
        subscriber: {
          type: "individual",
          givenName: "",
          familyName: p.sottoscrittoreConto,
          taxId: p.codiceFiscaleSottoscrittoreConto
        }
      };
      return paymentTool;
    });
  });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHlCQUF5QjtBQUVsQyxTQUFTQywwQkFBMEI7QUFFNUIsZ0JBQVNDLHFCQUFxQkMsTUFBYztBQUNqRCxTQUFPRixtQkFBbUIsWUFBWTtBQUNwQyxVQUFNRyxPQUFPLE1BQU1KLGtCQUFrQkcsSUFBYztBQUNuRCxXQUFPQyxLQUNKQyxPQUNFQyxpQkFDQ0EsWUFBWUMsV0FBVyxZQUFZRCxZQUFZRSxnQkFDbkQsRUFDQ0MsSUFBS0MsT0FBTTtBQUNWLFlBQU1KLGNBQTJCO0FBQUEsUUFDL0JLLElBQUlELEVBQUVFO0FBQUFBLFFBQ05DLFNBQVNILEVBQUVJO0FBQUFBLFFBQ1hQLFFBQVFHLEVBQUVIO0FBQUFBLFFBQ1ZRLGFBQWFMLEVBQUVLO0FBQUFBLFFBQ2ZDLE1BQU1OLEVBQUVPO0FBQUFBLFFBQ1JDLGNBQWM7QUFBQSxVQUNaQyxNQUFNO0FBQUEsVUFDTkMsV0FBVztBQUFBLFVBQ1hDLFlBQVlYLEVBQUVZO0FBQUFBLFVBQ2RDLE9BQU9iLEVBQUVjO0FBQUFBLFFBQ1g7QUFBQSxRQUNBQyxZQUFZO0FBQUEsVUFDVk4sTUFBTTtBQUFBLFVBQ05DLFdBQVc7QUFBQSxVQUNYQyxZQUFZWCxFQUFFZ0I7QUFBQUEsVUFDZEgsT0FBT2IsRUFBRWlCO0FBQUFBLFFBQ1g7QUFBQSxNQUNGO0FBQ0EsYUFBT3JCO0FBQUFBLElBQ1QsQ0FBQztBQUFBLEVBQ0wsQ0FBQztBQUNIIiwibmFtZXMiOlsiZmV0Y2hQYXltZW50VG9vbHMiLCJhdG9tV2l0aEVycm9yUmVzZXQiLCJhdG9tV2l0aFBheW1lbnRUb29scyIsImNvZGUiLCJkYXRhIiwiZmlsdGVyIiwicGF5bWVudFRvb2wiLCJzdGF0dXMiLCJjb250b1NlbGV6aW9uYXRvIiwibWFwIiwicCIsImlkIiwicGF5bWVudFRvb2xJZCIsInByb2ZpbGUiLCJwcm9maWxvU2VsZXppb25hdG8iLCJyZXF1ZXN0RGF0ZSIsImliYW4iLCJpYmFuSW50ZXN0YXRhcmlvQ29udG8iLCJpbnRlc3RhdGFyaW8iLCJ0eXBlIiwiZ2l2ZW5OYW1lIiwiZmFtaWx5TmFtZSIsImludGVzdGF0YXJpb0NvbnRvIiwidGF4SWQiLCJjb2RpY2VGaXNjYWxlSW50ZXN0YXRhcmlvQ29udG8iLCJzdWJzY3JpYmVyIiwic290dG9zY3JpdHRvcmVDb250byIsImNvZGljZUZpc2NhbGVTb3R0b3Njcml0dG9yZUNvbnRvIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImJ1aWxkUGF5bWVudFRvb2xzQXRvbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmZXRjaFBheW1lbnRUb29scyB9IGZyb20gJy4uL2FwaS9wcml2YXRlLWFyZWEvcGF5bWVudC10b29scyc7XHJcbmltcG9ydCB7IFBheW1lbnRUb29sIH0gZnJvbSAnLi4vYXRvbXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBhdG9tV2l0aEVycm9yUmVzZXQgfSBmcm9tICcuLi91dGlscy9hdG9tV2l0aFJldHJ5YWJsZVF1ZXJ5JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdG9tV2l0aFBheW1lbnRUb29scyhjb2RlOiBzdHJpbmcpIHtcclxuICByZXR1cm4gYXRvbVdpdGhFcnJvclJlc2V0KGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaFBheW1lbnRUb29scyhjb2RlIGFzIHN0cmluZyk7XHJcbiAgICByZXR1cm4gZGF0YVxyXG4gICAgICAuZmlsdGVyKFxyXG4gICAgICAgIChwYXltZW50VG9vbCkgPT5cclxuICAgICAgICAgIHBheW1lbnRUb29sLnN0YXR1cyA9PT0gJ0FUVElWQScgJiYgcGF5bWVudFRvb2wuY29udG9TZWxlemlvbmF0b1xyXG4gICAgICApXHJcbiAgICAgIC5tYXAoKHApID0+IHtcclxuICAgICAgICBjb25zdCBwYXltZW50VG9vbDogUGF5bWVudFRvb2wgPSB7XHJcbiAgICAgICAgICBpZDogcC5wYXltZW50VG9vbElkLFxyXG4gICAgICAgICAgcHJvZmlsZTogcC5wcm9maWxvU2VsZXppb25hdG8sXHJcbiAgICAgICAgICBzdGF0dXM6IHAuc3RhdHVzLFxyXG4gICAgICAgICAgcmVxdWVzdERhdGU6IHAucmVxdWVzdERhdGUsXHJcbiAgICAgICAgICBpYmFuOiBwLmliYW5JbnRlc3RhdGFyaW9Db250byxcclxuICAgICAgICAgIGludGVzdGF0YXJpbzoge1xyXG4gICAgICAgICAgICB0eXBlOiAnaW5kaXZpZHVhbCcsXHJcbiAgICAgICAgICAgIGdpdmVuTmFtZTogJycsXHJcbiAgICAgICAgICAgIGZhbWlseU5hbWU6IHAuaW50ZXN0YXRhcmlvQ29udG8sXHJcbiAgICAgICAgICAgIHRheElkOiBwLmNvZGljZUZpc2NhbGVJbnRlc3RhdGFyaW9Db250byxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzdWJzY3JpYmVyOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdpbmRpdmlkdWFsJyxcclxuICAgICAgICAgICAgZ2l2ZW5OYW1lOiAnJyxcclxuICAgICAgICAgICAgZmFtaWx5TmFtZTogcC5zb3R0b3Njcml0dG9yZUNvbnRvLFxyXG4gICAgICAgICAgICB0YXhJZDogcC5jb2RpY2VGaXNjYWxlU290dG9zY3JpdHRvcmVDb250byxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcGF5bWVudFRvb2w7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy1nZW5lcmF0b3JzL2J1aWxkUGF5bWVudFRvb2xzQXRvbS50cyJ9