globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { NotImplementedError, PreconditionFailedError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { accountSelectedAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/account-selected-atoms.ts";
import { isExistingPowerSupply, NewPowerSupply } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/supply.ts";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { atomWithCheckPodDuereti } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/verificaPodDuereti.ts";
import { atomWithCheckAsset } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/weborder/checkAsset.ts";
import { getKwLabel } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts";
export const powerSupplySelectedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/powerSupplySelectedAtom", atom(async (get) => {
  const account = await get(accountSelectedAtom);
  if (!account) return;
  return get(account.powerSupply);
}));
powerSupplySelectedAtom.debugLabel = "powerSupplySelectedAtom";
export const podPowerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/podPowerAtom", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  if (supply?.pod == null) return;
  return get(supply.pod);
}, async (get, set, pod) => {
  const supply = await get(powerSupplySelectedAtom);
  const operativeMode = get(operativeModeAtom);
  if (supply?.pod == null || !operativeMode) {
    throw new NotImplementedError();
  }
  set(supply.pod, pod);
  await get(atomWithCheckPodDuereti({
    pod,
    supply
  }));
  if (!(supply instanceof NewPowerSupply)) {
    throw new NotImplementedError();
  }
  const checkPod = await set(supply.checkPodForOperativeModeAtoms(operativeMode));
  if (checkPod == null) {
    throw new PreconditionFailedError("checkPod is null, this may happen if pod is empty");
  }
  await get(atomWithCheckAsset({
    pod
  }));
  return checkPod;
}));
podPowerAtom.debugLabel = "podPowerAtom";
export const currentYearPowerConsumptionAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/currentYearPowerConsumptionAtom", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  const currentYearAtom = supply?.consumption?.currentYear;
  if (!currentYearAtom) return;
  return get(currentYearAtom);
}));
currentYearPowerConsumptionAtom.debugLabel = "currentYearPowerConsumptionAtom";
export const estimatedYearPowerConsumptionAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/estimatedYearPowerConsumptionAtom", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  const currentYearAtom = supply?.consumption?.estimatedYear;
  if (!currentYearAtom) return;
  return get(currentYearAtom);
}, async (get, set, consumption) => {
  const supply = await get(powerSupplySelectedAtom);
  if (supply?.consumption?.estimatedYear == null) {
    throw new NotImplementedError();
  }
  set(supply.consumption.estimatedYear, consumption);
}));
estimatedYearPowerConsumptionAtom.debugLabel = "estimatedYearPowerConsumptionAtom";
export const estimatedYearPowerConsumptionWithUnitAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/estimatedYearPowerConsumptionWithUnitAtom", atom(async (get) => await get(estimatedYearPowerConsumptionAtom) + " kWh"));
estimatedYearPowerConsumptionWithUnitAtom.debugLabel = "estimatedYearPowerConsumptionWithUnitAtom";
export const powerProductName$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/powerProductName$", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  if (!supply || !isExistingPowerSupply(supply)) {
    return;
  }
  return supply.productName;
}));
powerProductName$.debugLabel = "powerProductName$";
export const powerKwAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/powerKwAtom", atom(async (get) => {
  const supply = await get(powerSupplySelectedAtom);
  if (!supply || isExistingPowerSupply(supply)) {
    return;
  }
  return supply.kwAtom ? (await get(supply.kwAtom))?.[0] : void 0;
}, async (get, set, kw) => {
  const supply = await get(powerSupplySelectedAtom);
  if (!supply || isExistingPowerSupply(supply)) {
    return;
  }
  return supply.kwAtom ? set(supply.kwAtom, kw) : void 0;
}));
powerKwAtom.debugLabel = "powerKwAtom";
export const powerKwAsStringAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\supply-selected-power.ts/powerKwAsStringAtom", atom(async (get) => {
  const value = await get(powerKwAtom);
  if (value == null) return value;
  return getKwLabel(value);
}));
powerKwAsStringAtom.debugLabel = "powerKwAsStringAtom";

//# sourceMappingURL=data:application/json;base64,