globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { gasOffer$, offer$, powerOffer$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/products-collection/index.ts";
import { couponAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/coupon/index.ts";
import { operativeModeAtom, powerRateAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { billType$, paymentType$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/paymentType$.ts";
import { tsOperativeModeGasAtom, tsOperativeModePowerAtom, workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { Bill, Payment, PowerRate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { generaCorrispettivi } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi/index.ts";
import { transformCorrispettivi } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi-wrapper.ts";
import { getDiscountPrezziBarratiAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/promo-atoms.ts";
import { atomFamily } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { corrispettiviCommodityAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/offerta/corrispettivi-commodity-atom.ts";
export const corrispettiviTransformedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\atoms.ts/corrispettiviTransformedAtom", atomFamily((tsOperativeModes) => atom(async (get) => {
  const offer = await get(corrispettiviCommodityAtom);
  if (offer == null) {
    return;
  }
  const powerRate = get(powerRateAtom);
  const payment = await get(paymentType$);
  const bill = await get(billType$);
  const commodity = get(workingProductAtom)?.commodity;
  const luce = !!commodity?.power;
  const gas = !!commodity?.gas;
  const tariffaLuce = powerRate === PowerRate.SINGLE ? "MONORARIA" : powerRate === PowerRate.BI_HOURLY ? "BIORARIA" : "MONORARIA";
  const bolletta = bill === Bill.DIGITAL ? "DIGITALE" : bill === Bill.PAPER ? "CARTACEA" : "CARTACEA";
  const pagamento = payment === Payment.DOMICILIATION ? "DOMICILIAZIONE" : payment === Payment.POSTAL ? "BOLLETTINO" : "BOLLETTINO";
  let prezziBarratiLuce;
  let prezziBarratiGas;
  if (tsOperativeModes) {
    const prezziBarrati = await get(getDiscountPrezziBarratiAtom);
    const tsOperativeModePower = get(tsOperativeModePowerAtom);
    const tsOperativeModeGas = get(tsOperativeModeGasAtom);
    prezziBarratiLuce = prezziBarrati.isOperativeModeEnabled(tsOperativeModePower);
    prezziBarratiGas = prezziBarrati.isOperativeModeEnabled(tsOperativeModeGas);
  } else {
    const prezziBarrati = await get(getDiscountPrezziBarratiAtom);
    const operativeMode = get(operativeModeAtom);
    prezziBarratiLuce = prezziBarratiGas = operativeMode ? prezziBarrati.isOperativeModeEnabled(operativeMode) : false;
  }
  const corrispettivi = generaCorrispettivi({
    ...offer,
    luce,
    gas
  }, {
    tariffaLuce,
    bolletta,
    pagamento
  }, {
    coupon: get(couponAtom),
    prezziBarratiLuce,
    prezziBarratiGas
  });
  if (corrispettivi == null) {
    return;
  }
  console.log(corrispettivi);
  return transformCorrispettivi(corrispettivi);
})));
corrispettiviTransformedAtom.debugLabel = "corrispettiviTransformedAtom";
export const offerNameAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\atoms.ts/offerNameAtom", atom(async (get) => {
  return (await get(offer$))?.name;
}));
offerNameAtom.debugLabel = "offerNameAtom";
export const offerContractGas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\atoms.ts/offerContractGas$", atom(async (get) => (await get(gasOffer$))?.document));
offerContractGas$.debugLabel = "offerContractGas$";
export const offerContractPower$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\offerta\\atoms.ts/offerContractPower$", atom(async (get) => (await get(powerOffer$))?.document));
offerContractPower$.debugLabel = "offerContractPower$";

//# sourceMappingURL=data:application/json;base64,