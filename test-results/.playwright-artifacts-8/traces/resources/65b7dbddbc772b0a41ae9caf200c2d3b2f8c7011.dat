globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { ServiceUnhandledResponseError } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { API, generateOperationID } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
export async function costiAttivazione(params) {
  const date = (/* @__PURE__ */ new Date()).toISOString();
  const logHash = generateOperationID();
  const response = await fetch(`${API}/webOrderCommonServices/costiAttivazioni`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    },
    body: JSON.stringify({
      logHash,
      idLead: params.idLead,
      plicoCode: params.plicoCode,
      Header: {
        Mittente: "WEB",
        TipoInterfaccia: "",
        DataMessaggio: date,
        IsSimula: false
      },
      Body: {
        CodiceSDR: params.codiceSdr,
        DescrizioneSDR: params.descrizioneSdr,
        Commodity: params.commodity,
        DataRiferimentoOPS: date,
        DataRiferimentoSDR: date,
        CodiceFornituraOld: "",
        CodiceISTAT: params.codiceIstat || ""
      }
    })
  });
  if (response.status !== 200) {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const data = await response.json();
  if (data.status !== "Success") {
    throw new ServiceUnhandledResponseError(response.statusText, logHash, response);
  }
  const costiPlenitude = data.response.Body.PrezziOPS;
  const costiDistributore = data.response.Body.PrezziSDR;
  return {
    costiPlenitude,
    costiDistributore,
    costiTotali: costiPlenitude + costiDistributore
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHFDQUFxQztBQUM5QyxTQUFTQyxLQUFLQywyQkFBMkI7QUFFekMsc0JBQXNCQyxpQkFBaUJDLFFBT3BDO0FBQ0QsUUFBTUMsUUFBTyxvQkFBSUMsS0FBSyxHQUFFQyxZQUFZO0FBQ3BDLFFBQU1DLFVBQVVOLG9CQUFvQjtBQUVwQyxRQUFNTyxXQUFXLE1BQU1DLE1BQ3JCLEdBQUdULEdBQUcsNENBQ047QUFBQSxJQUNFVSxRQUFRO0FBQUEsSUFDUkMsU0FBUztBQUFBLE1BQ1AsZ0JBQWdCO0FBQUEsTUFDaEJDLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQUMsTUFBTUMsS0FBS0MsVUFBVTtBQUFBLE1BQ25CUjtBQUFBQSxNQUNBUyxRQUFRYixPQUFPYTtBQUFBQSxNQUNmQyxXQUFXZCxPQUFPYztBQUFBQSxNQUNsQkMsUUFBUTtBQUFBLFFBQ05DLFVBQVU7QUFBQSxRQUNWQyxpQkFBaUI7QUFBQSxRQUNqQkMsZUFBZWpCO0FBQUFBLFFBQ2ZrQixVQUFVO0FBQUEsTUFDWjtBQUFBLE1BQ0FDLE1BQU07QUFBQSxRQUNKQyxXQUFXckIsT0FBT3NCO0FBQUFBLFFBQ2xCQyxnQkFBZ0J2QixPQUFPd0I7QUFBQUEsUUFDdkJDLFdBQVd6QixPQUFPMEI7QUFBQUEsUUFDbEJDLG9CQUFvQjFCO0FBQUFBLFFBQ3BCMkIsb0JBQW9CM0I7QUFBQUEsUUFDcEI0QixvQkFBb0I7QUFBQSxRQUNwQkMsYUFBYTlCLE9BQU8rQixlQUFlO0FBQUEsTUFDckM7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNILENBQ0Y7QUFFQSxNQUFJMUIsU0FBUzJCLFdBQVcsS0FBSztBQUMzQixVQUFNLElBQUlwQyw4QkFDUlMsU0FBUzRCLFlBQ1Q3QixTQUNBQyxRQUNGO0FBQUEsRUFDRjtBQUVBLFFBQU02QixPQUFPLE1BQU03QixTQUFTOEIsS0FBSztBQUVqQyxNQUFJRCxLQUFLRixXQUFXLFdBQVc7QUFDN0IsVUFBTSxJQUFJcEMsOEJBQ1JTLFNBQVM0QixZQUNUN0IsU0FDQUMsUUFDRjtBQUFBLEVBQ0Y7QUFFQSxRQUFNK0IsaUJBQWlCRixLQUFLN0IsU0FBU2UsS0FBS2lCO0FBQzFDLFFBQU1DLG9CQUFvQkosS0FBSzdCLFNBQVNlLEtBQUttQjtBQUU3QyxTQUFPO0FBQUEsSUFDTEg7QUFBQUEsSUFDQUU7QUFBQUEsSUFDQUUsYUFBYUosaUJBQWlCRTtBQUFBQSxFQUNoQztBQUNGIiwibmFtZXMiOlsiU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IiLCJBUEkiLCJnZW5lcmF0ZU9wZXJhdGlvbklEIiwiY29zdGlBdHRpdmF6aW9uZSIsInBhcmFtcyIsImRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJsb2dIYXNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImlkTGVhZCIsInBsaWNvQ29kZSIsIkhlYWRlciIsIk1pdHRlbnRlIiwiVGlwb0ludGVyZmFjY2lhIiwiRGF0YU1lc3NhZ2dpbyIsIklzU2ltdWxhIiwiQm9keSIsIkNvZGljZVNEUiIsImNvZGljZVNkciIsIkRlc2NyaXppb25lU0RSIiwiZGVzY3JpemlvbmVTZHIiLCJDb21tb2RpdHkiLCJjb21tb2RpdHkiLCJEYXRhUmlmZXJpbWVudG9PUFMiLCJEYXRhUmlmZXJpbWVudG9TRFIiLCJDb2RpY2VGb3JuaXR1cmFPbGQiLCJDb2RpY2VJU1RBVCIsImNvZGljZUlzdGF0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwiY29zdGlQbGVuaXR1ZGUiLCJQcmV6emlPUFMiLCJjb3N0aURpc3RyaWJ1dG9yZSIsIlByZXp6aVNEUiIsImNvc3RpVG90YWxpIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImNvc3RpQXR0aXZhemlvbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZVVuaGFuZGxlZFJlc3BvbnNlRXJyb3IgfSBmcm9tICdAbmFqLXdvL3V0aWwnO1xyXG5pbXBvcnQgeyBBUEksIGdlbmVyYXRlT3BlcmF0aW9uSUQgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29zdGlBdHRpdmF6aW9uZShwYXJhbXM6IHtcclxuICBjb21tb2RpdHk6ICdQT1dFUicgfCAnR0FTJyB8IHN0cmluZztcclxuICBjb2RpY2VTZHI6IHN0cmluZztcclxuICBkZXNjcml6aW9uZVNkcjogc3RyaW5nO1xyXG4gIGNvZGljZUlzdGF0Pzogc3RyaW5nO1xyXG4gIGlkTGVhZDogc3RyaW5nO1xyXG4gIHBsaWNvQ29kZTogc3RyaW5nO1xyXG59KSB7XHJcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICBjb25zdCBsb2dIYXNoID0gZ2VuZXJhdGVPcGVyYXRpb25JRCgpO1xyXG5cclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYCR7QVBJfS93ZWJPcmRlckNvbW1vblNlcnZpY2VzL2Nvc3RpQXR0aXZhemlvbmlgLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBsb2dIYXNoOiBsb2dIYXNoLFxyXG4gICAgICAgIGlkTGVhZDogcGFyYW1zLmlkTGVhZCxcclxuICAgICAgICBwbGljb0NvZGU6IHBhcmFtcy5wbGljb0NvZGUsXHJcbiAgICAgICAgSGVhZGVyOiB7XHJcbiAgICAgICAgICBNaXR0ZW50ZTogJ1dFQicsXHJcbiAgICAgICAgICBUaXBvSW50ZXJmYWNjaWE6ICcnLFxyXG4gICAgICAgICAgRGF0YU1lc3NhZ2dpbzogZGF0ZSxcclxuICAgICAgICAgIElzU2ltdWxhOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIEJvZHk6IHtcclxuICAgICAgICAgIENvZGljZVNEUjogcGFyYW1zLmNvZGljZVNkcixcclxuICAgICAgICAgIERlc2NyaXppb25lU0RSOiBwYXJhbXMuZGVzY3JpemlvbmVTZHIsXHJcbiAgICAgICAgICBDb21tb2RpdHk6IHBhcmFtcy5jb21tb2RpdHksXHJcbiAgICAgICAgICBEYXRhUmlmZXJpbWVudG9PUFM6IGRhdGUsXHJcbiAgICAgICAgICBEYXRhUmlmZXJpbWVudG9TRFI6IGRhdGUsXHJcbiAgICAgICAgICBDb2RpY2VGb3JuaXR1cmFPbGQ6ICcnLFxyXG4gICAgICAgICAgQ29kaWNlSVNUQVQ6IHBhcmFtcy5jb2RpY2VJc3RhdCB8fCAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9KSxcclxuICAgIH1cclxuICApO1xyXG5cclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgIHRocm93IG5ldyBTZXJ2aWNlVW5oYW5kbGVkUmVzcG9uc2VFcnJvcihcclxuICAgICAgcmVzcG9uc2Uuc3RhdHVzVGV4dCxcclxuICAgICAgbG9nSGFzaCxcclxuICAgICAgcmVzcG9uc2VcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICBpZiAoZGF0YS5zdGF0dXMgIT09ICdTdWNjZXNzJykge1xyXG4gICAgdGhyb3cgbmV3IFNlcnZpY2VVbmhhbmRsZWRSZXNwb25zZUVycm9yKFxyXG4gICAgICByZXNwb25zZS5zdGF0dXNUZXh0LFxyXG4gICAgICBsb2dIYXNoLFxyXG4gICAgICByZXNwb25zZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvc3RpUGxlbml0dWRlID0gZGF0YS5yZXNwb25zZS5Cb2R5LlByZXp6aU9QUyBhcyBudW1iZXI7XHJcbiAgY29uc3QgY29zdGlEaXN0cmlidXRvcmUgPSBkYXRhLnJlc3BvbnNlLkJvZHkuUHJlenppU0RSIGFzIG51bWJlcjtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNvc3RpUGxlbml0dWRlLFxyXG4gICAgY29zdGlEaXN0cmlidXRvcmUsXHJcbiAgICBjb3N0aVRvdGFsaTogY29zdGlQbGVuaXR1ZGUgKyBjb3N0aURpc3RyaWJ1dG9yZSxcclxuICB9O1xyXG59XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hcGkvd2Vib3JkZXIvY29zdGlBdHRpdmF6aW9uZS50cyJ9