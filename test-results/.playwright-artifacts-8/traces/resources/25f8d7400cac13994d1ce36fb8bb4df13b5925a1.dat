globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { applicationMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { offerIdAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { restoreTestBusinessModeFromUrl, restoreTestResidModeFromUrl } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { ENABLE_CHANGE_OFFER, ENABLE_NEW_ACTIVATION, ENABLE_SWITCH_IN, ENABLE_SWITCH_IN_TRANSFER, ENABLE_TRANSFER } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/flags.ts";
export const operativeModeEnabled$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\utils\\operativeModeEnabled$.ts/operativeModeEnabled$", atom((get) => {
  const wp = get(workingProductAtom);
  if (wp == null) return true;
  if (wp.broadband) {
    return true;
  }
  if (restoreTestBusinessModeFromUrl()) {
    return true;
  }
  const abtFlag = restoreTestResidModeFromUrl();
  if (wp.commodity) {
    switch (wp.operativeMode) {
      case OperativeMode.SWITCH_IN: {
        return applicationMode || ENABLE_SWITCH_IN || abtFlag || false;
      }
      case OperativeMode.SWITCH_IN_TRANSFER:
        return applicationMode || ENABLE_SWITCH_IN_TRANSFER || abtFlag;
      case OperativeMode.TRANSFER:
        return ENABLE_TRANSFER || abtFlag;
      case OperativeMode.NEW_ACTIVATION:
        return ENABLE_NEW_ACTIVATION;
      case OperativeMode.CHANGE_OFFER:
        return ENABLE_CHANGE_OFFER;
    }
  }
  const offerCode = get(offerIdAtom).code;
  return !!offerCode;
}));
operativeModeEnabled$.debugLabel = "operativeModeEnabled$";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLHVCQUF1QjtBQUNoQyxTQUFTQyxZQUFZO0FBQ3JCLFNBQVNDLG1CQUFtQjtBQUM1QixTQUNFQyxnQ0FDQUMsbUNBQ0s7QUFDUCxTQUFTQywwQkFBMEI7QUFDbkMsU0FBU0MscUJBQXFCO0FBQzlCLFNBQ0VDLHFCQUNBQyx1QkFDQUMsa0JBQ0FDLDJCQUNBQyx1QkFDSztBQUVQLGFBQUFDLHdCQUFBQyxXQUFBQyxlQUFBQyxJQUFBLHFJQUFxQ2QsS0FBZWMsU0FBUTtBQUMxRCxRQUFNQyxLQUFLRCxJQUFJVixrQkFBa0I7QUFDakMsTUFBSVcsTUFBTSxLQUFNLFFBQU87QUFFdkIsTUFBSUEsR0FBR0MsV0FBVztBQUNoQixXQUFPO0FBQUEsRUFDVDtBQUNBLE1BQUlkLCtCQUErQixHQUFHO0FBQ3BDLFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTWUsVUFBVWQsNEJBQTRCO0FBRTVDLE1BQUlZLEdBQUdHLFdBQVc7QUFDaEIsWUFBUUgsR0FBR0ksZUFBYTtBQUFBLE1BQ3RCLEtBQUtkLGNBQWNlLFdBQVc7QUFDNUIsZUFBT3JCLG1CQUFtQlMsb0JBQW9CUyxXQUFXO0FBQUEsTUFDM0Q7QUFBQSxNQUNBLEtBQUtaLGNBQWNnQjtBQUNqQixlQUFPdEIsbUJBQW1CVSw2QkFBNkJRO0FBQUFBLE1BQ3pELEtBQUtaLGNBQWNpQjtBQUNqQixlQUFPWixtQkFBbUJPO0FBQUFBLE1BQzVCLEtBQUtaLGNBQWNrQjtBQUNqQixlQUFPaEI7QUFBQUEsTUFDVCxLQUFLRixjQUFjbUI7QUFDakIsZUFBT2xCO0FBQUFBLElBQ1g7QUFBQSxFQUNGO0FBSUEsUUFBTW1CLFlBQVlYLElBQUliLFdBQVcsRUFBRXlCO0FBQ25DLFNBQU8sQ0FBQyxDQUFDRDtBQUVYLENBQUMsQ0FBQztBQUFDZCxzQkFBQWdCLGFBQUEiLCJuYW1lcyI6WyJhcHBsaWNhdGlvbk1vZGUiLCJhdG9tIiwib2ZmZXJJZEF0b20iLCJyZXN0b3JlVGVzdEJ1c2luZXNzTW9kZUZyb21VcmwiLCJyZXN0b3JlVGVzdFJlc2lkTW9kZUZyb21VcmwiLCJ3b3JraW5nUHJvZHVjdEF0b20iLCJPcGVyYXRpdmVNb2RlIiwiRU5BQkxFX0NIQU5HRV9PRkZFUiIsIkVOQUJMRV9ORVdfQUNUSVZBVElPTiIsIkVOQUJMRV9TV0lUQ0hfSU4iLCJFTkFCTEVfU1dJVENIX0lOX1RSQU5TRkVSIiwiRU5BQkxFX1RSQU5TRkVSIiwib3BlcmF0aXZlTW9kZUVuYWJsZWQkIiwiZ2xvYmFsVGhpcyIsImpvdGFpQXRvbUNhY2hlIiwiZ2V0Iiwid3AiLCJicm9hZGJhbmQiLCJhYnRGbGFnIiwiY29tbW9kaXR5Iiwib3BlcmF0aXZlTW9kZSIsIlNXSVRDSF9JTiIsIlNXSVRDSF9JTl9UUkFOU0ZFUiIsIlRSQU5TRkVSIiwiTkVXX0FDVElWQVRJT04iLCJDSEFOR0VfT0ZGRVIiLCJvZmZlckNvZGUiLCJjb2RlIiwiZGVidWdMYWJlbCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJvcGVyYXRpdmVNb2RlRW5hYmxlZCQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwbGljYXRpb25Nb2RlIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHsgb2ZmZXJJZEF0b20gfSBmcm9tICcuLi90cm91Ymxlc2hvb3RpbmcvYXRvbXMnO1xyXG5pbXBvcnQge1xyXG4gIHJlc3RvcmVUZXN0QnVzaW5lc3NNb2RlRnJvbVVybCxcclxuICByZXN0b3JlVGVzdFJlc2lkTW9kZUZyb21VcmwsXHJcbn0gZnJvbSAnLi4vdHJvdWJsZXNob290aW5nL3N0YXRlLXVybCc7XHJcbmltcG9ydCB7IHdvcmtpbmdQcm9kdWN0QXRvbSB9IGZyb20gJy4uL3Ryb3VibGVzaG9vdGluZy90cm91Ymxlc2hvb3RpbmcnO1xyXG5pbXBvcnQgeyBPcGVyYXRpdmVNb2RlIH0gZnJvbSAnLi4vdHJvdWJsZXNob290aW5nL3R5cGVzJztcclxuaW1wb3J0IHtcclxuICBFTkFCTEVfQ0hBTkdFX09GRkVSLFxyXG4gIEVOQUJMRV9ORVdfQUNUSVZBVElPTixcclxuICBFTkFCTEVfU1dJVENIX0lOLFxyXG4gIEVOQUJMRV9TV0lUQ0hfSU5fVFJBTlNGRVIsXHJcbiAgRU5BQkxFX1RSQU5TRkVSLFxyXG59IGZyb20gJy4vZmxhZ3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9wZXJhdGl2ZU1vZGVFbmFibGVkJCA9IGF0b208Ym9vbGVhbj4oKGdldCkgPT4ge1xyXG4gIGNvbnN0IHdwID0gZ2V0KHdvcmtpbmdQcm9kdWN0QXRvbSk7XHJcbiAgaWYgKHdwID09IG51bGwpIHJldHVybiB0cnVlO1xyXG5cclxuICBpZiAod3AuYnJvYWRiYW5kKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgaWYgKHJlc3RvcmVUZXN0QnVzaW5lc3NNb2RlRnJvbVVybCgpKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGFidEZsYWcgPSByZXN0b3JlVGVzdFJlc2lkTW9kZUZyb21VcmwoKTtcclxuXHJcbiAgaWYgKHdwLmNvbW1vZGl0eSkge1xyXG4gICAgc3dpdGNoICh3cC5vcGVyYXRpdmVNb2RlKSB7XHJcbiAgICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU46IHtcclxuICAgICAgICByZXR1cm4gYXBwbGljYXRpb25Nb2RlIHx8IEVOQUJMRV9TV0lUQ0hfSU4gfHwgYWJ0RmxhZyB8fCBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuU1dJVENIX0lOX1RSQU5TRkVSOlxyXG4gICAgICAgIHJldHVybiBhcHBsaWNhdGlvbk1vZGUgfHwgRU5BQkxFX1NXSVRDSF9JTl9UUkFOU0ZFUiB8fCBhYnRGbGFnO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuVFJBTlNGRVI6XHJcbiAgICAgICAgcmV0dXJuIEVOQUJMRV9UUkFOU0ZFUiB8fCBhYnRGbGFnO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuTkVXX0FDVElWQVRJT046XHJcbiAgICAgICAgcmV0dXJuIEVOQUJMRV9ORVdfQUNUSVZBVElPTjtcclxuICAgICAgY2FzZSBPcGVyYXRpdmVNb2RlLkNIQU5HRV9PRkZFUjpcclxuICAgICAgICByZXR1cm4gRU5BQkxFX0NIQU5HRV9PRkZFUjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEluIHJlYWx0w6AgcXVlc3RvIMOoIHN0YXRvIG1lc3NvIHBlcmNow6kgYWx0cmltZW50aSBub24gZnVuemlvbmEgcGnDuSBudWxsYSxcclxuICAvLyBwcm9iYWJpbG1lbnRlIGEgY2F1c2EgZGkgcXVhbGNoZSBkaXBlbmRlbnphIGNpcmNvbGFyZSBjaGUgdW4gZ2lvcm5vIHNpc3RlbWVyZW1vLlxyXG4gIGNvbnN0IG9mZmVyQ29kZSA9IGdldChvZmZlcklkQXRvbSkuY29kZTtcclxuICByZXR1cm4gISFvZmZlckNvZGU7XHJcbiAgLy8gcmV0dXJuIHRydWU7XHJcbn0pO1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvdXRpbHMvb3BlcmF0aXZlTW9kZUVuYWJsZWQkLnRzIn0=