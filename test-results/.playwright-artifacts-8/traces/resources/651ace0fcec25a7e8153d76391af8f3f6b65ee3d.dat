globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { gasAtom, powerAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { currentSalesProcess } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/sales-process-atoms.ts";
import { BaseBulkOrderContract } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/BaseBulkOrderContract.ts";
import { bulkOrderBroadband$, bulkOrderCustomer$, bulkOrderImmediateEffect$, bulkOrderOfferInfo$, bulkOrderOptions$, bulkOrderPayment$, bulkOrderProduct$, bulkOrderSupply$, bulkOrderTerms$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/index.ts";
import { bulkOrderAppointment$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/appointment.ts";
import { bulkOrderCoupon$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/coupon.ts";
import { bulkOrderProperty$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/property.ts";
import { urlLead } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/urlLead.ts";
import { bulkOrderVas$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/contract/helpers/vas.ts";
export class CommodityContract extends BaseBulkOrderContract {
  constructor() {
    super(...arguments);
    this.baseLead = atom(async (get) => {
      const product = await get(bulkOrderProduct$);
      const {
        billType,
        domiciliation,
        hoursBundle
      } = await get(bulkOrderOptions$);
      const info = await get(bulkOrderOfferInfo$);
      const {
        cpqGas,
        cpqPower,
        options,
        productTitle
      } = info;
      const power = get(powerAtom);
      const gas = get(gasAtom);
      const immediateEffect = await get(bulkOrderImmediateEffect$);
      const {
        segment,
        consentPhoneContact,
        userType,
        personalData,
        consentsData,
        legalRepresentativeData
      } = await get(bulkOrderCustomer$);
      const {
        broadband,
        fornitureData
      } = await get(bulkOrderBroadband$);
      const {
        campiVasContratto
      } = await get(bulkOrderVas$);
      const couponData = await get(bulkOrderCoupon$);
      const lead = {
        /* Offer data */
        ...product,
        urlLead,
        /* Offer info */
        cpqGas: gas ? cpqGas : void 0,
        cpqPower: power ? cpqPower : void 0,
        productTitle,
        /* Offer options */
        billType,
        domiciliation,
        options: {
          ...options,
          hoursBundle
        },
        campiVasContratto,
        ...immediateEffect,
        consentPhoneContact,
        userType,
        plicoCode: await get(this.plicoCode),
        // TODO bulkOrderSupply$ should return null if no fields are set
        fornitureData: await get(bulkOrderSupply$) || fornitureData,
        paymentData: await get(bulkOrderPayment$),
        segment,
        personalData,
        legalRepresentativeData,
        salesProcess: await get(currentSalesProcess),
        flussoWebOrder: this.flussoWebOrder,
        consentsData: {
          ...consentsData,
          ...get(bulkOrderTerms$)
        },
        immobileData: get(bulkOrderProperty$),
        broadband,
        appointmentData: await get(bulkOrderAppointment$),
        ...couponData
      };
      return lead;
    });
  }
}

//# sourceMappingURL=data:application/json;base64,