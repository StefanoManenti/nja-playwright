globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { formatDate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { ImmediateEffect } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/types.ts";
import { workingProductAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { immediateEffectAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/effective-dates/index.ts";
export const bulkOrderAppointment$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\appointment.ts/bulkOrderAppointment$", atom(async (get) => {
  const wp = get(workingProductAtom);
  const hasAppointmentData = wp?.operativeMode === OperativeMode.NEW_ACTIVATION;
  if (!hasAppointmentData) {
    return;
  }
  const hasGas = !!wp.commodity?.gas;
  const hasPower = !!wp.commodity?.power;
  return {
    gas: hasGas ? await get(bulkOrderAppointmentGas$) : void 0,
    power: hasPower ? await get(bulkOrderAppointmentPower$) : void 0
  };
}, async (get, set, lead) => {
}));
bulkOrderAppointment$.debugLabel = "bulkOrderAppointment$";
const bulkOrderAppointmentGas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\appointment.ts/bulkOrderAppointmentGas$", atom(async (get) => {
  const activations = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts");
  return {
    // TODO input dell'utente o quella calcolata a seconda dei casi
    activationDate: formatDate(get(activations.dataAttivazione$)),
    quickActivation: await get(immediateEffectAtom) === ImmediateEffect.PRIORITY,
    timeband: get(activations.fasciaOrariaAppuntamento$),
    owner: get(activations.intestatarioPresenteAppuntamento$),
    substituteName: get(activations.substituteName$),
    substituteSurname: get(activations.substituteSurname$),
    substitutePhoneNumber: get(activations.substitutePhoneNumber$),
    accessibility: get(activations.citofonoAccessibile$),
    referentName: get(activations.nominativoSulCitofono$),
    meterAccessibility: get(activations.contatoreAccessibile$),
    meterLocation: get(activations.posizioneContatore$),
    note: get(activations.noteContatore$)
  };
}, async (get, set, lead) => {
  if (!lead) return;
  const activations = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts");
  if (lead.activationDate) {
    set(activations.dataAttivazione$, new Date(lead.activationDate));
  }
  set(immediateEffectAtom, lead.quickActivation ? ImmediateEffect.PRIORITY : ImmediateEffect.STANDARD);
  set(activations.fasciaOrariaAppuntamento$, lead.timeband ?? void 0);
  set(activations.intestatarioPresenteAppuntamento$, lead.owner);
  set(activations.substituteName$, lead.substituteName);
  set(activations.substituteSurname$, lead.substituteSurname);
  set(activations.substitutePhoneNumber$, lead.substitutePhoneNumber);
  set(activations.citofonoAccessibile$, lead.accessibility);
  set(activations.nominativoSulCitofono$, lead.referentName);
  set(activations.contatoreAccessibile$, lead.meterAccessibility);
  set(activations.posizioneContatore$, lead.meterLocation);
  set(activations.noteContatore$, lead.note);
}));
bulkOrderAppointmentGas$.debugLabel = "bulkOrderAppointmentGas$";
const bulkOrderAppointmentPower$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\contract\\helpers\\appointment.ts/bulkOrderAppointmentPower$", atom(async (get) => {
  const activations = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts");
  return {
    activationDate: formatDate(get(activations.dataAttivazione$)),
    quickActivation: await get(immediateEffectAtom) === ImmediateEffect.PRIORITY
  };
}, async (get, set, lead) => {
  if (!lead) return;
  const activations = await import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts");
  if (lead.activationDate) {
    set(activations.dataAttivazione$, new Date(lead.activationDate));
  }
  set(immediateEffectAtom, lead.quickActivation ? ImmediateEffect.PRIORITY : ImmediateEffect.STANDARD);
}));
bulkOrderAppointmentPower$.debugLabel = "bulkOrderAppointmentPower$";

//# sourceMappingURL=data:application/json;base64,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QixxQkFBcUJ4QixLQUFLdUIsYUFBYTtBQUN2RHhCLE1BQUlHLFlBQVl3QixnQkFBZ0IxQixLQUFLeUIsSUFBSTtBQUMzQyxDQUNGLENBQUM7QUFBQTdCLHlCQUFBSyxhQUFBO0FBQUEsTUFBQUgsNkJBQUFkLFdBQUFDLGVBQUFDLElBQUEsbUpBSUdSLEtBQ0YsT0FBT1EsUUFBUTtBQUNiLFFBQU1nQixjQUFjLE1BQU0sT0FBTyxtQkFBbUI7QUFFcEQsU0FBTztBQUFBLElBQ0xDLGdCQUFnQjFCLFdBQVdTLElBQUlnQixZQUFZRSxnQkFBZ0IsQ0FBQztBQUFBLElBQzVEQyxpQkFDRyxNQUFNbkIsSUFBSUosbUJBQW1CLE1BQU9ILGdCQUFnQjJCO0FBQUFBLEVBQ3pEO0FBQ0YsR0FDQSxPQUFPcEIsS0FBS2EsS0FBS0MsU0FBUztBQUN4QixNQUFJLENBQUNBLEtBQU07QUFDWCxRQUFNRSxjQUFjLE1BQU0sT0FBTyxtQkFBbUI7QUFFcEQsTUFBSUYsS0FBS0csZ0JBQWdCO0FBQ3ZCSixRQUFJRyxZQUFZRSxrQkFBa0IsSUFBSXVCLEtBQUszQixLQUFLRyxjQUFjLENBQUM7QUFBQSxFQUNqRTtBQUVBSixNQUNFakIscUJBQ0FrQixLQUFLSyxrQkFBa0IxQixnQkFBZ0IyQixXQUFXM0IsZ0JBQWdCaUQsUUFDcEU7QUFDRixDQUNGLENBQUM7QUFBQTlCLDJCQUFBRyxhQUFBIiwibmFtZXMiOlsiZm9ybWF0RGF0ZSIsImF0b20iLCJJbW1lZGlhdGVFZmZlY3QiLCJ3b3JraW5nUHJvZHVjdEF0b20iLCJPcGVyYXRpdmVNb2RlIiwiaW1tZWRpYXRlRWZmZWN0QXRvbSIsImJ1bGtPcmRlckFwcG9pbnRtZW50JCIsImdsb2JhbFRoaXMiLCJqb3RhaUF0b21DYWNoZSIsImdldCIsIndwIiwiaGFzQXBwb2ludG1lbnREYXRhIiwib3BlcmF0aXZlTW9kZSIsIk5FV19BQ1RJVkFUSU9OIiwiaGFzR2FzIiwiY29tbW9kaXR5IiwiZ2FzIiwiaGFzUG93ZXIiLCJwb3dlciIsImJ1bGtPcmRlckFwcG9pbnRtZW50R2FzJCIsInVuZGVmaW5lZCIsImJ1bGtPcmRlckFwcG9pbnRtZW50UG93ZXIkIiwic2V0IiwibGVhZCIsImRlYnVnTGFiZWwiLCJhY3RpdmF0aW9ucyIsImFjdGl2YXRpb25EYXRlIiwiZGF0YUF0dGl2YXppb25lJCIsInF1aWNrQWN0aXZhdGlvbiIsIlBSSU9SSVRZIiwidGltZWJhbmQiLCJmYXNjaWFPcmFyaWFBcHB1bnRhbWVudG8kIiwib3duZXIiLCJpbnRlc3RhdGFyaW9QcmVzZW50ZUFwcHVudGFtZW50byQiLCJzdWJzdGl0dXRlTmFtZSIsInN1YnN0aXR1dGVOYW1lJCIsInN1YnN0aXR1dGVTdXJuYW1lIiwic3Vic3RpdHV0ZVN1cm5hbWUkIiwic3Vic3RpdHV0ZVBob25lTnVtYmVyIiwic3Vic3RpdHV0ZVBob25lTnVtYmVyJCIsImFjY2Vzc2liaWxpdHkiLCJjaXRvZm9ub0FjY2Vzc2liaWxlJCIsInJlZmVyZW50TmFtZSIsIm5vbWluYXRpdm9TdWxDaXRvZm9ubyQiLCJtZXRlckFjY2Vzc2liaWxpdHkiLCJjb250YXRvcmVBY2Nlc3NpYmlsZSQiLCJtZXRlckxvY2F0aW9uIiwicG9zaXppb25lQ29udGF0b3JlJCIsIm5vdGUiLCJub3RlQ29udGF0b3JlJCIsIkRhdGUiLCJTVEFOREFSRCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJhcHBvaW50bWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnQG5hai13by91dGlsJztcclxuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ2pvdGFpJztcclxuaW1wb3J0IHR5cGUgeyBBcHBvaW50bWVudERhdGEgfSBmcm9tICcuLi8uLi8uLi9hcGkvbGVhZC9fdHlwZXMnO1xyXG5pbXBvcnQgeyBJbW1lZGlhdGVFZmZlY3QgfSBmcm9tICcuLi8uLi8uLi9lZmZlY3RpdmUtZGF0ZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyB3b3JraW5nUHJvZHVjdEF0b20gfSBmcm9tICcuLi8uLi8uLi90cm91Ymxlc2hvb3RpbmcvdHJvdWJsZXNob290aW5nJztcclxuaW1wb3J0IHsgT3BlcmF0aXZlTW9kZSB9IGZyb20gJy4uLy4uLy4uL3Ryb3VibGVzaG9vdGluZy90eXBlcyc7XHJcbmltcG9ydCB7IEFzeW5jQnVsa09yZGVySGVscGVyQXRvbSB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBpbW1lZGlhdGVFZmZlY3RBdG9tIH0gZnJvbSAnLi4vLi4vLi4vZWZmZWN0aXZlLWRhdGVzL2luZGV4JztcclxuXHJcbmV4cG9ydCBjb25zdCBidWxrT3JkZXJBcHBvaW50bWVudCQ6IEFzeW5jQnVsa09yZGVySGVscGVyQXRvbTxcclxuICBBcHBvaW50bWVudERhdGEgfCB1bmRlZmluZWRcclxuPiA9IGF0b20oXHJcbiAgYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3Qgd3AgPSBnZXQod29ya2luZ1Byb2R1Y3RBdG9tKTtcclxuICAgIGNvbnN0IGhhc0FwcG9pbnRtZW50RGF0YSA9XHJcbiAgICAgIHdwPy5vcGVyYXRpdmVNb2RlID09PSBPcGVyYXRpdmVNb2RlLk5FV19BQ1RJVkFUSU9OO1xyXG4gICAgaWYgKCFoYXNBcHBvaW50bWVudERhdGEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhc0dhcyA9ICEhd3AuY29tbW9kaXR5Py5nYXM7XHJcbiAgICBjb25zdCBoYXNQb3dlciA9ICEhd3AuY29tbW9kaXR5Py5wb3dlcjtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnYXM6IGhhc0dhcyA/IGF3YWl0IGdldChidWxrT3JkZXJBcHBvaW50bWVudEdhcyQpIDogdW5kZWZpbmVkLFxyXG4gICAgICBwb3dlcjogaGFzUG93ZXIgPyBhd2FpdCBnZXQoYnVsa09yZGVyQXBwb2ludG1lbnRQb3dlciQpIDogdW5kZWZpbmVkLFxyXG4gICAgfTtcclxuICB9LFxyXG4gIGFzeW5jIChnZXQsIHNldCwgbGVhZCkgPT4ge31cclxuKTtcclxuXHJcbmNvbnN0IGJ1bGtPcmRlckFwcG9pbnRtZW50R2FzJDogQXN5bmNCdWxrT3JkZXJIZWxwZXJBdG9tPFxyXG4gIEFwcG9pbnRtZW50RGF0YVsnZ2FzJ11cclxuPiA9IGF0b20oXHJcbiAgYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3QgYWN0aXZhdGlvbnMgPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2FjdGl2YXRpb25zJyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLy8gVE9ETyBpbnB1dCBkZWxsJ3V0ZW50ZSBvIHF1ZWxsYSBjYWxjb2xhdGEgYSBzZWNvbmRhIGRlaSBjYXNpXHJcbiAgICAgIGFjdGl2YXRpb25EYXRlOiBmb3JtYXREYXRlKGdldChhY3RpdmF0aW9ucy5kYXRhQXR0aXZhemlvbmUkKSksXHJcbiAgICAgIHF1aWNrQWN0aXZhdGlvbjpcclxuICAgICAgICAoYXdhaXQgZ2V0KGltbWVkaWF0ZUVmZmVjdEF0b20pKSA9PT0gSW1tZWRpYXRlRWZmZWN0LlBSSU9SSVRZLFxyXG4gICAgICB0aW1lYmFuZDogZ2V0KGFjdGl2YXRpb25zLmZhc2NpYU9yYXJpYUFwcHVudGFtZW50byQpLFxyXG4gICAgICBvd25lcjogZ2V0KGFjdGl2YXRpb25zLmludGVzdGF0YXJpb1ByZXNlbnRlQXBwdW50YW1lbnRvJCksXHJcbiAgICAgIHN1YnN0aXR1dGVOYW1lOiBnZXQoYWN0aXZhdGlvbnMuc3Vic3RpdHV0ZU5hbWUkKSxcclxuICAgICAgc3Vic3RpdHV0ZVN1cm5hbWU6IGdldChhY3RpdmF0aW9ucy5zdWJzdGl0dXRlU3VybmFtZSQpLFxyXG4gICAgICBzdWJzdGl0dXRlUGhvbmVOdW1iZXI6IGdldChhY3RpdmF0aW9ucy5zdWJzdGl0dXRlUGhvbmVOdW1iZXIkKSxcclxuICAgICAgYWNjZXNzaWJpbGl0eTogZ2V0KGFjdGl2YXRpb25zLmNpdG9mb25vQWNjZXNzaWJpbGUkKSxcclxuICAgICAgcmVmZXJlbnROYW1lOiBnZXQoYWN0aXZhdGlvbnMubm9taW5hdGl2b1N1bENpdG9mb25vJCksXHJcbiAgICAgIG1ldGVyQWNjZXNzaWJpbGl0eTogZ2V0KGFjdGl2YXRpb25zLmNvbnRhdG9yZUFjY2Vzc2liaWxlJCksXHJcbiAgICAgIG1ldGVyTG9jYXRpb246IGdldChhY3RpdmF0aW9ucy5wb3NpemlvbmVDb250YXRvcmUkKSxcclxuICAgICAgbm90ZTogZ2V0KGFjdGl2YXRpb25zLm5vdGVDb250YXRvcmUkKSxcclxuICAgIH07XHJcbiAgfSxcclxuICBhc3luYyAoZ2V0LCBzZXQsIGxlYWQpID0+IHtcclxuICAgIGlmICghbGVhZCkgcmV0dXJuO1xyXG4gICAgY29uc3QgYWN0aXZhdGlvbnMgPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2FjdGl2YXRpb25zJyk7XHJcblxyXG4gICAgaWYgKGxlYWQuYWN0aXZhdGlvbkRhdGUpIHtcclxuICAgICAgc2V0KGFjdGl2YXRpb25zLmRhdGFBdHRpdmF6aW9uZSQsIG5ldyBEYXRlKGxlYWQuYWN0aXZhdGlvbkRhdGUpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoXHJcbiAgICAgIGltbWVkaWF0ZUVmZmVjdEF0b20sXHJcbiAgICAgIGxlYWQucXVpY2tBY3RpdmF0aW9uID8gSW1tZWRpYXRlRWZmZWN0LlBSSU9SSVRZIDogSW1tZWRpYXRlRWZmZWN0LlNUQU5EQVJEXHJcbiAgICApO1xyXG4gICAgc2V0KGFjdGl2YXRpb25zLmZhc2NpYU9yYXJpYUFwcHVudGFtZW50byQsIGxlYWQudGltZWJhbmQgPz8gdW5kZWZpbmVkKTtcclxuICAgIHNldChhY3RpdmF0aW9ucy5pbnRlc3RhdGFyaW9QcmVzZW50ZUFwcHVudGFtZW50byQsIGxlYWQub3duZXIpO1xyXG4gICAgc2V0KGFjdGl2YXRpb25zLnN1YnN0aXR1dGVOYW1lJCwgbGVhZC5zdWJzdGl0dXRlTmFtZSk7XHJcbiAgICBzZXQoYWN0aXZhdGlvbnMuc3Vic3RpdHV0ZVN1cm5hbWUkLCBsZWFkLnN1YnN0aXR1dGVTdXJuYW1lKTtcclxuICAgIHNldChhY3RpdmF0aW9ucy5zdWJzdGl0dXRlUGhvbmVOdW1iZXIkLCBsZWFkLnN1YnN0aXR1dGVQaG9uZU51bWJlcik7XHJcbiAgICBzZXQoYWN0aXZhdGlvbnMuY2l0b2Zvbm9BY2Nlc3NpYmlsZSQsIGxlYWQuYWNjZXNzaWJpbGl0eSk7XHJcbiAgICBzZXQoYWN0aXZhdGlvbnMubm9taW5hdGl2b1N1bENpdG9mb25vJCwgbGVhZC5yZWZlcmVudE5hbWUpO1xyXG4gICAgc2V0KGFjdGl2YXRpb25zLmNvbnRhdG9yZUFjY2Vzc2liaWxlJCwgbGVhZC5tZXRlckFjY2Vzc2liaWxpdHkpO1xyXG4gICAgc2V0KGFjdGl2YXRpb25zLnBvc2l6aW9uZUNvbnRhdG9yZSQsIGxlYWQubWV0ZXJMb2NhdGlvbik7XHJcbiAgICBzZXQoYWN0aXZhdGlvbnMubm90ZUNvbnRhdG9yZSQsIGxlYWQubm90ZSk7XHJcbiAgfVxyXG4pO1xyXG5cclxuY29uc3QgYnVsa09yZGVyQXBwb2ludG1lbnRQb3dlciQ6IEFzeW5jQnVsa09yZGVySGVscGVyQXRvbTxcclxuICBBcHBvaW50bWVudERhdGFbJ3Bvd2VyJ11cclxuPiA9IGF0b20oXHJcbiAgYXN5bmMgKGdldCkgPT4ge1xyXG4gICAgY29uc3QgYWN0aXZhdGlvbnMgPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2FjdGl2YXRpb25zJyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYWN0aXZhdGlvbkRhdGU6IGZvcm1hdERhdGUoZ2V0KGFjdGl2YXRpb25zLmRhdGFBdHRpdmF6aW9uZSQpKSxcclxuICAgICAgcXVpY2tBY3RpdmF0aW9uOlxyXG4gICAgICAgIChhd2FpdCBnZXQoaW1tZWRpYXRlRWZmZWN0QXRvbSkpID09PSBJbW1lZGlhdGVFZmZlY3QuUFJJT1JJVFksXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgYXN5bmMgKGdldCwgc2V0LCBsZWFkKSA9PiB7XHJcbiAgICBpZiAoIWxlYWQpIHJldHVybjtcclxuICAgIGNvbnN0IGFjdGl2YXRpb25zID0gYXdhaXQgaW1wb3J0KCcuLi8uLi9hY3RpdmF0aW9ucycpO1xyXG5cclxuICAgIGlmIChsZWFkLmFjdGl2YXRpb25EYXRlKSB7XHJcbiAgICAgIHNldChhY3RpdmF0aW9ucy5kYXRhQXR0aXZhemlvbmUkLCBuZXcgRGF0ZShsZWFkLmFjdGl2YXRpb25EYXRlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KFxyXG4gICAgICBpbW1lZGlhdGVFZmZlY3RBdG9tLFxyXG4gICAgICBsZWFkLnF1aWNrQWN0aXZhdGlvbiA/IEltbWVkaWF0ZUVmZmVjdC5QUklPUklUWSA6IEltbWVkaWF0ZUVmZmVjdC5TVEFOREFSRFxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy9jb250cmFjdC9oZWxwZXJzL2FwcG9pbnRtZW50LnRzIn0=