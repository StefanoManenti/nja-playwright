globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { Bill, OperativeMode, Payment, PowerRate } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
class QsMapper {
  constructor(value) {
    this.value = value;
  }
  get qs() {
    return this.toQs();
  }
  set qs(qs) {
    this.value = this.fromQs(qs);
  }
  [Symbol.toPrimitive]() {
    return this.value;
  }
}
export class CommodityMapper extends QsMapper {
  toQs() {
    if (this.value == null) {
      return "undefined";
    }
    return this.value.gas ? this.value.power ? "gaseluce" : "gas" : this.value.power ? "luce" : "undefined";
  }
  fromQs(qs) {
    switch (qs) {
      case "gaseluce":
        return {
          power: true,
          gas: true
        };
      case "luce":
        return {
          power: true,
          gas: false
        };
      case "gas":
        return {
          power: false,
          gas: true
        };
      default:
        return {
          power: false,
          gas: false
        };
    }
  }
}
export class PowerRateMapper extends QsMapper {
  toQs() {
    return this.value === PowerRate.BI_HOURLY ? "bioraria" : this.value === PowerRate.SINGLE ? "monoraria" : "undefined";
  }
  fromQs(qs) {
    switch (qs) {
      case "bioraria":
        return PowerRate.BI_HOURLY;
      case "monoraria":
        return PowerRate.SINGLE;
      default:
        return PowerRate.NOT_SELECTED;
    }
  }
}
export class OperativeModeMapper extends QsMapper {
  toQs() {
    return this.value;
  }
  fromQs(qs) {
    switch (qs) {
      case OperativeMode.SWITCH_IN:
      case OperativeMode.SWITCH_IN_TRANSFER:
      case OperativeMode.TRANSFER:
      case OperativeMode.NEW_ACTIVATION:
      case OperativeMode.CHANGE_OFFER:
      case OperativeMode.VIRTUAL_PANEL:
      case OperativeMode.BROADBAND:
        return qs;
      default:
        return OperativeMode.NOT_SELECTED;
    }
  }
}
export class PaymentMapper extends QsMapper {
  toQs() {
    return this.value === Payment.DOMICILIATION ? "true" : this.value === Payment.POSTAL ? "false" : "undefined";
  }
  fromQs(qs) {
    switch (qs) {
      case "true":
        return Payment.DOMICILIATION;
      case "false":
        return Payment.POSTAL;
      default:
        return Payment.NOT_SELECTED;
    }
  }
}
export class BillMapper extends QsMapper {
  toQs() {
    return this.value === Bill.DIGITAL ? "digitale" : this.value === Bill.PAPER ? "cartacea" : "undefined";
  }
  fromQs(qs) {
    switch (qs) {
      case "digitale":
        return Bill.DIGITAL;
      case "cartacea":
        return Bill.PAPER;
      default:
        return Bill.NOT_SELECTED;
    }
  }
}

//# sourceMappingURL=data:application/json;base64,