globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { wrapLoad } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/tracking/src/lib/utils.ts";
export default class TagCommander {
  constructor() {
    this.isLoad = false;
    this.pipeline = [];
  }
  /**
   * @param _gtm - Trust Commander deve avere la variabile window.dataLayer inizializzata a un array prima di
   *   funzionare correttamente. Passare come parametro una istanza di GTM assicura questo.
   */
  async load(_gtm) {
    if (window["tC"]) {
      throw Error("window.tC already exists");
    }
    await this.loadCss();
    await this.loadScript();
    this.isLoad = true;
    this.handleLoad();
  }
  loadCss() {
    return import("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/tracking/src/lib/TagCommander.styles.css");
  }
  loadScript() {
    const cacheBuster = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3 / 60 / 15);
    const s = document.createElement("script");
    s.type = "text/javascript";
    s.src = /*(PRODUCTION
      ? */
    "https://cdn.tagcommander.com/5023/tc_enigaseluce_20.js?" + /*: 'https://cdn.tagcommander.com/5023/uat/tc_enigaseluce_20.js?')*/
    cacheBuster;
    s.async = true;
    const promise = wrapLoad(s);
    document.head.appendChild(s);
    return promise;
  }
  pushEvent(event) {
    if (this.isLoad) {
      event();
    } else {
      this.pipeline.push(event);
    }
  }
  handleLoad() {
    this.pipeline.map((e) => e());
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLFNBQVNBLGdCQUFnQjtBQVF6QixxQkFBcUJDLGFBQWE7QUFBQSxFQUloQ0MsY0FBYztBQUhkLFNBQVFDLFNBQVM7QUFDakIsU0FBUUMsV0FBOEI7QUFBQSxFQUV2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNZixNQUFNQyxLQUFLQyxNQUFXO0FBQ3BCLFFBQUlDLE9BQU8sSUFBSSxHQUFHO0FBQ2hCLFlBQU1DLE1BQU0sMEJBQTBCO0FBQUEsSUFDeEM7QUFFQSxVQUFNLEtBQUtDLFFBQVE7QUFDbkIsVUFBTSxLQUFLQyxXQUFXO0FBQ3RCLFNBQUtQLFNBQVM7QUFDZCxTQUFLUSxXQUFXO0FBQUEsRUFDbEI7QUFBQSxFQUVRRixVQUFVO0FBQ2hCLFdBQU8sT0FBTywyQkFBMkI7QUFBQSxFQUMzQztBQUFBLEVBRVFDLGFBQWE7QUFDbkIsVUFBTUUsY0FBY0MsS0FBS0MsT0FBTSxvQkFBSUMsS0FBSyxHQUFFQyxRQUFRLElBQUksTUFBTyxLQUFLLEVBQUU7QUFDcEUsVUFBTUMsSUFBSUMsU0FBU0MsY0FBYyxRQUFRO0FBQ3pDRixNQUFFRyxPQUFPO0FBQ1RILE1BQUVJO0FBQUFBO0FBQUFBLElBRU87QUFBQSxJQUM4RFQ7QUFDdkVLLE1BQUVLLFFBQVE7QUFDVixVQUFNQyxVQUFVdkIsU0FBU2lCLENBQUM7QUFDMUJDLGFBQVNNLEtBQUtDLFlBQVlSLENBQUM7QUFDM0IsV0FBT007QUFBQUEsRUFDVDtBQUFBLEVBRUFHLFVBQVVDLE9BQVk7QUFDcEIsUUFBSSxLQUFLeEIsUUFBUTtBQUNmd0IsWUFBTTtBQUFBLElBQ1IsT0FBTztBQUNMLFdBQUt2QixTQUFTd0IsS0FBS0QsS0FBSztBQUFBLElBQzFCO0FBQUEsRUFDRjtBQUFBLEVBRVVoQixhQUFhO0FBQ3JCLFNBQUtQLFNBQVN5QixJQUFLQyxPQUFNQSxFQUFFLENBQUM7QUFBQSxFQUM5QjtBQUNGIiwibmFtZXMiOlsid3JhcExvYWQiLCJUYWdDb21tYW5kZXIiLCJjb25zdHJ1Y3RvciIsImlzTG9hZCIsInBpcGVsaW5lIiwibG9hZCIsIl9ndG0iLCJ3aW5kb3ciLCJFcnJvciIsImxvYWRDc3MiLCJsb2FkU2NyaXB0IiwiaGFuZGxlTG9hZCIsImNhY2hlQnVzdGVyIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsImdldFRpbWUiLCJzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInNyYyIsImFzeW5jIiwicHJvbWlzZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInB1c2hFdmVudCIsImV2ZW50IiwicHVzaCIsIm1hcCIsImUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVGFnQ29tbWFuZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHVE0gZnJvbSAnLi9HVE0nO1xyXG5pbXBvcnQgeyB3cmFwTG9hZCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgdEM6IGFueTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhZ0NvbW1hbmRlciB7XHJcbiAgcHJpdmF0ZSBpc0xvYWQgPSBmYWxzZTtcclxuICBwcml2YXRlIHBpcGVsaW5lOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBfZ3RtIC0gVHJ1c3QgQ29tbWFuZGVyIGRldmUgYXZlcmUgbGEgdmFyaWFiaWxlIHdpbmRvdy5kYXRhTGF5ZXIgaW5pemlhbGl6emF0YSBhIHVuIGFycmF5IHByaW1hIGRpXHJcbiAgICogICBmdW56aW9uYXJlIGNvcnJldHRhbWVudGUuIFBhc3NhcmUgY29tZSBwYXJhbWV0cm8gdW5hIGlzdGFuemEgZGkgR1RNIGFzc2ljdXJhIHF1ZXN0by5cclxuICAgKi9cclxuICBhc3luYyBsb2FkKF9ndG06IEdUTSkge1xyXG4gICAgaWYgKHdpbmRvd1sndEMnXSkge1xyXG4gICAgICB0aHJvdyBFcnJvcignd2luZG93LnRDIGFscmVhZHkgZXhpc3RzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgdGhpcy5sb2FkQ3NzKCk7XHJcbiAgICBhd2FpdCB0aGlzLmxvYWRTY3JpcHQoKTtcclxuICAgIHRoaXMuaXNMb2FkID0gdHJ1ZTtcclxuICAgIHRoaXMuaGFuZGxlTG9hZCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2FkQ3NzKCkge1xyXG4gICAgcmV0dXJuIGltcG9ydCgnLi9UYWdDb21tYW5kZXIuc3R5bGVzLmNzcycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2FkU2NyaXB0KCkge1xyXG4gICAgY29uc3QgY2FjaGVCdXN0ZXIgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCAvIDYwIC8gMTUpO1xyXG4gICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICBzLnNyYyA9XHJcbiAgICAgIC8qKFBST0RVQ1RJT05cclxuICAgICAgICA/ICovICdodHRwczovL2Nkbi50YWdjb21tYW5kZXIuY29tLzUwMjMvdGNfZW5pZ2FzZWx1Y2VfMjAuanM/JyArXHJcbiAgICAgIC8qOiAnaHR0cHM6Ly9jZG4udGFnY29tbWFuZGVyLmNvbS81MDIzL3VhdC90Y19lbmlnYXNlbHVjZV8yMC5qcz8nKSovIGNhY2hlQnVzdGVyO1xyXG4gICAgcy5hc3luYyA9IHRydWU7XHJcbiAgICBjb25zdCBwcm9taXNlID0gd3JhcExvYWQocyk7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpO1xyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfVxyXG5cclxuICBwdXNoRXZlbnQoZXZlbnQ6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuaXNMb2FkKSB7XHJcbiAgICAgIGV2ZW50KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBpcGVsaW5lLnB1c2goZXZlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGhhbmRsZUxvYWQoKSB7XHJcbiAgICB0aGlzLnBpcGVsaW5lLm1hcCgoZSkgPT4gZSgpKTtcclxuICB9XHJcbn1cclxuIl0sImZpbGUiOiJDOi9Vc2Vycy9haW50cm9uYS9EZXNrdG9wL0FwcC9yZWFjdC9uYWovbGlicy90cmFja2luZy9zcmMvbGliL1RhZ0NvbW1hbmRlci50cyJ9