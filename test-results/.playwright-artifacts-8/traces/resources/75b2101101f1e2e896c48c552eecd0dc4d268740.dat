globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
export function updateCustomerFromD365(set, customer, request, response) {
  set(customer.type, response.master);
  set(customer.customerCode, response.codiceCliente);
  set(customer.profile.givenName$, request.nome);
  set(customer.profile.familyName$, request.cognome);
  set(customer.profile.email$, response.email || request.email);
  set(customer.profile.emailCrypt$, response.emailCrypt ?? void 0);
  set(customer.profile.taxId$, request.codiceFiscale);
  set(customer.profile.vatNumber$, request.partitaIva);
  if (response.privacy) {
    set(customer.profile.privacy$, {
      promoPlenitude: isConcessa(response.privacy.privacyPromozionaleEni),
      marketResearch: isConcessa(response.privacy.privacyAnalisiRicercaMercato),
      promoThirdParties: isConcessa(response.privacy.privacyPromozionaleAltreImprese)
    });
  }
  set(customer.profile.vulnerable$, !!response.vulnerabile);
  set(customer.profile.hasActiveCommodities$, !!response.hasAtLeast1ActiveCommodities);
}
function isConcessa(x) {
  return x === "CONCESSA";
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVVPLGdCQUFTQSx1QkFDZEMsS0FDQUMsVUFDQUMsU0FDQUMsVUFDQTtBQUVBSCxNQUFJQyxTQUFTRyxNQUFNRCxTQUFTRSxNQUFNO0FBQ2xDTCxNQUFJQyxTQUFTSyxjQUFjSCxTQUFTSSxhQUFhO0FBQ2pEUCxNQUFJQyxTQUFTTyxRQUFRQyxZQUFZUCxRQUFRUSxJQUFJO0FBQzdDVixNQUFJQyxTQUFTTyxRQUFRRyxhQUFhVCxRQUFRVSxPQUFPO0FBQ2pEWixNQUFJQyxTQUFTTyxRQUFRSyxRQUFRVixTQUFTVyxTQUFTWixRQUFRWSxLQUFLO0FBQzVEZCxNQUFJQyxTQUFTTyxRQUFRTyxhQUFhWixTQUFTYSxjQUFjQyxNQUFTO0FBQ2xFakIsTUFBSUMsU0FBU08sUUFBUVUsUUFBUWhCLFFBQVFpQixhQUFhO0FBQ2xEbkIsTUFBSUMsU0FBU08sUUFBUVksWUFBWWxCLFFBQVFtQixVQUFVO0FBQ25ELE1BQUlsQixTQUFTbUIsU0FBUztBQUNwQnRCLFFBQUlDLFNBQVNPLFFBQVFlLFVBQVU7QUFBQSxNQUM3QkMsZ0JBQWdCQyxXQUFXdEIsU0FBU21CLFFBQVFJLHNCQUFzQjtBQUFBLE1BQ2xFQyxnQkFBZ0JGLFdBQVd0QixTQUFTbUIsUUFBUU0sNEJBQTRCO0FBQUEsTUFDeEVDLG1CQUFtQkosV0FDakJ0QixTQUFTbUIsUUFBUVEsK0JBQ25CO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUNBOUIsTUFBSUMsU0FBU08sUUFBUXVCLGFBQWEsQ0FBQyxDQUFDNUIsU0FBUzZCLFdBQVc7QUFDeERoQyxNQUNFQyxTQUFTTyxRQUFReUIsdUJBQ2pCLENBQUMsQ0FBQzlCLFNBQVMrQiw0QkFDYjtBQUNGO0FBRUEsU0FBU1QsV0FBV1UsR0FBZ0M7QUFDbEQsU0FBT0EsTUFBTTtBQUNmIiwibmFtZXMiOlsidXBkYXRlQ3VzdG9tZXJGcm9tRDM2NSIsInNldCIsImN1c3RvbWVyIiwicmVxdWVzdCIsInJlc3BvbnNlIiwidHlwZSIsIm1hc3RlciIsImN1c3RvbWVyQ29kZSIsImNvZGljZUNsaWVudGUiLCJwcm9maWxlIiwiZ2l2ZW5OYW1lJCIsIm5vbWUiLCJmYW1pbHlOYW1lJCIsImNvZ25vbWUiLCJlbWFpbCQiLCJlbWFpbCIsImVtYWlsQ3J5cHQkIiwiZW1haWxDcnlwdCIsInVuZGVmaW5lZCIsInRheElkJCIsImNvZGljZUZpc2NhbGUiLCJ2YXROdW1iZXIkIiwicGFydGl0YUl2YSIsInByaXZhY3kiLCJwcml2YWN5JCIsInByb21vUGxlbml0dWRlIiwiaXNDb25jZXNzYSIsInByaXZhY3lQcm9tb3ppb25hbGVFbmkiLCJtYXJrZXRSZXNlYXJjaCIsInByaXZhY3lBbmFsaXNpUmljZXJjYU1lcmNhdG8iLCJwcm9tb1RoaXJkUGFydGllcyIsInByaXZhY3lQcm9tb3ppb25hbGVBbHRyZUltcHJlc2UiLCJ2dWxuZXJhYmxlJCIsInZ1bG5lcmFiaWxlIiwiaGFzQWN0aXZlQ29tbW9kaXRpZXMkIiwiaGFzQXRMZWFzdDFBY3RpdmVDb21tb2RpdGllcyIsIngiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsidXBkYXRlQ3VzdG9tZXJGcm9tRDM2NS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXR0ZXIgfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7XHJcbiAgQ2hlY2tEMzY1UmVxdWVzdFBpY2ssXHJcbiAgQ2hlY2tEMzY1UmVzcG9uc2UsXHJcbn0gZnJvbSAnLi4vLi4vYXBpL3dlYm9yZGVyL3R5cGVzJztcclxuaW1wb3J0IHsgQ3VzdG9tZXIgfSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG4vKipcclxuICogVXBkYXRlcyBDdXN0b21lciBvYmplY3Qgd2l0aCBkYXRhIHJlY2VpdmVkIGZyb20gY2hlY2tEMzY1IHNlcnZpY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDdXN0b21lckZyb21EMzY1KFxyXG4gIHNldDogU2V0dGVyLFxyXG4gIGN1c3RvbWVyOiBDdXN0b21lcixcclxuICByZXF1ZXN0OiBDaGVja0QzNjVSZXF1ZXN0UGljayxcclxuICByZXNwb25zZTogQ2hlY2tEMzY1UmVzcG9uc2VcclxuKSB7XHJcbiAgLy8gVE9ETyBjaGVjayBpZiB0aGUgY3VzdG9tZXIgaXMgU01BTEwgb3IgUkVTSUQgYW5kIGhhcyBjb25mbGljdHNcclxuICBzZXQoY3VzdG9tZXIudHlwZSwgcmVzcG9uc2UubWFzdGVyKTtcclxuICBzZXQoY3VzdG9tZXIuY3VzdG9tZXJDb2RlLCByZXNwb25zZS5jb2RpY2VDbGllbnRlKTtcclxuICBzZXQoY3VzdG9tZXIucHJvZmlsZS5naXZlbk5hbWUkLCByZXF1ZXN0Lm5vbWUpO1xyXG4gIHNldChjdXN0b21lci5wcm9maWxlLmZhbWlseU5hbWUkLCByZXF1ZXN0LmNvZ25vbWUpO1xyXG4gIHNldChjdXN0b21lci5wcm9maWxlLmVtYWlsJCwgcmVzcG9uc2UuZW1haWwgfHwgcmVxdWVzdC5lbWFpbCk7XHJcbiAgc2V0KGN1c3RvbWVyLnByb2ZpbGUuZW1haWxDcnlwdCQsIHJlc3BvbnNlLmVtYWlsQ3J5cHQgPz8gdW5kZWZpbmVkKTtcclxuICBzZXQoY3VzdG9tZXIucHJvZmlsZS50YXhJZCQsIHJlcXVlc3QuY29kaWNlRmlzY2FsZSk7XHJcbiAgc2V0KGN1c3RvbWVyLnByb2ZpbGUudmF0TnVtYmVyJCwgcmVxdWVzdC5wYXJ0aXRhSXZhKTtcclxuICBpZiAocmVzcG9uc2UucHJpdmFjeSkge1xyXG4gICAgc2V0KGN1c3RvbWVyLnByb2ZpbGUucHJpdmFjeSQsIHtcclxuICAgICAgcHJvbW9QbGVuaXR1ZGU6IGlzQ29uY2Vzc2EocmVzcG9uc2UucHJpdmFjeS5wcml2YWN5UHJvbW96aW9uYWxlRW5pKSxcclxuICAgICAgbWFya2V0UmVzZWFyY2g6IGlzQ29uY2Vzc2EocmVzcG9uc2UucHJpdmFjeS5wcml2YWN5QW5hbGlzaVJpY2VyY2FNZXJjYXRvKSxcclxuICAgICAgcHJvbW9UaGlyZFBhcnRpZXM6IGlzQ29uY2Vzc2EoXHJcbiAgICAgICAgcmVzcG9uc2UucHJpdmFjeS5wcml2YWN5UHJvbW96aW9uYWxlQWx0cmVJbXByZXNlXHJcbiAgICAgICksXHJcbiAgICB9KTtcclxuICB9XHJcbiAgc2V0KGN1c3RvbWVyLnByb2ZpbGUudnVsbmVyYWJsZSQsICEhcmVzcG9uc2UudnVsbmVyYWJpbGUpO1xyXG4gIHNldChcclxuICAgIGN1c3RvbWVyLnByb2ZpbGUuaGFzQWN0aXZlQ29tbW9kaXRpZXMkLFxyXG4gICAgISFyZXNwb25zZS5oYXNBdExlYXN0MUFjdGl2ZUNvbW1vZGl0aWVzXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNDb25jZXNzYSh4OiAnQ09OQ0VTU0EnIHwgJ05PTiBDT05DRVNTQScpIHtcclxuICByZXR1cm4geCA9PT0gJ0NPTkNFU1NBJztcclxufVxyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXRvbXMvY3VzdG9tZXIvdXBkYXRlQ3VzdG9tZXJGcm9tRDM2NS50cyJ9