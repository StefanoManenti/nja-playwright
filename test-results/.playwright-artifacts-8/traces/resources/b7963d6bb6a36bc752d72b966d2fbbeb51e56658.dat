globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { Segment } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/enums.ts";
export async function isSamePaymentHolder(get, account, intestatario) {
  const customer = await get(account.customer$);
  const segment = await get(customer.segment);
  if (segment === Segment.SMALL) {
    if (intestatario.type !== "legal") {
      return false;
    }
    const businessName = await get(customer.profile.businessName$);
    const vatNumber = await get(customer.profile.vatNumber$);
    const taxId = await get(customer.profile.taxId$);
    return businessName === intestatario.businessName && vatNumber === intestatario.vatNumber && taxId === intestatario.taxId;
  } else {
    if (intestatario.type !== "individual") {
      return false;
    }
    const givenName = await get(customer.profile.givenName$);
    const familyName = await get(customer.profile.familyName$);
    const taxId = await get(customer.profile.taxId$);
    return givenName === intestatario.givenName && familyName === intestatario.familyName && taxId === intestatario.taxId;
  }
}
export const atomWithPaymentHolder = (account) => {
  return atom(async (get) => {
    const paymentTool = await get(account.paymentTool$);
    if (!paymentTool) {
      return;
    }
    const intestatario = paymentTool.intestatario;
    return await isSamePaymentHolder(get, account, intestatario);
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQW9CO0FBRTdCLFNBQVNDLGVBQWU7QUFTeEIsc0JBQXNCQyxvQkFDcEJDLEtBQ0FDLFNBQ0FDLGNBQ0E7QUFDQSxRQUFNQyxXQUFXLE1BQU1ILElBQUlDLFFBQVFHLFNBQVM7QUFDNUMsUUFBTUMsVUFBVSxNQUFNTCxJQUFJRyxTQUFTRSxPQUFPO0FBQzFDLE1BQUlBLFlBQVlQLFFBQVFRLE9BQU87QUFDN0IsUUFBSUosYUFBYUssU0FBUyxTQUFTO0FBQ2pDLGFBQU87QUFBQSxJQUNUO0FBQ0EsVUFBTUMsZUFBZSxNQUFNUixJQUFJRyxTQUFTTSxRQUFRQyxhQUFhO0FBQzdELFVBQU1DLFlBQVksTUFBTVgsSUFBSUcsU0FBU00sUUFBUUcsVUFBVTtBQUN2RCxVQUFNQyxRQUFRLE1BQU1iLElBQUlHLFNBQVNNLFFBQVFLLE1BQU07QUFFL0MsV0FDRU4saUJBQWlCTixhQUFhTSxnQkFDOUJHLGNBQWNULGFBQWFTLGFBQzNCRSxVQUFVWCxhQUFhVztBQUFBQSxFQUUzQixPQUFPO0FBRUwsUUFBSVgsYUFBYUssU0FBUyxjQUFjO0FBQ3RDLGFBQU87QUFBQSxJQUNUO0FBQ0EsVUFBTVEsWUFBWSxNQUFNZixJQUFJRyxTQUFTTSxRQUFRTyxVQUFVO0FBQ3ZELFVBQU1DLGFBQWEsTUFBTWpCLElBQUlHLFNBQVNNLFFBQVFTLFdBQVc7QUFDekQsVUFBTUwsUUFBUSxNQUFNYixJQUFJRyxTQUFTTSxRQUFRSyxNQUFNO0FBQy9DLFdBQ0VDLGNBQWNiLGFBQWFhLGFBQzNCRSxlQUFlZixhQUFhZSxjQUM1QkosVUFBVVgsYUFBYVc7QUFBQUEsRUFFM0I7QUFDRjtBQU9PLGFBQU1NLHdCQUF3QkEsQ0FBQ2xCLFlBQXFCO0FBQ3pELFNBQU9KLEtBQUssT0FBT0csUUFBUTtBQUN6QixVQUFNb0IsY0FBYyxNQUFNcEIsSUFBSUMsUUFBUW9CLFlBQVk7QUFDbEQsUUFBSSxDQUFDRCxhQUFhO0FBQ2hCO0FBQUEsSUFDRjtBQUNBLFVBQU1sQixlQUFla0IsWUFBWWxCO0FBQ2pDLFdBQU8sTUFBTUgsb0JBQW9CQyxLQUFLQyxTQUFTQyxZQUFZO0FBQUEsRUFDN0QsQ0FBQztBQUNIIiwibmFtZXMiOlsiYXRvbSIsIlNlZ21lbnQiLCJpc1NhbWVQYXltZW50SG9sZGVyIiwiZ2V0IiwiYWNjb3VudCIsImludGVzdGF0YXJpbyIsImN1c3RvbWVyIiwiY3VzdG9tZXIkIiwic2VnbWVudCIsIlNNQUxMIiwidHlwZSIsImJ1c2luZXNzTmFtZSIsInByb2ZpbGUiLCJidXNpbmVzc05hbWUkIiwidmF0TnVtYmVyIiwidmF0TnVtYmVyJCIsInRheElkIiwidGF4SWQkIiwiZ2l2ZW5OYW1lIiwiZ2l2ZW5OYW1lJCIsImZhbWlseU5hbWUiLCJmYW1pbHlOYW1lJCIsImF0b21XaXRoUGF5bWVudEhvbGRlciIsInBheW1lbnRUb29sIiwicGF5bWVudFRvb2wkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImF0b21XaXRoUGF5bWVudEhvbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdG9tLCBHZXR0ZXIgfSBmcm9tICdqb3RhaSc7XHJcbmltcG9ydCB7IEFjY291bnQsIEluZGl2aWR1YWwsIExlZ2FsRW50aXR5IH0gZnJvbSAnLi4vYXRvbXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBTZWdtZW50IH0gZnJvbSAnLi4vYXRvbXMvZW51bXMnO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0aGUgcGF5bWVudCBob2xkZXIgZGV0YWlscyBtYXRjaCB0aGUgYWNjb3VudCBjdXN0b21lciBkZXRhaWxzLlxyXG4gKiBAcGFyYW0gZ2V0IC0gR2V0dGVyIGZ1bmN0aW9uIHRvIGFjY2VzcyBhdG9tIHZhbHVlc1xyXG4gKiBAcGFyYW0gYWNjb3VudCAtIEFjY291bnQgb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tZXIgaW5mb3JtYXRpb25cclxuICogQHBhcmFtIGludGVzdGF0YXJpbyAtIEluZGl2aWR1YWwgb3IgTGVnYWwgRW50aXR5IHBheW1lbnQgaG9sZGVyIGRldGFpbHMgdG8gY29tcGFyZVxyXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdHJ1ZSBpZiBwYXltZW50IGhvbGRlciBtYXRjaGVzIGFjY291bnQgY3VzdG9tZXIsIGZhbHNlIG90aGVyd2lzZVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzU2FtZVBheW1lbnRIb2xkZXIoXHJcbiAgZ2V0OiBHZXR0ZXIsXHJcbiAgYWNjb3VudDogQWNjb3VudCxcclxuICBpbnRlc3RhdGFyaW86IEluZGl2aWR1YWwgfCBMZWdhbEVudGl0eVxyXG4pIHtcclxuICBjb25zdCBjdXN0b21lciA9IGF3YWl0IGdldChhY2NvdW50LmN1c3RvbWVyJCk7XHJcbiAgY29uc3Qgc2VnbWVudCA9IGF3YWl0IGdldChjdXN0b21lci5zZWdtZW50KTtcclxuICBpZiAoc2VnbWVudCA9PT0gU2VnbWVudC5TTUFMTCkge1xyXG4gICAgaWYgKGludGVzdGF0YXJpby50eXBlICE9PSAnbGVnYWwnKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJ1c2luZXNzTmFtZSA9IGF3YWl0IGdldChjdXN0b21lci5wcm9maWxlLmJ1c2luZXNzTmFtZSQpO1xyXG4gICAgY29uc3QgdmF0TnVtYmVyID0gYXdhaXQgZ2V0KGN1c3RvbWVyLnByb2ZpbGUudmF0TnVtYmVyJCk7XHJcbiAgICBjb25zdCB0YXhJZCA9IGF3YWl0IGdldChjdXN0b21lci5wcm9maWxlLnRheElkJCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgYnVzaW5lc3NOYW1lID09PSBpbnRlc3RhdGFyaW8uYnVzaW5lc3NOYW1lICYmXHJcbiAgICAgIHZhdE51bWJlciA9PT0gaW50ZXN0YXRhcmlvLnZhdE51bWJlciAmJlxyXG4gICAgICB0YXhJZCA9PT0gaW50ZXN0YXRhcmlvLnRheElkXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvKiBTZWdtZW50LlJFU0lEICovXHJcbiAgICBpZiAoaW50ZXN0YXRhcmlvLnR5cGUgIT09ICdpbmRpdmlkdWFsJykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBnaXZlbk5hbWUgPSBhd2FpdCBnZXQoY3VzdG9tZXIucHJvZmlsZS5naXZlbk5hbWUkKTtcclxuICAgIGNvbnN0IGZhbWlseU5hbWUgPSBhd2FpdCBnZXQoY3VzdG9tZXIucHJvZmlsZS5mYW1pbHlOYW1lJCk7XHJcbiAgICBjb25zdCB0YXhJZCA9IGF3YWl0IGdldChjdXN0b21lci5wcm9maWxlLnRheElkJCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBnaXZlbk5hbWUgPT09IGludGVzdGF0YXJpby5naXZlbk5hbWUgJiZcclxuICAgICAgZmFtaWx5TmFtZSA9PT0gaW50ZXN0YXRhcmlvLmZhbWlseU5hbWUgJiZcclxuICAgICAgdGF4SWQgPT09IGludGVzdGF0YXJpby50YXhJZFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGF0b20gdGhhdCBjaGVja3MgaWYgdGhlIHBheW1lbnQgdG9vbCBob2xkZXIgbWF0Y2hlcyB0aGUgYWNjb3VudCBjdXN0b21lci5cclxuICogQHBhcmFtIGFjY291bnQgLSBBY2NvdW50IG9iamVjdCB0byBjaGVjayBwYXltZW50IGhvbGRlciBhZ2FpbnN0XHJcbiAqIEByZXR1cm5zIEF0b20gdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHBheW1lbnQgaG9sZGVyIG1hdGNoZXMgYWNjb3VudCBjdXN0b21lciwgdW5kZWZpbmVkIGlmIG5vIHBheW1lbnQgdG9vbCBleGlzdHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBhdG9tV2l0aFBheW1lbnRIb2xkZXIgPSAoYWNjb3VudDogQWNjb3VudCkgPT4ge1xyXG4gIHJldHVybiBhdG9tKGFzeW5jIChnZXQpID0+IHtcclxuICAgIGNvbnN0IHBheW1lbnRUb29sID0gYXdhaXQgZ2V0KGFjY291bnQucGF5bWVudFRvb2wkKTtcclxuICAgIGlmICghcGF5bWVudFRvb2wpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW50ZXN0YXRhcmlvID0gcGF5bWVudFRvb2wuaW50ZXN0YXRhcmlvO1xyXG4gICAgcmV0dXJuIGF3YWl0IGlzU2FtZVBheW1lbnRIb2xkZXIoZ2V0LCBhY2NvdW50LCBpbnRlc3RhdGFyaW8pO1xyXG4gIH0pO1xyXG59O1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXRvbXMtZ2VuZXJhdG9ycy9hdG9tV2l0aFBheW1lbnRIb2xkZXIudHMifQ==