globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { API, atomWithRetryableQuery } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/utils/index.ts";
import { readPrivateAreaServiceResponse, getPrivateAreaCommonQuerystring } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/api/private-area/utils.ts";
async function fetchConsumptionData(codiceConto) {
  const response = await fetch(`${API}/consumptionData?codiceContoCliente=${codiceConto}&${getPrivateAreaCommonQuerystring()}`, {
    method: "GET",
    headers: {
      Accept: "application/json"
    }
  });
  const json = await readPrivateAreaServiceResponse(response);
  if (response.status === 200) {
    return json.supplies;
  }
  throw Error(response.statusText);
}
export const buildConsumptionDataServiceAtom = (accountCode) => {
  return atomWithRetryableQuery(() => ({
    queryKey: ["consumption-data", accountCode],
    queryFn: ({
      queryKey: [, codiceConto]
    }) => fetchConsumptionData(codiceConto)
  }));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLEtBQUtDLDhCQUE4QjtBQUM1QyxTQUNFQyxnQ0FDQUMsdUNBQ0s7QUE4QlAsZUFBZUMscUJBQXFCQyxhQUFxQjtBQUN2RCxRQUFNQyxXQUFXLE1BQU1DLE1BQ3JCLEdBQUdQLEdBQUcsdUNBQXVDSyxXQUFXLElBQUlGLGdDQUFnQyxDQUFDLElBQzdGO0FBQUEsSUFDRUssUUFBUTtBQUFBLElBQ1JDLFNBQVM7QUFBQSxNQUNQQyxRQUFRO0FBQUEsSUFDVjtBQUFBLEVBQ0YsQ0FDRjtBQUVBLFFBQU1DLE9BQU8sTUFBTVQsK0JBQStCSSxRQUFRO0FBQzFELE1BQUlBLFNBQVNNLFdBQVcsS0FBSztBQUMzQixXQUFRRCxLQUF5QkU7QUFBQUEsRUFDbkM7QUFFQSxRQUFNQyxNQUFNUixTQUFTUyxVQUFVO0FBQ2pDO0FBRU8sYUFBTUMsa0NBQWtDQSxDQUFDQyxnQkFBd0I7QUFDdEUsU0FBT2hCLHVCQUF1QixPQUFPO0FBQUEsSUFDbkNpQixVQUFVLENBQUMsb0JBQW9CRCxXQUFXO0FBQUEsSUFDMUNFLFNBQVNBLENBQUM7QUFBQSxNQUFFRCxVQUFVLEdBQUdiLFdBQVc7QUFBQSxJQUFFLE1BQ3BDRCxxQkFBcUJDLFdBQXFCO0FBQUEsRUFDOUMsRUFBRTtBQUNKIiwibmFtZXMiOlsiQVBJIiwiYXRvbVdpdGhSZXRyeWFibGVRdWVyeSIsInJlYWRQcml2YXRlQXJlYVNlcnZpY2VSZXNwb25zZSIsImdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmciLCJmZXRjaENvbnN1bXB0aW9uRGF0YSIsImNvZGljZUNvbnRvIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJqc29uIiwic3RhdHVzIiwic3VwcGxpZXMiLCJFcnJvciIsInN0YXR1c1RleHQiLCJidWlsZENvbnN1bXB0aW9uRGF0YVNlcnZpY2VBdG9tIiwiYWNjb3VudENvZGUiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiY29uc3VtcHRpb24tZGF0YS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUEksIGF0b21XaXRoUmV0cnlhYmxlUXVlcnkgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7XHJcbiAgcmVhZFByaXZhdGVBcmVhU2VydmljZVJlc3BvbnNlLFxyXG4gIGdldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcsXHJcbn0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgQ29uc3VtcHRpb25Sb290IHtcclxuICBzdXBwbGllczogU3VwcGx5W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3VwcGx5IHtcclxuICBwZGY6IHN0cmluZztcclxuICB0eXBlOiAnTFVDRScgfCAnR0FTJztcclxuICBzaG93Q2hhcnQ6IGJvb2xlYW47XHJcbiAgY29uc3VtcHRpb25zOiBDb25zdW1wdGlvbltdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnN1bXB0aW9uIHtcclxuICBtb250aDogc3RyaW5nO1xyXG4gIG51bWVyaWNhbE1vbnRoOiBudW1iZXI7XHJcbiAgeWVhcjogc3RyaW5nO1xyXG4gIGxhc3RZZWFyOiBzdHJpbmc7XHJcbiAgbGFzdFllYXJDb25zdW1wdGlvbnM/OiBudW1iZXIgfCBzdHJpbmcgfCBudWxsO1xyXG4gIGxhc3RZZWFyUGVyY2VudERpZmY/OiBudW1iZXIgfCBzdHJpbmcgfCBudWxsO1xyXG4gIGlzUGFydGlhbDogYm9vbGVhbjtcclxuICBsYXN0UmVhZGluZ0RhdGU6IHN0cmluZztcclxuICBjb25zdW1wdGlvbnNGMTogbnVtYmVyO1xyXG4gIGNvbnN1bXB0aW9uc0YyOiBudW1iZXI7XHJcbiAgY29uc3VtcHRpb25zRjM6IG51bWJlcjtcclxuICBjb25zdW1wdGlvbnNGMkYzOiBudW1iZXI7XHJcbiAgaXNOdWxsPzogYm9vbGVhbjtcclxuICBjb25zdW1wdGlvbnNOdWxsPzogbnVtYmVyO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaENvbnN1bXB0aW9uRGF0YShjb2RpY2VDb250bzogc3RyaW5nKSB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgIGAke0FQSX0vY29uc3VtcHRpb25EYXRhP2NvZGljZUNvbnRvQ2xpZW50ZT0ke2NvZGljZUNvbnRvfSYke2dldFByaXZhdGVBcmVhQ29tbW9uUXVlcnlzdHJpbmcoKX1gLFxyXG4gICAge1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgY29uc3QganNvbiA9IGF3YWl0IHJlYWRQcml2YXRlQXJlYVNlcnZpY2VSZXNwb25zZShyZXNwb25zZSk7XHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICByZXR1cm4gKGpzb24gYXMgQ29uc3VtcHRpb25Sb290KS5zdXBwbGllcztcclxuICB9XHJcblxyXG4gIHRocm93IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYnVpbGRDb25zdW1wdGlvbkRhdGFTZXJ2aWNlQXRvbSA9IChhY2NvdW50Q29kZTogc3RyaW5nKSA9PiB7XHJcbiAgcmV0dXJuIGF0b21XaXRoUmV0cnlhYmxlUXVlcnkoKCkgPT4gKHtcclxuICAgIHF1ZXJ5S2V5OiBbJ2NvbnN1bXB0aW9uLWRhdGEnLCBhY2NvdW50Q29kZV0sXHJcbiAgICBxdWVyeUZuOiAoeyBxdWVyeUtleTogWywgY29kaWNlQ29udG9dIH0pID0+XHJcbiAgICAgIGZldGNoQ29uc3VtcHRpb25EYXRhKGNvZGljZUNvbnRvIGFzIHN0cmluZyksXHJcbiAgfSkpO1xyXG59O1xyXG4iXSwiZmlsZSI6IkM6L1VzZXJzL2FpbnRyb25hL0Rlc2t0b3AvQXBwL3JlYWN0L25hai9saWJzL2RhdGEtYWNjZXNzL3NyYy9saWIvYXBpL3ByaXZhdGUtYXJlYS9jb25zdW1wdGlvbi1kYXRhLnRzIn0=