globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { createOptimisticAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_index.js?v=0189a8d1";
import { atomWithLazy } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai_utils.js?v=0189a8d1";
import { CommodityObj } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/CommodityObj.ts";
import { getActivationTypeGas, getActivationTypePower } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/activation-questions.tsx";
import { restoreBroadbandFromUrl, restoreGasFromUrl, restoreOperativeModeFromUrl, restorePanelFromUrl, restorePowerFromUrl, restoreWantsCommodityFromUrl } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/state-url.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { BroadbandWorkingProduct, combineProducts, CommodityWorkingProduct, PanelWorkingProduct } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/WorkingProduct.ts";
export const tsPowerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsPowerAtom", atomWithLazy(restorePowerFromUrl));
tsPowerAtom.debugLabel = "tsPowerAtom";
export const tsGasAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsGasAtom", atomWithLazy(restoreGasFromUrl));
tsGasAtom.debugLabel = "tsGasAtom";
export const tsWantsCommodityAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsWantsCommodityAtom", atomWithLazy(restoreWantsCommodityFromUrl));
tsWantsCommodityAtom.debugLabel = "tsWantsCommodityAtom";
export const tsBroadbandAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsBroadbandAtom", atomWithLazy(restoreBroadbandFromUrl));
tsBroadbandAtom.debugLabel = "tsBroadbandAtom";
export const tsPanelAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsPanelAtom", atomWithLazy(restorePanelFromUrl));
tsPanelAtom.debugLabel = "tsPanelAtom";
export const qsOperativeModeAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/qsOperativeModeAtom", atomWithLazy(restoreOperativeModeFromUrl));
qsOperativeModeAtom.debugLabel = "qsOperativeModeAtom";
export const tsOperativeModePowerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsOperativeModePowerAtom", createOptimisticAtom(atomWithLazy(restoreOperativeModeFromUrl)));
tsOperativeModePowerAtom.debugLabel = "tsOperativeModePowerAtom";
export const tsOperativeModePowerCalculated$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsOperativeModePowerCalculated$", atom((get) => {
  const operativeMode = get(tsOperativeModePowerAtom);
  const activationPower = get(tsActivationPower$);
  if (operativeMode === OperativeMode.NEW_ACTIVATION) {
    const activationType = getActivationTypePower(activationPower);
    if (activationType === "Voltura luce") {
      return OperativeMode.TRANSFER;
    }
    if (activationType === "Attivare unâ€™offerta con voltura") {
      return OperativeMode.SWITCH_IN_TRANSFER;
    }
  }
  return operativeMode;
}));
tsOperativeModePowerCalculated$.debugLabel = "tsOperativeModePowerCalculated$";
export const tsOperativeModeGasAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsOperativeModeGasAtom", createOptimisticAtom(atomWithLazy(restoreOperativeModeFromUrl)));
tsOperativeModeGasAtom.debugLabel = "tsOperativeModeGasAtom";
export const tsOperativeModeGasCalculated$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsOperativeModeGasCalculated$", atom((get) => {
  const operativeMode = get(tsOperativeModeGasAtom);
  const activationGas = get(tsActivationGas$);
  if (operativeMode === OperativeMode.NEW_ACTIVATION) {
    const activationType = getActivationTypeGas(activationGas);
    if (activationType === "Voltura gas") {
      return OperativeMode.TRANSFER;
    }
  }
  return operativeMode;
}));
tsOperativeModeGasCalculated$.debugLabel = "tsOperativeModeGasCalculated$";
export const tsActivationPower$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsActivationPower$", atom({
  contatorePresente: void 0,
  aperto: void 0,
  predisposizioneImpianto: void 0,
  plenitudeCustomer: void 0
}));
tsActivationPower$.debugLabel = "tsActivationPower$";
export const tsActivationGas$ = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/tsActivationGas$", atom({
  contatorePresente: void 0,
  aperto: void 0,
  attaccoContatore: void 0,
  impiantoModificato: void 0
}));
tsActivationGas$.debugLabel = "tsActivationGas$";
const isPowerPurchasedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/isPowerPurchasedAtom", atom(false));
isPowerPurchasedAtom.debugLabel = "isPowerPurchasedAtom";
const isGasPurchasedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/isGasPurchasedAtom", atom(false));
isGasPurchasedAtom.debugLabel = "isGasPurchasedAtom";
const isFiberPurchasedAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/isFiberPurchasedAtom", atom(false));
isFiberPurchasedAtom.debugLabel = "isFiberPurchasedAtom";
export const productsToPurchaseAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/productsToPurchaseAtom", atom((get) => {
  const products = [];
  if (get(tsPanelAtom)) {
    products.push({
      product: new PanelWorkingProduct(),
      purchased: get(isPowerPurchasedAtom)
    });
  }
  if (get(tsBroadbandAtom)) {
    products.push({
      product: new BroadbandWorkingProduct(),
      purchased: get(isFiberPurchasedAtom)
    });
  }
  if (get(tsPowerAtom)) {
    const operativeModePower = get(tsOperativeModePowerCalculated$);
    products.push({
      product: new CommodityWorkingProduct(CommodityObj.POWER, operativeModePower),
      purchased: get(isPowerPurchasedAtom)
    });
  }
  if (get(tsGasAtom)) {
    const operativeModeGas = get(tsOperativeModeGasCalculated$);
    products.push({
      product: new CommodityWorkingProduct(CommodityObj.GAS, operativeModeGas),
      purchased: get(isGasPurchasedAtom)
    });
  }
  products.sort((a, b) => {
    return (b.purchased ? 1 : 0) - (a.purchased ? 1 : 0);
  });
  const indexFirstNotPurchased = products.findIndex((p) => !p.purchased);
  const purchased = products.slice(0, indexFirstNotPurchased);
  const notPurchased = combineProducts(products.slice(indexFirstNotPurchased).map((p) => p.product)).map((product) => ({
    product,
    purchased: false
  }));
  return [...purchased, ...notPurchased];
}));
productsToPurchaseAtom.debugLabel = "productsToPurchaseAtom";
export const workingProductAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/workingProductAtom", atom((get) => {
  const products = get(productsToPurchaseAtom);
  return products.find((p) => !p.purchased)?.product;
}));
workingProductAtom.debugLabel = "workingProductAtom";
export const singleProductAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/singleProductAtom", atom((get) => {
  const products = get(productsToPurchaseAtom);
  return products.length === 1;
}));
singleProductAtom.debugLabel = "singleProductAtom";
export const workingOnBroadbandAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/workingOnBroadbandAtom", atom((get) => {
  const product = get(workingProductAtom);
  return !!product?.broadband;
}));
workingOnBroadbandAtom.debugLabel = "workingOnBroadbandAtom";
export const workingOnPanelAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/workingOnPanelAtom", atom((get) => {
  const product = get(workingProductAtom);
  return !!product?.panel;
}));
workingOnPanelAtom.debugLabel = "workingOnPanelAtom";
export const workingOnPanelStandaloneAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\troubleshooting\\troubleshooting.ts/workingOnPanelStandaloneAtom", atom((get) => {
  const product = get(workingProductAtom);
  return !!(product && product.panel && !product.commodity && !product.broadband);
}));
workingOnPanelStandaloneAtom.debugLabel = "workingOnPanelStandaloneAtom";

//# sourceMappingURL=data:application/json;base64,