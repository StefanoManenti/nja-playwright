globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { gasAtom, offerIdAtom, OperativeMode, operativeModeAtom, powerAtom, PowerRate, powerRateAtom, tsGasAtom, tsOperativeModeGasAtom, tsOperativeModePowerAtom, tsPowerAtom, workingOnPanelStandaloneAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
export const listinoAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/listinoAtom", atom((get) => {
  const {
    code
  } = get(offerIdAtom);
  const match = code?.match(/^([A-Z]+)[0-9]*_/);
  if (!match) return;
  return match[1];
}));
listinoAtom.debugLabel = "listinoAtom";
export const prodottoAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/prodottoAtom", atom((get) => {
  const isPanel = get(workingOnPanelStandaloneAtom);
  if (isPanel) {
    return "pannello";
  }
  const offer = get(offerIdAtom);
  return getNomeOfferta(offer);
}));
prodottoAtom.debugLabel = "prodottoAtom";
export function getNomeOfferta(offer) {
  return offer.code;
}
export const operazioneMap = {
  [OperativeMode.SWITCH_IN]: "weborder",
  [OperativeMode.SWITCH_IN_TRANSFER]: "switchin con voltura",
  [OperativeMode.TRANSFER]: "voltura",
  [OperativeMode.NEW_ACTIVATION]: "newactivation",
  [OperativeMode.CHANGE_OFFER]: "cambio prodotto",
  [OperativeMode.VIRTUAL_PANEL]: "adotta_pannello"
};
export const operazioneAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/operazioneAtom", atom((get) => {
  const op = get(operativeModeAtom);
  if (!op) return;
  return operazioneMap[op];
}));
operazioneAtom.debugLabel = "operazioneAtom";
export const operazioneTsMap = {
  [OperativeMode.SWITCH_IN]: "weborder",
  [OperativeMode.SWITCH_IN_TRANSFER]: "switchin con voltura",
  [OperativeMode.TRANSFER]: "voltura",
  [OperativeMode.NEW_ACTIVATION]: "nuova attivazione",
  [OperativeMode.CHANGE_OFFER]: "cambio prodotto",
  [OperativeMode.VIRTUAL_PANEL]: "adotta_pannello"
};
export const operazionePowerAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/operazionePowerAtom", atom((get) => {
  const op = get(tsOperativeModePowerAtom);
  if (!op) return;
  return operazioneTsMap[op];
}));
operazionePowerAtom.debugLabel = "operazionePowerAtom";
export const operazioneGasAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/operazioneGasAtom", atom((get) => {
  const op = get(tsOperativeModeGasAtom);
  if (!op) return;
  return operazioneTsMap[op];
}));
operazioneGasAtom.debugLabel = "operazioneGasAtom";
const opzioneMap = {
  [PowerRate.SINGLE]: "monorario",
  [PowerRate.BI_HOURLY]: "biorario"
};
export const opzioneAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/opzioneAtom", atom((get) => {
  const op = get(powerRateAtom);
  if (!op) return;
  return opzioneMap[op];
}));
opzioneAtom.debugLabel = "opzioneAtom";
export const commodityAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/commodityAtom", atom((get) => {
  const isPanel = get(workingOnPanelStandaloneAtom);
  if (isPanel) {
    return "pannello";
  }
  const power = get(powerAtom);
  const gas = get(gasAtom);
  return gas ? power ? "dual" : "gas" : power ? "luce" : void 0;
}));
commodityAtom.debugLabel = "commodityAtom";
export const commodityTsAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\tracking-app\\src\\lib\\atoms.ts/commodityTsAtom", atom((get) => {
  const power = get(tsPowerAtom);
  const gas = get(tsGasAtom);
  return gas ? power ? "dual" : "gas" : power ? "luce" : void 0;
}));
commodityTsAtom.debugLabel = "commodityTsAtom";

//# sourceMappingURL=data:application/json;base64,