globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {
  cache: /* @__PURE__ */ new Map(),
  get(name, inst) {
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }
    this.cache.set(name, inst);
    return inst;
  }
};
import { atom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
import { operativeModeAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/atoms.ts";
import { workingOnBroadbandAtom } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/troubleshooting.ts";
import { OperativeMode } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/troubleshooting/types.ts";
import { broadband$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/broadband/broadband.ts";
import { BbSalesProcess } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/broadband/types.ts";
import { salesProcessBulkOrder$ } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/lib/atoms/activations/index.ts";
export const currentSalesProcess = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\sales-process-atoms.ts/currentSalesProcess", atom(async (get) => {
  const operativeMode = get(operativeModeAtom);
  switch (operativeMode) {
    case OperativeMode.NOT_SELECTED:
      return "";
    case OperativeMode.SWITCH_IN:
      return "SWITCH IN";
    case OperativeMode.SWITCH_IN_TRANSFER:
      return "VOLTURA CON CAMBIO FORNITORE";
    case OperativeMode.TRANSFER:
      return "VOLTURA";
    case OperativeMode.NEW_ACTIVATION:
      return await get(salesProcessBulkOrder$) || "ATTIVAZIONE SEMPLICE";
    case OperativeMode.CHANGE_OFFER:
      return "CAMBIO PRODOTTO";
    case OperativeMode.VIRTUAL_PANEL:
      return "AGGIUNGI PANNELLO VIRTUALE";
  }
  if (get(workingOnBroadbandAtom)) {
    return get((await get(broadband$)).salesProcess$);
  }
  return "";
}));
currentSalesProcess.debugLabel = "currentSalesProcess";
export const currentSalesProcessForLog = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\data-access\\src\\lib\\atoms\\sales-process-atoms.ts/currentSalesProcessForLog", atom(async (get) => {
  const operativeMode = get(operativeModeAtom);
  switch (operativeMode) {
    case OperativeMode.SWITCH_IN:
      return "SWITCH_IN";
    case OperativeMode.SWITCH_IN_TRANSFER:
      return "SWITCH_IN_VOLTURA";
    case OperativeMode.TRANSFER:
      return "VOLTURA";
    case OperativeMode.NEW_ACTIVATION:
      return "ATTIVAZIONI";
    case OperativeMode.CHANGE_OFFER:
      return "CAMBIO_PRODOTTO";
    case OperativeMode.VIRTUAL_PANEL:
      return "AGGIUNGI_PANNELLO_VIRTUALE";
  }
  if (get(workingOnBroadbandAtom)) {
    const bbSalesProcess = get((await get(broadband$)).salesProcess$);
    switch (bbSalesProcess) {
      case BbSalesProcess.BROADBAND_MIGRAZIONE:
        return "BROADBAND_MIGRAZIONE";
      case BbSalesProcess.BROADBAND_NUOVA_ATTIVAZIONE:
        return "BROADBAND_NUOVA_ATTIVAZIONE";
    }
  }
  return "GEN_WO";
}));
currentSalesProcessForLog.debugLabel = "currentSalesProcessForLog";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLFlBQVk7QUFDckIsU0FBU0MseUJBQXlCO0FBQ2xDLFNBQVNDLDhCQUE4QjtBQUN2QyxTQUFTQyxxQkFBcUI7QUFDOUIsU0FBU0Msa0JBQWtCO0FBQzNCLFNBQVNDLHNCQUFzQjtBQUMvQixTQUFTQyw4QkFBOEI7QUE4QnZDLGFBQUFDLHNCQUFBQyxXQUFBQyxlQUFBQyxJQUFBLGlJQUFtQ1YsS0FBNEIsT0FBT1UsUUFBUTtBQUM1RSxRQUFNQyxnQkFBZ0JELElBQUlULGlCQUFpQjtBQUUzQyxVQUFRVSxlQUFhO0FBQUEsSUFDbkIsS0FBS1IsY0FBY1M7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1QsY0FBY1U7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1YsY0FBY1c7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1gsY0FBY1k7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1osY0FBY2E7QUFDakIsYUFBUSxNQUFNTixJQUFJSixzQkFBc0IsS0FBTTtBQUFBLElBQ2hELEtBQUtILGNBQWNjO0FBQ2pCLGFBQU87QUFBQSxJQUNULEtBQUtkLGNBQWNlO0FBQ2pCLGFBQU87QUFBQSxFQUNYO0FBRUEsTUFBSVIsSUFBSVIsc0JBQXNCLEdBQUc7QUFDL0IsV0FBT1EsS0FBSyxNQUFNQSxJQUFJTixVQUFVLEdBQUdlLGFBQWE7QUFBQSxFQUNsRDtBQUVBLFNBQU87QUFDVCxDQUFDLENBQUM7QUFBQ1osb0JBQUFhLGFBQUE7QUFFSCxhQUFBQyw0QkFBQWIsV0FBQUMsZUFBQUMsSUFBQSx1SUFBeUNWLEtBQ3ZDLE9BQU9VLFFBQVE7QUFDYixRQUFNQyxnQkFBZ0JELElBQUlULGlCQUFpQjtBQUMzQyxVQUFRVSxlQUFhO0FBQUEsSUFDbkIsS0FBS1IsY0FBY1U7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1YsY0FBY1c7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1gsY0FBY1k7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS1osY0FBY2E7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS2IsY0FBY2M7QUFDakIsYUFBTztBQUFBLElBQ1QsS0FBS2QsY0FBY2U7QUFDakIsYUFBTztBQUFBLEVBQ1g7QUFFQSxNQUFJUixJQUFJUixzQkFBc0IsR0FBRztBQUMvQixVQUFNb0IsaUJBQWlCWixLQUFLLE1BQU1BLElBQUlOLFVBQVUsR0FBR2UsYUFBYTtBQUNoRSxZQUFRRyxnQkFBYztBQUFBLE1BQ3BCLEtBQUtqQixlQUFla0I7QUFDbEIsZUFBTztBQUFBLE1BQ1QsS0FBS2xCLGVBQWVtQjtBQUNsQixlQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0Y7QUFFQSxTQUFPO0FBQ1QsQ0FDRixDQUFDO0FBQUNILDBCQUFBRCxhQUFBIiwibmFtZXMiOlsiYXRvbSIsIm9wZXJhdGl2ZU1vZGVBdG9tIiwid29ya2luZ09uQnJvYWRiYW5kQXRvbSIsIk9wZXJhdGl2ZU1vZGUiLCJicm9hZGJhbmQkIiwiQmJTYWxlc1Byb2Nlc3MiLCJzYWxlc1Byb2Nlc3NCdWxrT3JkZXIkIiwiY3VycmVudFNhbGVzUHJvY2VzcyIsImdsb2JhbFRoaXMiLCJqb3RhaUF0b21DYWNoZSIsImdldCIsIm9wZXJhdGl2ZU1vZGUiLCJOT1RfU0VMRUNURUQiLCJTV0lUQ0hfSU4iLCJTV0lUQ0hfSU5fVFJBTlNGRVIiLCJUUkFOU0ZFUiIsIk5FV19BQ1RJVkFUSU9OIiwiQ0hBTkdFX09GRkVSIiwiVklSVFVBTF9QQU5FTCIsInNhbGVzUHJvY2VzcyQiLCJkZWJ1Z0xhYmVsIiwiY3VycmVudFNhbGVzUHJvY2Vzc0ZvckxvZyIsImJiU2FsZXNQcm9jZXNzIiwiQlJPQURCQU5EX01JR1JBWklPTkUiLCJCUk9BREJBTkRfTlVPVkFfQVRUSVZBWklPTkUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsic2FsZXMtcHJvY2Vzcy1hdG9tcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdG9tIH0gZnJvbSAnam90YWknO1xyXG5pbXBvcnQgeyBvcGVyYXRpdmVNb2RlQXRvbSB9IGZyb20gJy4uL3Ryb3VibGVzaG9vdGluZy9hdG9tcyc7XHJcbmltcG9ydCB7IHdvcmtpbmdPbkJyb2FkYmFuZEF0b20gfSBmcm9tICcuLi90cm91Ymxlc2hvb3RpbmcvdHJvdWJsZXNob290aW5nJztcclxuaW1wb3J0IHsgT3BlcmF0aXZlTW9kZSB9IGZyb20gJy4uL3Ryb3VibGVzaG9vdGluZy90eXBlcyc7XHJcbmltcG9ydCB7IGJyb2FkYmFuZCQgfSBmcm9tICcuL2Jyb2FkYmFuZC9icm9hZGJhbmQnO1xyXG5pbXBvcnQgeyBCYlNhbGVzUHJvY2VzcyB9IGZyb20gJy4vYnJvYWRiYW5kL3R5cGVzJztcclxuaW1wb3J0IHsgc2FsZXNQcm9jZXNzQnVsa09yZGVyJCB9IGZyb20gJy4vYWN0aXZhdGlvbnMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU2FsZXNQcm9jZXNzID1cclxuICB8ICcnXHJcbiAgfCAnVk9MVFVSQSdcclxuICB8ICdTV0lUQ0ggSU4nXHJcbiAgfCAnVk9MVFVSQSBDT04gQ0FNQklPIEZPUk5JVE9SRSdcclxuICB8ICdTVUJFTlRSTydcclxuICB8ICdBVFRJVkFaSU9ORSBDT04gSVNUQU5aQSdcclxuICB8ICdBTExBQ0NJTyBDT04gUE9TQSBFIEFUVElWQVpJT05FJ1xyXG4gIHwgJ0FUVElWQVpJT05FIFNFTVBMSUNFJ1xyXG4gIHwgJ0FUVElWQVpJT05FIENPTiBBQ0NFUlRBTUVOVE8nXHJcbiAgfCAnUFJFVkVOVElWTyBFIEFUVElWQVpJT05FIEdBUydcclxuICB8ICdDQU1CSU8gUFJPRE9UVE8nXHJcbiAgfCAnQUdHSVVOR0kgUEFOTkVMTE8gVklSVFVBTEUnXHJcbiAgfCAnQlJPQURCQU5EIE1JR1JBWklPTkUnXHJcbiAgfCAnQlJPQURCQU5EIE5VT1ZBIEFUVElWQVpJT05FJztcclxuXHJcbmV4cG9ydCB0eXBlIFNhbGVzUHJvY2Vzc0ZvckxvZyA9XHJcbiAgfCAnQUdHSVVOR0lfUEFOTkVMTE9fVklSVFVBTEUnXHJcbiAgfCAnQVRUSVZBWklPTkknXHJcbiAgfCAnR0VOX1dPJ1xyXG4gIHwgJ1JJTVVPVklfUEFOTkVMTE9fVklSVFVBTEUnXHJcbiAgfCAnU1dJVENIX0lOJ1xyXG4gIHwgJ1NXSVRDSF9JTl9WT0xUVVJBJ1xyXG4gIHwgJ1ZPTFRVUkEnXHJcbiAgfCAnQ0FNQklPX1BST0RPVFRPJ1xyXG4gIHwgJ0JST0FEQkFORF9OVU9WQV9BVFRJVkFaSU9ORSdcclxuICB8ICdCUk9BREJBTkRfTUlHUkFaSU9ORSc7XHJcblxyXG5leHBvcnQgY29uc3QgY3VycmVudFNhbGVzUHJvY2VzcyA9IGF0b208UHJvbWlzZTxTYWxlc1Byb2Nlc3M+Pihhc3luYyAoZ2V0KSA9PiB7XHJcbiAgY29uc3Qgb3BlcmF0aXZlTW9kZSA9IGdldChvcGVyYXRpdmVNb2RlQXRvbSk7XHJcblxyXG4gIHN3aXRjaCAob3BlcmF0aXZlTW9kZSkge1xyXG4gICAgY2FzZSBPcGVyYXRpdmVNb2RlLk5PVF9TRUxFQ1RFRDpcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgY2FzZSBPcGVyYXRpdmVNb2RlLlNXSVRDSF9JTjpcclxuICAgICAgcmV0dXJuICdTV0lUQ0ggSU4nO1xyXG4gICAgY2FzZSBPcGVyYXRpdmVNb2RlLlNXSVRDSF9JTl9UUkFOU0ZFUjpcclxuICAgICAgcmV0dXJuICdWT0xUVVJBIENPTiBDQU1CSU8gRk9STklUT1JFJztcclxuICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5UUkFOU0ZFUjpcclxuICAgICAgcmV0dXJuICdWT0xUVVJBJztcclxuICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5ORVdfQUNUSVZBVElPTjpcclxuICAgICAgcmV0dXJuIChhd2FpdCBnZXQoc2FsZXNQcm9jZXNzQnVsa09yZGVyJCkpIHx8ICdBVFRJVkFaSU9ORSBTRU1QTElDRSc7XHJcbiAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuQ0hBTkdFX09GRkVSOlxyXG4gICAgICByZXR1cm4gJ0NBTUJJTyBQUk9ET1RUTyc7XHJcbiAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuVklSVFVBTF9QQU5FTDpcclxuICAgICAgcmV0dXJuICdBR0dJVU5HSSBQQU5ORUxMTyBWSVJUVUFMRSc7XHJcbiAgfVxyXG5cclxuICBpZiAoZ2V0KHdvcmtpbmdPbkJyb2FkYmFuZEF0b20pKSB7XHJcbiAgICByZXR1cm4gZ2V0KChhd2FpdCBnZXQoYnJvYWRiYW5kJCkpLnNhbGVzUHJvY2VzcyQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuICcnO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjdXJyZW50U2FsZXNQcm9jZXNzRm9yTG9nID0gYXRvbTxQcm9taXNlPFNhbGVzUHJvY2Vzc0ZvckxvZz4+KFxyXG4gIGFzeW5jIChnZXQpID0+IHtcclxuICAgIGNvbnN0IG9wZXJhdGl2ZU1vZGUgPSBnZXQob3BlcmF0aXZlTW9kZUF0b20pO1xyXG4gICAgc3dpdGNoIChvcGVyYXRpdmVNb2RlKSB7XHJcbiAgICAgIGNhc2UgT3BlcmF0aXZlTW9kZS5TV0lUQ0hfSU46XHJcbiAgICAgICAgcmV0dXJuICdTV0lUQ0hfSU4nO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuU1dJVENIX0lOX1RSQU5TRkVSOlxyXG4gICAgICAgIHJldHVybiAnU1dJVENIX0lOX1ZPTFRVUkEnO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuVFJBTlNGRVI6XHJcbiAgICAgICAgcmV0dXJuICdWT0xUVVJBJztcclxuICAgICAgY2FzZSBPcGVyYXRpdmVNb2RlLk5FV19BQ1RJVkFUSU9OOlxyXG4gICAgICAgIHJldHVybiAnQVRUSVZBWklPTkknO1xyXG4gICAgICBjYXNlIE9wZXJhdGl2ZU1vZGUuQ0hBTkdFX09GRkVSOlxyXG4gICAgICAgIHJldHVybiAnQ0FNQklPX1BST0RPVFRPJztcclxuICAgICAgY2FzZSBPcGVyYXRpdmVNb2RlLlZJUlRVQUxfUEFORUw6XHJcbiAgICAgICAgcmV0dXJuICdBR0dJVU5HSV9QQU5ORUxMT19WSVJUVUFMRSc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdldCh3b3JraW5nT25Ccm9hZGJhbmRBdG9tKSkge1xyXG4gICAgICBjb25zdCBiYlNhbGVzUHJvY2VzcyA9IGdldCgoYXdhaXQgZ2V0KGJyb2FkYmFuZCQpKS5zYWxlc1Byb2Nlc3MkKTtcclxuICAgICAgc3dpdGNoIChiYlNhbGVzUHJvY2Vzcykge1xyXG4gICAgICAgIGNhc2UgQmJTYWxlc1Byb2Nlc3MuQlJPQURCQU5EX01JR1JBWklPTkU6XHJcbiAgICAgICAgICByZXR1cm4gJ0JST0FEQkFORF9NSUdSQVpJT05FJztcclxuICAgICAgICBjYXNlIEJiU2FsZXNQcm9jZXNzLkJST0FEQkFORF9OVU9WQV9BVFRJVkFaSU9ORTpcclxuICAgICAgICAgIHJldHVybiAnQlJPQURCQU5EX05VT1ZBX0FUVElWQVpJT05FJztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAnR0VOX1dPJztcclxuICB9XHJcbik7XHJcbiJdLCJmaWxlIjoiQzovVXNlcnMvYWludHJvbmEvRGVza3RvcC9BcHAvcmVhY3QvbmFqL2xpYnMvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9hdG9tcy9zYWxlcy1wcm9jZXNzLWF0b21zLnRzIn0=