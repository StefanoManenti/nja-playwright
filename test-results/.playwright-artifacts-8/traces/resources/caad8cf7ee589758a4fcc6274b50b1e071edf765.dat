import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/step-offer-title.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/react_jsx-dev-runtime.js?v=0189a8d1"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/step-offer-title.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$();
globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || { cache: /* @__PURE__ */ new Map(), get(name, inst) {
  if (this.cache.has(name)) {
    return this.cache.get(name);
  }
  this.cache.set(name, inst);
  return inst;
} };
import {
  gasAtom,
  offerNameAtom,
  OperativeMode,
  operativeModeAtom,
  powerAtom,
  tsBroadbandAtom,
  tsGasAtom,
  tsPanelAtom,
  tsPowerAtom,
  workingOnBroadbandAtom,
  workingOnPanelStandaloneAtom
} from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/data-access/src/index.ts";
import { Typography } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/ui-atoms/src/index.ts";
import { joinItalian, useDocumentTitle } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/libs/util/src/index.ts";
import { atom, useAtomValue } from "/@fs/C:/Users/aintrona/Desktop/App/react/naj/node_modules/.vite/apps/naj/deps/jotai.js?v=0189a8d1";
const _offerTitleAtom = globalThis.jotaiAtomCache.get(
  "C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\ui-molecules\\src\\lib\\layout\\step-offer-title.tsx/_offerTitleAtom",
  atom(async (get) => {
    const panel = get(workingOnPanelStandaloneAtom);
    if (panel) {
      return "Adotta un pannello";
    }
    let s = await get(offerNameAtom);
    const broadband = get(workingOnBroadbandAtom);
    if (broadband) {
      return s;
    }
    const operativeMode = get(operativeModeAtom);
    if (operativeMode === OperativeMode.NEW_ACTIVATION) {
      s += " Attivazione";
    }
    return s;
  })
);
_offerTitleAtom.debugLabel = "_offerTitleAtom";
const offerTitleAtomWithCommodity = (powerAtom2, gasAtom2, panelAtom, broadbandAtom) => atom(async (get) => {
  let s = await get(_offerTitleAtom);
  const panel = get(panelAtom);
  if (panel) {
    return s;
  }
  s = await get(_offerTitleAtom);
  const ss = [];
  if (get(broadbandAtom)) {
    ss.push("Fibra");
  }
  if (get(powerAtom2)) {
    ss.push("Luce");
  }
  if (get(gasAtom2)) {
    ss.push("Gas");
  }
  return `${s} ${joinItalian(ss, "e")}`;
});
const offerTitleWithCommodity = offerTitleAtomWithCommodity(
  powerAtom,
  gasAtom,
  workingOnPanelStandaloneAtom,
  workingOnBroadbandAtom
);
const offerTitleWithCommodityTs = offerTitleAtomWithCommodity(
  tsPowerAtom,
  tsGasAtom,
  tsPanelAtom,
  tsBroadbandAtom
);
export const documentTitleAtom = globalThis.jotaiAtomCache.get("C:\\Users\\aintrona\\Desktop\\App\\react\\naj\\libs\\ui-molecules\\src\\lib\\layout\\step-offer-title.tsx/documentTitleAtom", atom(async (get) => {
  const panel = get(workingOnPanelStandaloneAtom);
  if (panel) {
    return "Adotta un pannello";
  }
  return `Offerta ${await get(offerTitleWithCommodity)}`;
}));
documentTitleAtom.debugLabel = "documentTitleAtom";
export function useDynamicDocumentTitle() {
  _s();
  const offerTitle = useAtomValue(documentTitleAtom, { delay: 0 });
  useDocumentTitle(`${offerTitle} | Eni Plenitude`);
}
_s(useDynamicDocumentTitle, "2LdoxqfOaj4NFQJCyglGz6w8x6o=", false, function() {
  return [useAtomValue, useDocumentTitle];
});
export function StepOfferTitle(props) {
  return /* @__PURE__ */ jsxDEV(Typography, { component: "h1", variant: "h1", children: /* @__PURE__ */ jsxDEV(OfferTitle, { variant: props.variant }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/step-offer-title.tsx",
    lineNumber: 105,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/step-offer-title.tsx",
    lineNumber: 104,
    columnNumber: 5
  }, this);
}
_c = StepOfferTitle;
export function OfferTitle({
  variant = "default"
}) {
  _s2();
  return useAtomValue(
    variant === "troubleshooting" ? offerTitleWithCommodityTs : offerTitleWithCommodity,
    { delay: 0 }
  );
}
_s2(OfferTitle, "ZVRRUipwa0Th20s2u0xzYzJSEZE=", false, function() {
  return [useAtomValue];
});
_c2 = OfferTitle;
var _c, _c2;
$RefreshReg$(_c, "StepOfferTitle");
$RefreshReg$(_c2, "OfferTitle");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/aintrona/Desktop/App/react/naj/libs/ui-molecules/src/lib/layout/step-offer-title.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,